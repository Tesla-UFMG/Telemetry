
Interface_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001064  20000078  08003d10  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200010dc  08003d10  000210dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000176cd  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d32  00000000  00000000  0003776e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000dc8b  00000000  00000000  0003b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001260  00000000  00000000  00049130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001120  00000000  00000000  0004a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001ac43  00000000  00000000  0004b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001be2f  00000000  00000000  000660f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000905cd  00000000  00000000  00081f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001124ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034c8  00000000  00000000  00112540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a84 	.word	0x08003a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003a84 	.word	0x08003a84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b510      	push	{r4, lr}
 800015e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x40>)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <HAL_InitTick+0x44>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fbf0 	bl	8000958 <HAL_SYSTICK_Config>
 8000178:	b968      	cbnz	r0, 8000196 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017a:	2c0f      	cmp	r4, #15
 800017c:	d901      	bls.n	8000182 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800017e:	2001      	movs	r0, #1
 8000180:	e00a      	b.n	8000198 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000182:	2200      	movs	r2, #0
 8000184:	4621      	mov	r1, r4
 8000186:	f04f 30ff 	mov.w	r0, #4294967295
 800018a:	f000 fb9f 	bl	80008cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018e:	4b03      	ldr	r3, [pc, #12]	; (800019c <HAL_InitTick+0x40>)
 8000190:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000192:	2000      	movs	r0, #0
 8000194:	e000      	b.n	8000198 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000196:	2001      	movs	r0, #1
}
 8000198:	bd10      	pop	{r4, pc}
 800019a:	bf00      	nop
 800019c:	20000000 	.word	0x20000000
 80001a0:	2000000c 	.word	0x2000000c

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a6:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
 80001a8:	6813      	ldr	r3, [r2, #0]
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b0:	2003      	movs	r0, #3
 80001b2:	f000 fb79 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fa74 	bl	80026a8 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	6811      	ldr	r1, [r2, #0]
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <HAL_IncTick+0x14>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000094 	.word	0x20000094
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000094 	.word	0x20000094

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001fa:	d002      	beq.n	8000202 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <HAL_Delay+0x24>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000202:	f7ff ffed 	bl	80001e0 <HAL_GetTick>
 8000206:	1b40      	subs	r0, r0, r5
 8000208:	42a0      	cmp	r0, r4
 800020a:	d3fa      	bcc.n	8000202 <HAL_Delay+0x16>
  {
  }
}
 800020c:	bd38      	pop	{r3, r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000214:	2800      	cmp	r0, #0
 8000216:	f000 80a1 	beq.w	800035c <HAL_CAN_Init+0x148>
{
 800021a:	b538      	push	{r3, r4, r5, lr}
 800021c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800021e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000222:	b1d3      	cbz	r3, 800025a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000224:	6822      	ldr	r2, [r4, #0]
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800022e:	f7ff ffd7 	bl	80001e0 <HAL_GetTick>
 8000232:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000234:	6823      	ldr	r3, [r4, #0]
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	f012 0f01 	tst.w	r2, #1
 800023c:	d110      	bne.n	8000260 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800023e:	f7ff ffcf 	bl	80001e0 <HAL_GetTick>
 8000242:	1b40      	subs	r0, r0, r5
 8000244:	280a      	cmp	r0, #10
 8000246:	d9f5      	bls.n	8000234 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800024a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000250:	2305      	movs	r3, #5
 8000252:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000256:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000258:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800025a:	f002 f809 	bl	8002270 <HAL_CAN_MspInit>
 800025e:	e7e1      	b.n	8000224 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	f022 0202 	bic.w	r2, r2, #2
 8000266:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000268:	f7ff ffba 	bl	80001e0 <HAL_GetTick>
 800026c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800026e:	6823      	ldr	r3, [r4, #0]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	f012 0f02 	tst.w	r2, #2
 8000276:	d00d      	beq.n	8000294 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000278:	f7ff ffb2 	bl	80001e0 <HAL_GetTick>
 800027c:	1b40      	subs	r0, r0, r5
 800027e:	280a      	cmp	r0, #10
 8000280:	d9f5      	bls.n	800026e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800028a:	2305      	movs	r3, #5
 800028c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000290:	2001      	movs	r0, #1
 8000292:	e7e1      	b.n	8000258 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000294:	7e22      	ldrb	r2, [r4, #24]
 8000296:	2a01      	cmp	r2, #1
 8000298:	d03d      	beq.n	8000316 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002a0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80002a2:	7e63      	ldrb	r3, [r4, #25]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d03b      	beq.n	8000320 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002a8:	6822      	ldr	r2, [r4, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002b2:	7ea3      	ldrb	r3, [r4, #26]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d039      	beq.n	800032c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002b8:	6822      	ldr	r2, [r4, #0]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f023 0320 	bic.w	r3, r3, #32
 80002c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002c2:	7ee3      	ldrb	r3, [r4, #27]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d037      	beq.n	8000338 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002c8:	6822      	ldr	r2, [r4, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f043 0310 	orr.w	r3, r3, #16
 80002d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002d2:	7f23      	ldrb	r3, [r4, #28]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d035      	beq.n	8000344 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002d8:	6822      	ldr	r2, [r4, #0]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 0308 	bic.w	r3, r3, #8
 80002e0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002e2:	7f63      	ldrb	r3, [r4, #29]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d033      	beq.n	8000350 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002e8:	6822      	ldr	r2, [r4, #0]
 80002ea:	6813      	ldr	r3, [r2, #0]
 80002ec:	f023 0304 	bic.w	r3, r3, #4
 80002f0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002f2:	68a3      	ldr	r3, [r4, #8]
 80002f4:	68e2      	ldr	r2, [r4, #12]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	6922      	ldr	r2, [r4, #16]
 80002fa:	4313      	orrs	r3, r2
 80002fc:	6962      	ldr	r2, [r4, #20]
 80002fe:	4313      	orrs	r3, r2
 8000300:	6862      	ldr	r2, [r4, #4]
 8000302:	3a01      	subs	r2, #1
 8000304:	6821      	ldr	r1, [r4, #0]
 8000306:	4313      	orrs	r3, r2
 8000308:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800030a:	2000      	movs	r0, #0
 800030c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800030e:	2301      	movs	r3, #1
 8000310:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000314:	e7a0      	b.n	8000258 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	e7c0      	b.n	80002a2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000320:	6822      	ldr	r2, [r4, #0]
 8000322:	6813      	ldr	r3, [r2, #0]
 8000324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	e7c2      	b.n	80002b2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6813      	ldr	r3, [r2, #0]
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	e7c4      	b.n	80002c2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000338:	6822      	ldr	r2, [r4, #0]
 800033a:	6813      	ldr	r3, [r2, #0]
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	e7c6      	b.n	80002d2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000344:	6822      	ldr	r2, [r4, #0]
 8000346:	6813      	ldr	r3, [r2, #0]
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	e7c8      	b.n	80002e2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000350:	6822      	ldr	r2, [r4, #0]
 8000352:	6813      	ldr	r3, [r2, #0]
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	e7ca      	b.n	80002f2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800035c:	2001      	movs	r0, #1
}
 800035e:	4770      	bx	lr

08000360 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000360:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000362:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000366:	3b01      	subs	r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b01      	cmp	r3, #1
 800036c:	d905      	bls.n	800037a <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800036e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000374:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000376:	2001      	movs	r0, #1
  }
}
 8000378:	4770      	bx	lr
{
 800037a:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800037c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000388:	694b      	ldr	r3, [r1, #20]
 800038a:	f003 031f 	and.w	r3, r3, #31
 800038e:	2001      	movs	r0, #1
 8000390:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000394:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000398:	ea6f 0c03 	mvn.w	ip, r3
 800039c:	ea20 0003 	bic.w	r0, r0, r3
 80003a0:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003a4:	69c8      	ldr	r0, [r1, #28]
 80003a6:	b9c0      	cbnz	r0, 80003da <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80003a8:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80003ac:	ea0c 0000 	and.w	r0, ip, r0
 80003b0:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003b4:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003b6:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003b8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003c0:	3048      	adds	r0, #72	; 0x48
 80003c2:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003c6:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003c8:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003ca:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80003ce:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003d2:	3048      	adds	r0, #72	; 0x48
 80003d4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80003d8:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003da:	69c8      	ldr	r0, [r1, #28]
 80003dc:	2801      	cmp	r0, #1
 80003de:	d01a      	beq.n	8000416 <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003e0:	6988      	ldr	r0, [r1, #24]
 80003e2:	bb88      	cbnz	r0, 8000448 <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80003e8:	ea0c 0000 	and.w	r0, ip, r0
 80003ec:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003f0:	6908      	ldr	r0, [r1, #16]
 80003f2:	bb78      	cbnz	r0, 8000454 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003f4:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80003f8:	ea0c 0000 	and.w	r0, ip, r0
 80003fc:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000400:	6a09      	ldr	r1, [r1, #32]
 8000402:	2901      	cmp	r1, #1
 8000404:	d02c      	beq.n	8000460 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000406:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000412:	2000      	movs	r0, #0
}
 8000414:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000416:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 800041a:	4318      	orrs	r0, r3
 800041c:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000420:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000422:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000424:	f8d1 e000 	ldr.w	lr, [r1]
 8000428:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800042c:	3048      	adds	r0, #72	; 0x48
 800042e:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000432:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000434:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000436:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800043a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800043e:	3048      	adds	r0, #72	; 0x48
 8000440:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000444:	6044      	str	r4, [r0, #4]
 8000446:	e7cb      	b.n	80003e0 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800044c:	4318      	orrs	r0, r3
 800044e:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000452:	e7cd      	b.n	80003f0 <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000454:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000458:	4318      	orrs	r0, r3
 800045a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800045e:	e7cf      	b.n	8000400 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000460:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000464:	430b      	orrs	r3, r1
 8000466:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 800046a:	e7cc      	b.n	8000406 <HAL_CAN_ConfigFilter+0xa6>

0800046c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000470:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000474:	b2ed      	uxtb	r5, r5
 8000476:	2d01      	cmp	r5, #1
 8000478:	d006      	beq.n	8000488 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800047a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800047c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000480:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000482:	2501      	movs	r5, #1
  }
}
 8000484:	4628      	mov	r0, r5
 8000486:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000488:	2302      	movs	r3, #2
 800048a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800048e:	6802      	ldr	r2, [r0, #0]
 8000490:	6813      	ldr	r3, [r2, #0]
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000498:	f7ff fea2 	bl	80001e0 <HAL_GetTick>
 800049c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f013 0f01 	tst.w	r3, #1
 80004a6:	d00c      	beq.n	80004c2 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004a8:	f7ff fe9a 	bl	80001e0 <HAL_GetTick>
 80004ac:	1b83      	subs	r3, r0, r6
 80004ae:	2b0a      	cmp	r3, #10
 80004b0:	d9f5      	bls.n	800049e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80004b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004ba:	2305      	movs	r3, #5
 80004bc:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80004c0:	e7e0      	b.n	8000484 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c2:	2500      	movs	r5, #0
 80004c4:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80004c6:	e7dd      	b.n	8000484 <HAL_CAN_Start+0x18>

080004c8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80004c8:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80004cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80004d0:	fa5f fc8c 	uxtb.w	ip, ip
 80004d4:	f1bc 0f01 	cmp.w	ip, #1
 80004d8:	f200 809b 	bhi.w	8000612 <HAL_CAN_GetRxMessage+0x14a>
{
 80004dc:	b410      	push	{r4}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004de:	b951      	cbnz	r1, 80004f6 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80004e0:	6804      	ldr	r4, [r0, #0]
 80004e2:	68e4      	ldr	r4, [r4, #12]
 80004e4:	f014 0f03 	tst.w	r4, #3
 80004e8:	d110      	bne.n	800050c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
 80004f4:	e07b      	b.n	80005ee <HAL_CAN_GetRxMessage+0x126>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004f6:	6804      	ldr	r4, [r0, #0]
 80004f8:	6924      	ldr	r4, [r4, #16]
 80004fa:	f014 0f03 	tst.w	r4, #3
 80004fe:	d105      	bne.n	800050c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000506:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000508:	2001      	movs	r0, #1
 800050a:	e070      	b.n	80005ee <HAL_CAN_GetRxMessage+0x126>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800050c:	f101 041b 	add.w	r4, r1, #27
 8000510:	0124      	lsls	r4, r4, #4
 8000512:	f8d0 c000 	ldr.w	ip, [r0]
 8000516:	f85c 4004 	ldr.w	r4, [ip, r4]
 800051a:	f004 0404 	and.w	r4, r4, #4
 800051e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000520:	2c00      	cmp	r4, #0
 8000522:	d166      	bne.n	80005f2 <HAL_CAN_GetRxMessage+0x12a>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000524:	f101 041b 	add.w	r4, r1, #27
 8000528:	0124      	lsls	r4, r4, #4
 800052a:	f8d0 c000 	ldr.w	ip, [r0]
 800052e:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000532:	0d64      	lsrs	r4, r4, #21
 8000534:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000536:	6804      	ldr	r4, [r0, #0]
 8000538:	f101 0c1b 	add.w	ip, r1, #27
 800053c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000540:	f854 400c 	ldr.w	r4, [r4, ip]
 8000544:	f004 0402 	and.w	r4, r4, #2
 8000548:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800054a:	6804      	ldr	r4, [r0, #0]
 800054c:	4464      	add	r4, ip
 800054e:	6864      	ldr	r4, [r4, #4]
 8000550:	f004 040f 	and.w	r4, r4, #15
 8000554:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000556:	6804      	ldr	r4, [r0, #0]
 8000558:	4464      	add	r4, ip
 800055a:	6864      	ldr	r4, [r4, #4]
 800055c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000560:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000562:	6804      	ldr	r4, [r0, #0]
 8000564:	4464      	add	r4, ip
 8000566:	6864      	ldr	r4, [r4, #4]
 8000568:	0c24      	lsrs	r4, r4, #16
 800056a:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000572:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000576:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000578:	6802      	ldr	r2, [r0, #0]
 800057a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800057e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000582:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000586:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000588:	6802      	ldr	r2, [r0, #0]
 800058a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800058e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000592:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000596:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000598:	6802      	ldr	r2, [r0, #0]
 800059a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800059e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80005a6:	6802      	ldr	r2, [r0, #0]
 80005a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005ac:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005b0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80005b2:	6802      	ldr	r2, [r0, #0]
 80005b4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005b8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80005c0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80005c2:	6802      	ldr	r2, [r0, #0]
 80005c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005c8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005cc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80005d0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80005d2:	6802      	ldr	r2, [r0, #0]
 80005d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005d8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005dc:	0e12      	lsrs	r2, r2, #24
 80005de:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005e0:	b989      	cbnz	r1, 8000606 <HAL_CAN_GetRxMessage+0x13e>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80005e2:	6802      	ldr	r2, [r0, #0]
 80005e4:	68d3      	ldr	r3, [r2, #12]
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80005ec:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80005ee:	bc10      	pop	{r4}
 80005f0:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80005f2:	f101 041b 	add.w	r4, r1, #27
 80005f6:	0124      	lsls	r4, r4, #4
 80005f8:	f8d0 c000 	ldr.w	ip, [r0]
 80005fc:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000600:	08e4      	lsrs	r4, r4, #3
 8000602:	6054      	str	r4, [r2, #4]
 8000604:	e797      	b.n	8000536 <HAL_CAN_GetRxMessage+0x6e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000606:	6802      	ldr	r2, [r0, #0]
 8000608:	6913      	ldr	r3, [r2, #16]
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6113      	str	r3, [r2, #16]
 8000610:	e7ec      	b.n	80005ec <HAL_CAN_GetRxMessage+0x124>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000612:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000618:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800061a:	2001      	movs	r0, #1
}
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800061e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000622:	3b01      	subs	r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d905      	bls.n	8000636 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800062a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800062c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000630:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
  }
}
 8000634:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000636:	6802      	ldr	r2, [r0, #0]
 8000638:	6953      	ldr	r3, [r2, #20]
 800063a:	4319      	orrs	r1, r3
 800063c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800063e:	2000      	movs	r0, #0
 8000640:	4770      	bx	lr

08000642 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000642:	4770      	bx	lr

08000644 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000644:	4770      	bx	lr

08000646 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000646:	4770      	bx	lr

08000648 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000648:	4770      	bx	lr

0800064a <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800064a:	4770      	bx	lr

0800064c <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800064c:	4770      	bx	lr

0800064e <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800064e:	4770      	bx	lr

08000650 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000650:	4770      	bx	lr

08000652 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000652:	4770      	bx	lr

08000654 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000654:	4770      	bx	lr

08000656 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000656:	4770      	bx	lr

08000658 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000658:	4770      	bx	lr

0800065a <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800065a:	4770      	bx	lr

0800065c <HAL_CAN_IRQHandler>:
{
 800065c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000660:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000662:	6803      	ldr	r3, [r0, #0]
 8000664:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000666:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800066a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800066c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000670:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000674:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000678:	f014 0601 	ands.w	r6, r4, #1
 800067c:	d03b      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800067e:	f017 0601 	ands.w	r6, r7, #1
 8000682:	d016      	beq.n	80006b2 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000684:	2201      	movs	r2, #1
 8000686:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000688:	f017 0f02 	tst.w	r7, #2
 800068c:	d108      	bne.n	80006a0 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800068e:	f017 0f04 	tst.w	r7, #4
 8000692:	d10c      	bne.n	80006ae <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000694:	f017 0608 	ands.w	r6, r7, #8
 8000698:	d006      	beq.n	80006a8 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800069a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800069e:	e008      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80006a0:	f7ff ffcf 	bl	8000642 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80006a4:	2600      	movs	r6, #0
 80006a6:	e004      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80006a8:	f7ff ffce 	bl	8000648 <HAL_CAN_TxMailbox0AbortCallback>
 80006ac:	e001      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80006ae:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80006b2:	f417 7f80 	tst.w	r7, #256	; 0x100
 80006b6:	d00d      	beq.n	80006d4 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006c0:	f417 7f00 	tst.w	r7, #512	; 0x200
 80006c4:	f040 8086 	bne.w	80007d4 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80006c8:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80006cc:	f000 8086 	beq.w	80007dc <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80006d0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80006d4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006d8:	d00d      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006e2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006e6:	f040 8083 	bne.w	80007f0 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006ea:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80006ee:	f000 8083 	beq.w	80007f8 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006f2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006f6:	f014 0f08 	tst.w	r4, #8
 80006fa:	d007      	beq.n	800070c <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006fc:	f01b 0f10 	tst.w	fp, #16
 8000700:	d004      	beq.n	800070c <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000702:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000706:	682b      	ldr	r3, [r5, #0]
 8000708:	2210      	movs	r2, #16
 800070a:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800070c:	f014 0f04 	tst.w	r4, #4
 8000710:	d002      	beq.n	8000718 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000712:	f01b 0f08 	tst.w	fp, #8
 8000716:	d179      	bne.n	800080c <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000718:	f014 0f02 	tst.w	r4, #2
 800071c:	d004      	beq.n	8000728 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	f013 0f03 	tst.w	r3, #3
 8000726:	d178      	bne.n	800081a <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000728:	f014 0f40 	tst.w	r4, #64	; 0x40
 800072c:	d007      	beq.n	800073e <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800072e:	f01a 0f10 	tst.w	sl, #16
 8000732:	d004      	beq.n	800073e <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000734:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	2210      	movs	r2, #16
 800073c:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800073e:	f014 0f20 	tst.w	r4, #32
 8000742:	d002      	beq.n	800074a <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000744:	f01a 0f08 	tst.w	sl, #8
 8000748:	d16b      	bne.n	8000822 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800074a:	f014 0f10 	tst.w	r4, #16
 800074e:	d004      	beq.n	800075a <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	f013 0f03 	tst.w	r3, #3
 8000758:	d16a      	bne.n	8000830 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800075a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800075e:	d002      	beq.n	8000766 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000760:	f018 0f10 	tst.w	r8, #16
 8000764:	d168      	bne.n	8000838 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000766:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800076a:	d002      	beq.n	8000772 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800076c:	f018 0f08 	tst.w	r8, #8
 8000770:	d169      	bne.n	8000846 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000772:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000776:	d07a      	beq.n	800086e <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000778:	f018 0f04 	tst.w	r8, #4
 800077c:	d074      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800077e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000782:	d004      	beq.n	800078e <HAL_CAN_IRQHandler+0x132>
 8000784:	f019 0f01 	tst.w	r9, #1
 8000788:	d001      	beq.n	800078e <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 800078a:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800078e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000792:	d004      	beq.n	800079e <HAL_CAN_IRQHandler+0x142>
 8000794:	f019 0f02 	tst.w	r9, #2
 8000798:	d001      	beq.n	800079e <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 800079a:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800079e:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80007a2:	d004      	beq.n	80007ae <HAL_CAN_IRQHandler+0x152>
 80007a4:	f019 0f04 	tst.w	r9, #4
 80007a8:	d001      	beq.n	80007ae <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 80007aa:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80007ae:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80007b2:	d059      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
 80007b4:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80007b8:	d056      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 80007ba:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80007be:	d065      	beq.n	800088c <HAL_CAN_IRQHandler+0x230>
 80007c0:	d858      	bhi.n	8000874 <HAL_CAN_IRQHandler+0x218>
 80007c2:	f1b9 0f20 	cmp.w	r9, #32
 80007c6:	d05e      	beq.n	8000886 <HAL_CAN_IRQHandler+0x22a>
 80007c8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80007cc:	d142      	bne.n	8000854 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80007ce:	f046 0620 	orr.w	r6, r6, #32
            break;
 80007d2:	e044      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80007d4:	4628      	mov	r0, r5
 80007d6:	f7ff ff35 	bl	8000644 <HAL_CAN_TxMailbox1CompleteCallback>
 80007da:	e77b      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80007dc:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80007e0:	d002      	beq.n	80007e8 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80007e2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007e6:	e775      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80007e8:	4628      	mov	r0, r5
 80007ea:	f7ff ff2e 	bl	800064a <HAL_CAN_TxMailbox1AbortCallback>
 80007ee:	e771      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff ff28 	bl	8000646 <HAL_CAN_TxMailbox2CompleteCallback>
 80007f6:	e77e      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80007f8:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80007fc:	d002      	beq.n	8000804 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007fe:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000802:	e778      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000804:	4628      	mov	r0, r5
 8000806:	f7ff ff21 	bl	800064c <HAL_CAN_TxMailbox2AbortCallback>
 800080a:	e774      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	2208      	movs	r2, #8
 8000810:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000812:	4628      	mov	r0, r5
 8000814:	f7ff ff1c 	bl	8000650 <HAL_CAN_RxFifo0FullCallback>
 8000818:	e77e      	b.n	8000718 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800081a:	4628      	mov	r0, r5
 800081c:	f7ff ff17 	bl	800064e <HAL_CAN_RxFifo0MsgPendingCallback>
 8000820:	e782      	b.n	8000728 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000822:	682b      	ldr	r3, [r5, #0]
 8000824:	2208      	movs	r2, #8
 8000826:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000828:	4628      	mov	r0, r5
 800082a:	f7ff ff13 	bl	8000654 <HAL_CAN_RxFifo1FullCallback>
 800082e:	e78c      	b.n	800074a <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff ff0e 	bl	8000652 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000836:	e790      	b.n	800075a <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	2210      	movs	r2, #16
 800083c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800083e:	4628      	mov	r0, r5
 8000840:	f7ff ff09 	bl	8000656 <HAL_CAN_SleepCallback>
 8000844:	e78f      	b.n	8000766 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	2208      	movs	r2, #8
 800084a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800084c:	4628      	mov	r0, r5
 800084e:	f7ff ff03 	bl	8000658 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000852:	e78e      	b.n	8000772 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000854:	f1b9 0f10 	cmp.w	r9, #16
 8000858:	d101      	bne.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800085a:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800085e:	682a      	ldr	r2, [r5, #0]
 8000860:	6993      	ldr	r3, [r2, #24]
 8000862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000866:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800086e:	b99e      	cbnz	r6, 8000898 <HAL_CAN_IRQHandler+0x23c>
}
 8000870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000874:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000878:	d00b      	beq.n	8000892 <HAL_CAN_IRQHandler+0x236>
 800087a:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 800087e:	d1ee      	bne.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000880:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000884:	e7eb      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000886:	f046 0610 	orr.w	r6, r6, #16
            break;
 800088a:	e7e8      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 800088c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000890:	e7e5      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000892:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000896:	e7e2      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800089a:	431e      	orrs	r6, r3
 800089c:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800089e:	4628      	mov	r0, r5
 80008a0:	f7ff fedb 	bl	800065a <HAL_CAN_ErrorCallback>
}
 80008a4:	e7e4      	b.n	8000870 <HAL_CAN_IRQHandler+0x214>
	...

080008a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	0200      	lsls	r0, r0, #8
 80008b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008cc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_NVIC_SetPriority+0x68>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d6:	f1c3 0c07 	rsb	ip, r3, #7
 80008da:	f1bc 0f04 	cmp.w	ip, #4
 80008de:	bf28      	it	cs
 80008e0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e4:	f103 0e04 	add.w	lr, r3, #4
 80008e8:	f1be 0f06 	cmp.w	lr, #6
 80008ec:	d918      	bls.n	8000920 <HAL_NVIC_SetPriority+0x54>
 80008ee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 3eff 	mov.w	lr, #4294967295
 80008f4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80008f8:	ea21 010c 	bic.w	r1, r1, ip
 80008fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fe:	fa0e f303 	lsl.w	r3, lr, r3
 8000902:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000906:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000908:	2800      	cmp	r0, #0
 800090a:	db0b      	blt.n	8000924 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	0109      	lsls	r1, r1, #4
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000914:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000918:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800091c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000920:	2300      	movs	r3, #0
 8000922:	e7e5      	b.n	80008f0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	f000 000f 	and.w	r0, r0, #15
 8000928:	0109      	lsls	r1, r1, #4
 800092a:	b2c9      	uxtb	r1, r1
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_NVIC_SetPriority+0x6c>)
 800092e:	5419      	strb	r1, [r3, r0]
 8000930:	e7f4      	b.n	800091c <HAL_NVIC_SetPriority+0x50>
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	e000ed14 	.word	0xe000ed14

0800093c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800093c:	2800      	cmp	r0, #0
 800093e:	db07      	blt.n	8000950 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000940:	f000 021f 	and.w	r2, r0, #31
 8000944:	0940      	lsrs	r0, r0, #5
 8000946:	2301      	movs	r3, #1
 8000948:	4093      	lsls	r3, r2
 800094a:	4a02      	ldr	r2, [pc, #8]	; (8000954 <HAL_NVIC_EnableIRQ+0x18>)
 800094c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	3801      	subs	r0, #1
 800095a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095e:	d20b      	bcs.n	8000978 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000964:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_SYSTICK_Config+0x24>)
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096e:	2000      	movs	r0, #0
 8000970:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	2207      	movs	r2, #7
 8000974:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000976:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000978:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000980:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000982:	2401      	movs	r4, #1
 8000984:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000986:	40ac      	lsls	r4, r5
 8000988:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800098a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800098c:	6804      	ldr	r4, [r0, #0]
 800098e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000990:	6843      	ldr	r3, [r0, #4]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d005      	beq.n	80009a2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000996:	6803      	ldr	r3, [r0, #0]
 8000998:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800099a:	6803      	ldr	r3, [r0, #0]
 800099c:	60da      	str	r2, [r3, #12]
  }
}
 800099e:	bc30      	pop	{r4, r5}
 80009a0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	60d9      	str	r1, [r3, #12]
 80009aa:	e7f8      	b.n	800099e <DMA_SetConfig+0x1e>

080009ac <HAL_DMA_Init>:
  if(hdma == NULL)
 80009ac:	b360      	cbz	r0, 8000a08 <HAL_DMA_Init+0x5c>
{
 80009ae:	b410      	push	{r4}
 80009b0:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009b2:	6801      	ldr	r1, [r0, #0]
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_DMA_Init+0x60>)
 80009b6:	440b      	add	r3, r1
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <HAL_DMA_Init+0x64>)
 80009ba:	fba0 0303 	umull	r0, r3, r0, r3
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_DMA_Init+0x68>)
 80009c6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80009ce:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80009d4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80009d8:	6853      	ldr	r3, [r2, #4]
 80009da:	6894      	ldr	r4, [r2, #8]
 80009dc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009de:	68d4      	ldr	r4, [r2, #12]
 80009e0:	4323      	orrs	r3, r4
 80009e2:	6914      	ldr	r4, [r2, #16]
 80009e4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e6:	6954      	ldr	r4, [r2, #20]
 80009e8:	4323      	orrs	r3, r4
 80009ea:	6994      	ldr	r4, [r2, #24]
 80009ec:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ee:	69d4      	ldr	r4, [r2, #28]
 80009f0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80009f2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80009f4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f6:	2000      	movs	r0, #0
 80009f8:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000a00:	f882 0020 	strb.w	r0, [r2, #32]
}
 8000a04:	bc10      	pop	{r4}
 8000a06:	4770      	bx	lr
    return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
}
 8000a0a:	4770      	bx	lr
 8000a0c:	bffdfff8 	.word	0xbffdfff8
 8000a10:	cccccccd 	.word	0xcccccccd
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_DMA_Start_IT>:
{
 8000a18:	b538      	push	{r3, r4, r5, lr}
 8000a1a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000a1c:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000a20:	2801      	cmp	r0, #1
 8000a22:	d031      	beq.n	8000a88 <HAL_DMA_Start_IT+0x70>
 8000a24:	2001      	movs	r0, #1
 8000a26:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a2a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d004      	beq.n	8000a3c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8000a32:	2300      	movs	r3, #0
 8000a34:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8000a38:	2002      	movs	r0, #2
}
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a42:	2000      	movs	r0, #0
 8000a44:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000a46:	6825      	ldr	r5, [r4, #0]
 8000a48:	6828      	ldr	r0, [r5, #0]
 8000a4a:	f020 0001 	bic.w	r0, r0, #1
 8000a4e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff ff95 	bl	8000980 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000a56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a58:	b15b      	cbz	r3, 8000a72 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5a:	6822      	ldr	r2, [r4, #0]
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f043 030e 	orr.w	r3, r3, #14
 8000a62:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e7e3      	b.n	8000a3a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f023 0304 	bic.w	r3, r3, #4
 8000a7a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a7c:	6822      	ldr	r2, [r4, #0]
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	f043 030a 	orr.w	r3, r3, #10
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e7ed      	b.n	8000a64 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	e7d6      	b.n	8000a3a <HAL_DMA_Start_IT+0x22>

08000a8c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d006      	beq.n	8000aa2 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	2304      	movs	r3, #4
 8000a96:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa2:	6802      	ldr	r2, [r0, #0]
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f023 030e 	bic.w	r3, r3, #14
 8000aaa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ab6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ab8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000aba:	2201      	movs	r2, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000acc:	4618      	mov	r0, r3
}
 8000ace:	4770      	bx	lr

08000ad0 <HAL_DMA_Abort_IT>:
{  
 8000ad0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	2304      	movs	r3, #4
 8000adc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae2:	6802      	ldr	r2, [r0, #0]
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	f023 030e 	bic.w	r3, r3, #14
 8000aea:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000aec:	6802      	ldr	r2, [r0, #0]
 8000aee:	6813      	ldr	r3, [r2, #0]
 8000af0:	f023 0301 	bic.w	r3, r3, #1
 8000af4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000af6:	6803      	ldr	r3, [r0, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_DMA_Abort_IT+0x90>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d014      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x58>
 8000afe:	3214      	adds	r2, #20
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d01f      	beq.n	8000b44 <HAL_DMA_Abort_IT+0x74>
 8000b04:	3214      	adds	r2, #20
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d01e      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x78>
 8000b0a:	3214      	adds	r2, #20
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d01e      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x7e>
 8000b10:	3214      	adds	r2, #20
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01e      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x84>
 8000b16:	3214      	adds	r2, #20
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d002      	beq.n	8000b22 <HAL_DMA_Abort_IT+0x52>
 8000b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b20:	e003      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b26:	e000      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_DMA_Abort_IT+0x94>)
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b34:	2300      	movs	r3, #0
 8000b36:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000b3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b3c:	b16b      	cbz	r3, 8000b5a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000b3e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000b40:	2000      	movs	r0, #0
 8000b42:	e7cd      	b.n	8000ae0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b44:	2210      	movs	r2, #16
 8000b46:	e7f0      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4c:	e7ed      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b52:	e7ea      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b58:	e7e7      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	e7c0      	b.n	8000ae0 <HAL_DMA_Abort_IT+0x10>
 8000b5e:	bf00      	nop
 8000b60:	40020008 	.word	0x40020008
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_DMA_IRQHandler>:
{
 8000b68:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b6c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b6e:	6804      	ldr	r4, [r0, #0]
 8000b70:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b72:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000b74:	2304      	movs	r3, #4
 8000b76:	408b      	lsls	r3, r1
 8000b78:	4213      	tst	r3, r2
 8000b7a:	d035      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x80>
 8000b7c:	f015 0f04 	tst.w	r5, #4
 8000b80:	d032      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	f013 0f20 	tst.w	r3, #32
 8000b88:	d103      	bne.n	8000b92 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	f023 0304 	bic.w	r3, r3, #4
 8000b90:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	4a43      	ldr	r2, [pc, #268]	; (8000ca4 <HAL_DMA_IRQHandler+0x13c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d014      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x5c>
 8000b9a:	3214      	adds	r2, #20
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d018      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x6a>
 8000ba0:	3214      	adds	r2, #20
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d017      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x6e>
 8000ba6:	3214      	adds	r2, #20
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d017      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x74>
 8000bac:	3214      	adds	r2, #20
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d017      	beq.n	8000be2 <HAL_DMA_IRQHandler+0x7a>
 8000bb2:	3214      	adds	r2, #20
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d002      	beq.n	8000bbe <HAL_DMA_IRQHandler+0x56>
 8000bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bbc:	e003      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc2:	e000      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_DMA_IRQHandler+0x140>)
 8000bc8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000bca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bcc:	b103      	cbz	r3, 8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8000bce:	4798      	blx	r3
}
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	e7f7      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	e7f4      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be0:	e7f1      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000be2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000be6:	e7ee      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000be8:	2302      	movs	r3, #2
 8000bea:	408b      	lsls	r3, r1
 8000bec:	4213      	tst	r3, r2
 8000bee:	d03c      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x102>
 8000bf0:	f015 0f02 	tst.w	r5, #2
 8000bf4:	d039      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f013 0f20 	tst.w	r3, #32
 8000bfc:	d106      	bne.n	8000c0c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	f023 030a 	bic.w	r3, r3, #10
 8000c04:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c0c:	6803      	ldr	r3, [r0, #0]
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_DMA_IRQHandler+0x13c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d014      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
 8000c14:	3214      	adds	r2, #20
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d01c      	beq.n	8000c54 <HAL_DMA_IRQHandler+0xec>
 8000c1a:	3214      	adds	r2, #20
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d01b      	beq.n	8000c58 <HAL_DMA_IRQHandler+0xf0>
 8000c20:	3214      	adds	r2, #20
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d01b      	beq.n	8000c5e <HAL_DMA_IRQHandler+0xf6>
 8000c26:	3214      	adds	r2, #20
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01b      	beq.n	8000c64 <HAL_DMA_IRQHandler+0xfc>
 8000c2c:	3214      	adds	r2, #20
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d002      	beq.n	8000c38 <HAL_DMA_IRQHandler+0xd0>
 8000c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c36:	e003      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c3c:	e000      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_DMA_IRQHandler+0x140>)
 8000c42:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000c4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0bf      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8000c50:	4798      	blx	r3
 8000c52:	e7bd      	b.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c54:	2220      	movs	r2, #32
 8000c56:	e7f3      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	e7f0      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	e7ed      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c68:	e7ea      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	fa03 f101 	lsl.w	r1, r3, r1
 8000c70:	4211      	tst	r1, r2
 8000c72:	d0ad      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
 8000c74:	f015 0f08 	tst.w	r5, #8
 8000c78:	d0aa      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	f023 030e 	bic.w	r3, r3, #14
 8000c80:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c84:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c86:	2301      	movs	r3, #1
 8000c88:	fa03 f202 	lsl.w	r2, r3, r2
 8000c8c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c8e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000c90:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000c94:	2300      	movs	r3, #0
 8000c96:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000c9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d097      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8000ca0:	4798      	blx	r3
  return;
 8000ca2:	e795      	b.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000cb2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	e0a6      	b.n	8000e04 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb6:	4d80      	ldr	r5, [pc, #512]	; (8000eb8 <HAL_GPIO_Init+0x20c>)
 8000cb8:	42aa      	cmp	r2, r5
 8000cba:	d010      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cbc:	d907      	bls.n	8000cce <HAL_GPIO_Init+0x22>
 8000cbe:	4d7f      	ldr	r5, [pc, #508]	; (8000ebc <HAL_GPIO_Init+0x210>)
 8000cc0:	42aa      	cmp	r2, r5
 8000cc2:	d00c      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cc4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000cc8:	42aa      	cmp	r2, r5
 8000cca:	d008      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000ccc:	e013      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
 8000cce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000cd2:	42aa      	cmp	r2, r5
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cd6:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000cda:	42aa      	cmp	r2, r5
 8000cdc:	d107      	bne.n	8000cee <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	688a      	ldr	r2, [r1, #8]
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d058      	beq.n	8000d96 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d051      	beq.n	8000d8c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000ce8:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cea:	2408      	movs	r4, #8
 8000cec:	e003      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000cee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000cf2:	42aa      	cmp	r2, r5
 8000cf4:	d0f3      	beq.n	8000cde <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000cfa:	d84e      	bhi.n	8000d9a <HAL_GPIO_Init+0xee>
 8000cfc:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cfe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000d02:	d84c      	bhi.n	8000d9e <HAL_GPIO_Init+0xf2>
 8000d04:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d08:	6833      	ldr	r3, [r6, #0]
 8000d0a:	250f      	movs	r5, #15
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	ea23 0305 	bic.w	r3, r3, r5
 8000d12:	fa04 f202 	lsl.w	r2, r4, r2
 8000d16:	4313      	orrs	r3, r2
 8000d18:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1a:	684b      	ldr	r3, [r1, #4]
 8000d1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d20:	d06e      	beq.n	8000e00 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <HAL_GPIO_Init+0x214>)
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d36:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000d3a:	1c95      	adds	r5, r2, #2
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <HAL_GPIO_Init+0x218>)
 8000d3e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d42:	f00c 0303 	and.w	r3, ip, #3
 8000d46:	009d      	lsls	r5, r3, #2
 8000d48:	230f      	movs	r3, #15
 8000d4a:	40ab      	lsls	r3, r5
 8000d4c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_GPIO_Init+0x21c>)
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d029      	beq.n	8000daa <HAL_GPIO_Init+0xfe>
 8000d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	f000 808e 	beq.w	8000e7c <HAL_GPIO_Init+0x1d0>
 8000d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f000 808b 	beq.w	8000e80 <HAL_GPIO_Init+0x1d4>
 8000d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0xfa>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e01a      	b.n	8000dac <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d76:	68cc      	ldr	r4, [r1, #12]
          break;
 8000d78:	e7bd      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d7a:	68cc      	ldr	r4, [r1, #12]
 8000d7c:	3404      	adds	r4, #4
          break;
 8000d7e:	e7ba      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d80:	68cc      	ldr	r4, [r1, #12]
 8000d82:	3408      	adds	r4, #8
          break;
 8000d84:	e7b7      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d86:	68cc      	ldr	r4, [r1, #12]
 8000d88:	340c      	adds	r4, #12
          break;
 8000d8a:	e7b4      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000d8c:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8e:	2408      	movs	r4, #8
 8000d90:	e7b1      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d92:	2400      	movs	r4, #0
 8000d94:	e7af      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d96:	2404      	movs	r4, #4
 8000d98:	e7ad      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d9a:	1d06      	adds	r6, r0, #4
 8000d9c:	e7af      	b.n	8000cfe <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9e:	f1ac 0208 	sub.w	r2, ip, #8
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	e7b0      	b.n	8000d08 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da6:	2303      	movs	r3, #3
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x100>
 8000daa:	2300      	movs	r3, #0
 8000dac:	40ab      	lsls	r3, r5
 8000dae:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000db0:	3202      	adds	r2, #2
 8000db2:	4d44      	ldr	r5, [pc, #272]	; (8000ec4 <HAL_GPIO_Init+0x218>)
 8000db4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	684b      	ldr	r3, [r1, #4]
 8000dba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dbe:	d061      	beq.n	8000e84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc0:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	ea43 030e 	orr.w	r3, r3, lr
 8000dc8:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dca:	684b      	ldr	r3, [r1, #4]
 8000dcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dd0:	d05e      	beq.n	8000e90 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000dd4:	6853      	ldr	r3, [r2, #4]
 8000dd6:	ea43 030e 	orr.w	r3, r3, lr
 8000dda:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	684b      	ldr	r3, [r1, #4]
 8000dde:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000de2:	d05b      	beq.n	8000e9c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	ea43 030e 	orr.w	r3, r3, lr
 8000dec:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	684b      	ldr	r3, [r1, #4]
 8000df0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000df4:	d058      	beq.n	8000ea8 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000df8:	68d3      	ldr	r3, [r2, #12]
 8000dfa:	ea43 030e 	orr.w	r3, r3, lr
 8000dfe:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000e00:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e04:	680a      	ldr	r2, [r1, #0]
 8000e06:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000e0a:	d053      	beq.n	8000eb4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000e16:	ea33 0202 	bics.w	r2, r3, r2
 8000e1a:	d1f1      	bne.n	8000e00 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000e1c:	684a      	ldr	r2, [r1, #4]
 8000e1e:	2a12      	cmp	r2, #18
 8000e20:	f63f af49 	bhi.w	8000cb6 <HAL_GPIO_Init+0xa>
 8000e24:	2a12      	cmp	r2, #18
 8000e26:	f63f af66 	bhi.w	8000cf6 <HAL_GPIO_Init+0x4a>
 8000e2a:	a501      	add	r5, pc, #4	; (adr r5, 8000e30 <HAL_GPIO_Init+0x184>)
 8000e2c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000e30:	08000cdf 	.word	0x08000cdf
 8000e34:	08000d77 	.word	0x08000d77
 8000e38:	08000d81 	.word	0x08000d81
 8000e3c:	08000d93 	.word	0x08000d93
 8000e40:	08000cf7 	.word	0x08000cf7
 8000e44:	08000cf7 	.word	0x08000cf7
 8000e48:	08000cf7 	.word	0x08000cf7
 8000e4c:	08000cf7 	.word	0x08000cf7
 8000e50:	08000cf7 	.word	0x08000cf7
 8000e54:	08000cf7 	.word	0x08000cf7
 8000e58:	08000cf7 	.word	0x08000cf7
 8000e5c:	08000cf7 	.word	0x08000cf7
 8000e60:	08000cf7 	.word	0x08000cf7
 8000e64:	08000cf7 	.word	0x08000cf7
 8000e68:	08000cf7 	.word	0x08000cf7
 8000e6c:	08000cf7 	.word	0x08000cf7
 8000e70:	08000cf7 	.word	0x08000cf7
 8000e74:	08000d7b 	.word	0x08000d7b
 8000e78:	08000d87 	.word	0x08000d87
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e795      	b.n	8000dac <HAL_GPIO_Init+0x100>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e793      	b.n	8000dac <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	ea23 030e 	bic.w	r3, r3, lr
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e79c      	b.n	8000dca <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e92:	6853      	ldr	r3, [r2, #4]
 8000e94:	ea23 030e 	bic.w	r3, r3, lr
 8000e98:	6053      	str	r3, [r2, #4]
 8000e9a:	e79f      	b.n	8000ddc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e9e:	6893      	ldr	r3, [r2, #8]
 8000ea0:	ea23 030e 	bic.w	r3, r3, lr
 8000ea4:	6093      	str	r3, [r2, #8]
 8000ea6:	e7a2      	b.n	8000dee <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000eaa:	68d3      	ldr	r3, [r2, #12]
 8000eac:	ea23 030e 	bic.w	r3, r3, lr
 8000eb0:	60d3      	str	r3, [r2, #12]
 8000eb2:	e7a5      	b.n	8000e00 <HAL_GPIO_Init+0x154>
  }
}
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	10220000 	.word	0x10220000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	b10a      	cbz	r2, 8000ed6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed2:	6101      	str	r1, [r0, #16]
 8000ed4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed6:	0409      	lsls	r1, r1, #16
 8000ed8:	6101      	str	r1, [r0, #16]
  }
}
 8000eda:	4770      	bx	lr

08000edc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000edc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ede:	ea01 0203 	and.w	r2, r1, r3
 8000ee2:	ea21 0103 	bic.w	r1, r1, r3
 8000ee6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eea:	6101      	str	r1, [r0, #16]
}
 8000eec:	4770      	bx	lr

08000eee <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000eee:	b340      	cbz	r0, 8000f42 <HAL_IWDG_Init+0x54>
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000ef4:	6803      	ldr	r3, [r0, #0]
 8000ef6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000efa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	f245 5255 	movw	r2, #21845	; 0x5555
 8000f02:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	6842      	ldr	r2, [r0, #4]
 8000f08:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000f0a:	6803      	ldr	r3, [r0, #0]
 8000f0c:	6882      	ldr	r2, [r0, #8]
 8000f0e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000f10:	f7ff f966 	bl	80001e0 <HAL_GetTick>
 8000f14:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	f012 0f03 	tst.w	r2, #3
 8000f1e:	d00b      	beq.n	8000f38 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000f20:	f7ff f95e 	bl	80001e0 <HAL_GetTick>
 8000f24:	1b40      	subs	r0, r0, r5
 8000f26:	2827      	cmp	r0, #39	; 0x27
 8000f28:	d9f5      	bls.n	8000f16 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f013 0f03 	tst.w	r3, #3
 8000f32:	d0f0      	beq.n	8000f16 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8000f34:	2003      	movs	r0, #3
 8000f36:	e003      	b.n	8000f40 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f38:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f3e:	2000      	movs	r0, #0
}
 8000f40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
}
 8000f44:	4770      	bx	lr

08000f46 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f46:	6803      	ldr	r3, [r0, #0]
 8000f48:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000f4e:	2000      	movs	r0, #0
 8000f50:	4770      	bx	lr
	...

08000f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f54:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <RCC_Delay+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <RCC_Delay+0x28>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0a5b      	lsrs	r3, r3, #9
 8000f62:	fb00 f303 	mul.w	r3, r0, r3
 8000f66:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f68:	bf00      	nop
  }
  while (Delay --);
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f9      	bne.n	8000f68 <RCC_Delay+0x14>
}
 8000f74:	b002      	add	sp, #8
 8000f76:	4770      	bx	lr
 8000f78:	2000000c 	.word	0x2000000c
 8000f7c:	10624dd3 	.word	0x10624dd3

08000f80 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000f80:	2800      	cmp	r0, #0
 8000f82:	f000 81f1 	beq.w	8001368 <HAL_RCC_OscConfig+0x3e8>
{
 8000f86:	b570      	push	{r4, r5, r6, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8c:	6803      	ldr	r3, [r0, #0]
 8000f8e:	f013 0f01 	tst.w	r3, #1
 8000f92:	d02c      	beq.n	8000fee <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f94:	4b99      	ldr	r3, [pc, #612]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d01d      	beq.n	8000fdc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa0:	4b96      	ldr	r3, [pc, #600]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d012      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	6863      	ldr	r3, [r4, #4]
 8000fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb2:	d041      	beq.n	8001038 <HAL_RCC_OscConfig+0xb8>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d155      	bne.n	8001064 <HAL_RCC_OscConfig+0xe4>
 8000fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fbc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e037      	b.n	8001042 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd2:	4b8a      	ldr	r3, [pc, #552]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fda:	d0e7      	beq.n	8000fac <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b87      	ldr	r3, [pc, #540]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fe4:	d003      	beq.n	8000fee <HAL_RCC_OscConfig+0x6e>
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 81bf 	beq.w	800136c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	f013 0f02 	tst.w	r3, #2
 8000ff4:	d075      	beq.n	80010e2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff6:	4b81      	ldr	r3, [pc, #516]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f013 0f0c 	tst.w	r3, #12
 8000ffe:	d05f      	beq.n	80010c0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001000:	4b7e      	ldr	r3, [pc, #504]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d054      	beq.n	80010b6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	6923      	ldr	r3, [r4, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 808a 	beq.w	8001128 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b7a      	ldr	r3, [pc, #488]	; (8001200 <HAL_RCC_OscConfig+0x280>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800101a:	f7ff f8e1 	bl	80001e0 <HAL_GetTick>
 800101e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	4b76      	ldr	r3, [pc, #472]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f013 0f02 	tst.w	r3, #2
 8001028:	d175      	bne.n	8001116 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff f8d9 	bl	80001e0 <HAL_GetTick>
 800102e:	1b40      	subs	r0, r0, r5
 8001030:	2802      	cmp	r0, #2
 8001032:	d9f5      	bls.n	8001020 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e19e      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	4a70      	ldr	r2, [pc, #448]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001042:	6863      	ldr	r3, [r4, #4]
 8001044:	b343      	cbz	r3, 8001098 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001046:	f7ff f8cb 	bl	80001e0 <HAL_GetTick>
 800104a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001054:	d1cb      	bne.n	8000fee <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001056:	f7ff f8c3 	bl	80001e0 <HAL_GetTick>
 800105a:	1b40      	subs	r0, r0, r5
 800105c:	2864      	cmp	r0, #100	; 0x64
 800105e:	d9f5      	bls.n	800104c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001060:	2003      	movs	r0, #3
 8001062:	e188      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d009      	beq.n	800107e <HAL_RCC_OscConfig+0xfe>
 800106a:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e7e1      	b.n	8001042 <HAL_RCC_OscConfig+0xc2>
 800107e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001082:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e7d4      	b.n	8001042 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001098:	f7ff f8a2 	bl	80001e0 <HAL_GetTick>
 800109c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010a6:	d0a2      	beq.n	8000fee <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff f89a 	bl	80001e0 <HAL_GetTick>
 80010ac:	1b40      	subs	r0, r0, r5
 80010ae:	2864      	cmp	r0, #100	; 0x64
 80010b0:	d9f5      	bls.n	800109e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80010b2:	2003      	movs	r0, #3
 80010b4:	e15f      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010be:	d1a5      	bne.n	800100c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c0:	4b4e      	ldr	r3, [pc, #312]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f013 0f02 	tst.w	r3, #2
 80010c8:	d003      	beq.n	80010d2 <HAL_RCC_OscConfig+0x152>
 80010ca:	6923      	ldr	r3, [r4, #16]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	f040 814f 	bne.w	8001370 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010da:	6961      	ldr	r1, [r4, #20]
 80010dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010e0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	f013 0f08 	tst.w	r3, #8
 80010e8:	d033      	beq.n	8001152 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ea:	69a3      	ldr	r3, [r4, #24]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d05c      	beq.n	80011aa <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80010f0:	4b43      	ldr	r3, [pc, #268]	; (8001200 <HAL_RCC_OscConfig+0x280>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80010f8:	f7ff f872 	bl	80001e0 <HAL_GetTick>
 80010fc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f013 0f02 	tst.w	r3, #2
 8001106:	d121      	bne.n	800114c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff f86a 	bl	80001e0 <HAL_GetTick>
 800110c:	1b40      	subs	r0, r0, r5
 800110e:	2802      	cmp	r0, #2
 8001110:	d9f5      	bls.n	80010fe <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
 8001114:	e12f      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	4a39      	ldr	r2, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800111e:	6961      	ldr	r1, [r4, #20]
 8001120:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e7dc      	b.n	80010e2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_RCC_OscConfig+0x280>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800112e:	f7ff f857 	bl	80001e0 <HAL_GetTick>
 8001132:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f013 0f02 	tst.w	r3, #2
 800113c:	d0d1      	beq.n	80010e2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff f84f 	bl	80001e0 <HAL_GetTick>
 8001142:	1b40      	subs	r0, r0, r5
 8001144:	2802      	cmp	r0, #2
 8001146:	d9f5      	bls.n	8001134 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
 800114a:	e114      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff01 	bl	8000f54 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	f013 0f04 	tst.w	r3, #4
 8001158:	f000 8096 	beq.w	8001288 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001164:	d134      	bne.n	80011d0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 8001168:	69da      	ldr	r2, [r3, #28]
 800116a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116e:	61da      	str	r2, [r3, #28]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800117a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x284>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001184:	d026      	beq.n	80011d4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001186:	68e3      	ldr	r3, [r4, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d03d      	beq.n	8001208 <HAL_RCC_OscConfig+0x288>
 800118c:	2b00      	cmp	r3, #0
 800118e:	d153      	bne.n	8001238 <HAL_RCC_OscConfig+0x2b8>
 8001190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001194:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	6a1a      	ldr	r2, [r3, #32]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	621a      	str	r2, [r3, #32]
 80011a8:	e033      	b.n	8001212 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_RCC_OscConfig+0x280>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80011b2:	f7ff f815 	bl	80001e0 <HAL_GetTick>
 80011b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_RCC_OscConfig+0x27c>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f013 0f02 	tst.w	r3, #2
 80011c0:	d0c7      	beq.n	8001152 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff f80d 	bl	80001e0 <HAL_GetTick>
 80011c6:	1b40      	subs	r0, r0, r5
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f5      	bls.n	80011b8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
 80011ce:	e0d2      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80011d0:	2500      	movs	r5, #0
 80011d2:	e7d3      	b.n	800117c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x284>)
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011de:	f7fe ffff 	bl	80001e0 <HAL_GetTick>
 80011e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_RCC_OscConfig+0x284>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011ec:	d1cb      	bne.n	8001186 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7fe fff7 	bl	80001e0 <HAL_GetTick>
 80011f2:	1b80      	subs	r0, r0, r6
 80011f4:	2864      	cmp	r0, #100	; 0x64
 80011f6:	d9f5      	bls.n	80011e4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80011f8:	2003      	movs	r0, #3
 80011fa:	e0bc      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000
 8001204:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001208:	4a5f      	ldr	r2, [pc, #380]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800120a:	6a13      	ldr	r3, [r2, #32]
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001212:	68e3      	ldr	r3, [r4, #12]
 8001214:	b333      	cbz	r3, 8001264 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001216:	f7fe ffe3 	bl	80001e0 <HAL_GetTick>
 800121a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f013 0f02 	tst.w	r3, #2
 8001224:	d12f      	bne.n	8001286 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7fe ffdb 	bl	80001e0 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001230:	4298      	cmp	r0, r3
 8001232:	d9f3      	bls.n	800121c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001234:	2003      	movs	r0, #3
 8001236:	e09e      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	2b05      	cmp	r3, #5
 800123a:	d009      	beq.n	8001250 <HAL_RCC_OscConfig+0x2d0>
 800123c:	4b52      	ldr	r3, [pc, #328]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	621a      	str	r2, [r3, #32]
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	e7e0      	b.n	8001212 <HAL_RCC_OscConfig+0x292>
 8001250:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	f042 0204 	orr.w	r2, r2, #4
 8001258:	621a      	str	r2, [r3, #32]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	621a      	str	r2, [r3, #32]
 8001262:	e7d6      	b.n	8001212 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001264:	f7fe ffbc 	bl	80001e0 <HAL_GetTick>
 8001268:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	f013 0f02 	tst.w	r3, #2
 8001272:	d008      	beq.n	8001286 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7fe ffb4 	bl	80001e0 <HAL_GetTick>
 8001278:	1b80      	subs	r0, r0, r6
 800127a:	f241 3388 	movw	r3, #5000	; 0x1388
 800127e:	4298      	cmp	r0, r3
 8001280:	d9f3      	bls.n	800126a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001282:	2003      	movs	r0, #3
 8001284:	e077      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001286:	b9e5      	cbnz	r5, 80012c2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001288:	69e3      	ldr	r3, [r4, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d072      	beq.n	8001374 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128e:	4a3e      	ldr	r2, [pc, #248]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 8001290:	6852      	ldr	r2, [r2, #4]
 8001292:	f002 020c 	and.w	r2, r2, #12
 8001296:	2a08      	cmp	r2, #8
 8001298:	d056      	beq.n	8001348 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	2b02      	cmp	r3, #2
 800129c:	d017      	beq.n	80012ce <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x40c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80012a4:	f7fe ff9c 	bl	80001e0 <HAL_GetTick>
 80012a8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012b2:	d047      	beq.n	8001344 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7fe ff94 	bl	80001e0 <HAL_GetTick>
 80012b8:	1b00      	subs	r0, r0, r4
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f5      	bls.n	80012aa <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80012be:	2003      	movs	r0, #3
 80012c0:	e059      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 80012c4:	69d3      	ldr	r3, [r2, #28]
 80012c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	e7dc      	b.n	8001288 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_RCC_OscConfig+0x40c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80012d4:	f7fe ff84 	bl	80001e0 <HAL_GetTick>
 80012d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012e2:	d006      	beq.n	80012f2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f7fe ff7c 	bl	80001e0 <HAL_GetTick>
 80012e8:	1b40      	subs	r0, r0, r5
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f5      	bls.n	80012da <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80012ee:	2003      	movs	r0, #3
 80012f0:	e041      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f2:	6a23      	ldr	r3, [r4, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d01a      	beq.n	8001330 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	4923      	ldr	r1, [pc, #140]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001302:	6a22      	ldr	r2, [r4, #32]
 8001304:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001306:	4302      	orrs	r2, r0
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_RCC_OscConfig+0x40c>)
 800130e:	2201      	movs	r2, #1
 8001310:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001312:	f7fe ff65 	bl	80001e0 <HAL_GetTick>
 8001316:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001320:	d10e      	bne.n	8001340 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7fe ff5d 	bl	80001e0 <HAL_GetTick>
 8001326:	1b00      	subs	r0, r0, r4
 8001328:	2802      	cmp	r0, #2
 800132a:	d9f5      	bls.n	8001318 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800132c:	2003      	movs	r0, #3
 800132e:	e022      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 8001332:	6853      	ldr	r3, [r2, #4]
 8001334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001338:	68a1      	ldr	r1, [r4, #8]
 800133a:	430b      	orrs	r3, r1
 800133c:	6053      	str	r3, [r2, #4]
 800133e:	e7dc      	b.n	80012fa <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
 8001344:	2000      	movs	r0, #0
 8001346:	e016      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	2b01      	cmp	r3, #1
 800134a:	d016      	beq.n	800137a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_RCC_OscConfig+0x408>)
 800134e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001350:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001354:	6a22      	ldr	r2, [r4, #32]
 8001356:	4291      	cmp	r1, r2
 8001358:	d111      	bne.n	800137e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800135a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800135e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001360:	4293      	cmp	r3, r2
 8001362:	d10e      	bne.n	8001382 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001364:	2000      	movs	r0, #0
 8001366:	e006      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001368:	2001      	movs	r0, #1
}
 800136a:	4770      	bx	lr
        return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e002      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001374:	2000      	movs	r0, #0
}
 8001376:	b002      	add	sp, #8
 8001378:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7fb      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e7f9      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
 8001382:	2001      	movs	r0, #1
 8001384:	e7f7      	b.n	8001376 <HAL_RCC_OscConfig+0x3f6>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	42420000 	.word	0x42420000

08001390 <HAL_RCC_GetSysClockFreq>:
{
 8001390:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001396:	f10d 0c18 	add.w	ip, sp, #24
 800139a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800139e:	f240 2301 	movw	r3, #513	; 0x201
 80013a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80013a8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	2a08      	cmp	r2, #8
 80013b0:	d002      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80013b2:	4811      	ldr	r0, [pc, #68]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80013b4:	b006      	add	sp, #24
 80013b6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013bc:	3218      	adds	r2, #24
 80013be:	446a      	add	r2, sp
 80013c0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013c8:	d00d      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80013d2:	3318      	adds	r3, #24
 80013d4:	446b      	add	r3, sp
 80013d6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80013dc:	fb02 f000 	mul.w	r0, r2, r0
 80013e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e4:	e7e6      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetSysClockFreq+0x6c>)
 80013e8:	fb03 f000 	mul.w	r0, r3, r0
 80013ec:	e7e2      	b.n	80013b4 <HAL_RCC_GetSysClockFreq+0x24>
 80013ee:	bf00      	nop
 80013f0:	08003ac4 	.word	0x08003ac4
 80013f4:	40021000 	.word	0x40021000
 80013f8:	007a1200 	.word	0x007a1200
 80013fc:	003d0900 	.word	0x003d0900

08001400 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001400:	2800      	cmp	r0, #0
 8001402:	f000 80a0 	beq.w	8001546 <HAL_RCC_ClockConfig+0x146>
{
 8001406:	b570      	push	{r4, r5, r6, lr}
 8001408:	460d      	mov	r5, r1
 800140a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_RCC_ClockConfig+0x158>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	428b      	cmp	r3, r1
 8001416:	d20b      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_RCC_ClockConfig+0x158>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f023 0307 	bic.w	r3, r3, #7
 8001420:	430b      	orrs	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001424:	6813      	ldr	r3, [r2, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	428b      	cmp	r3, r1
 800142c:	f040 808d 	bne.w	800154a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	f013 0f02 	tst.w	r3, #2
 8001436:	d017      	beq.n	8001468 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	f013 0f04 	tst.w	r3, #4
 800143c:	d004      	beq.n	8001448 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143e:	4a47      	ldr	r2, [pc, #284]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001440:	6853      	ldr	r3, [r2, #4]
 8001442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001446:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	f013 0f08 	tst.w	r3, #8
 800144e:	d004      	beq.n	800145a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4a42      	ldr	r2, [pc, #264]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001452:	6853      	ldr	r3, [r2, #4]
 8001454:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001458:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145a:	4a40      	ldr	r2, [pc, #256]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 800145c:	6853      	ldr	r3, [r2, #4]
 800145e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001462:	68a1      	ldr	r1, [r4, #8]
 8001464:	430b      	orrs	r3, r1
 8001466:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	f013 0f01 	tst.w	r3, #1
 800146e:	d031      	beq.n	80014d4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001470:	6863      	ldr	r3, [r4, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d020      	beq.n	80014b8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	2b02      	cmp	r3, #2
 8001478:	d025      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	f012 0f02 	tst.w	r2, #2
 8001482:	d064      	beq.n	800154e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001486:	684a      	ldr	r2, [r1, #4]
 8001488:	f022 0203 	bic.w	r2, r2, #3
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001490:	f7fe fea6 	bl	80001e0 <HAL_GetTick>
 8001494:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	6862      	ldr	r2, [r4, #4]
 80014a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014a4:	d016      	beq.n	80014d4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a6:	f7fe fe9b 	bl	80001e0 <HAL_GetTick>
 80014aa:	1b80      	subs	r0, r0, r6
 80014ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b0:	4298      	cmp	r0, r3
 80014b2:	d9f0      	bls.n	8001496 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
 80014b6:	e045      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80014c0:	d1e0      	bne.n	8001484 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e03e      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014ce:	d1d9      	bne.n	8001484 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e037      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_ClockConfig+0x158>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	42ab      	cmp	r3, r5
 80014de:	d90a      	bls.n	80014f6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_RCC_ClockConfig+0x158>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f023 0307 	bic.w	r3, r3, #7
 80014e8:	432b      	orrs	r3, r5
 80014ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	42ab      	cmp	r3, r5
 80014f4:	d12d      	bne.n	8001552 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	f013 0f04 	tst.w	r3, #4
 80014fc:	d006      	beq.n	800150c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001500:	6853      	ldr	r3, [r2, #4]
 8001502:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001506:	68e1      	ldr	r1, [r4, #12]
 8001508:	430b      	orrs	r3, r1
 800150a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	f013 0f08 	tst.w	r3, #8
 8001512:	d007      	beq.n	8001524 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 8001516:	6853      	ldr	r3, [r2, #4]
 8001518:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800151c:	6921      	ldr	r1, [r4, #16]
 800151e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001522:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001524:	f7ff ff34 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_ClockConfig+0x15c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x160>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	40d8      	lsrs	r0, r3
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_RCC_ClockConfig+0x164>)
 8001538:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_RCC_ClockConfig+0x168>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f7fe fe0d 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8001542:	2000      	movs	r0, #0
}
 8001544:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001546:	2001      	movs	r0, #1
}
 8001548:	4770      	bx	lr
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	e7fa      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	e7f8      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001552:	2001      	movs	r0, #1
 8001554:	e7f6      	b.n	8001544 <HAL_RCC_ClockConfig+0x144>
 8001556:	bf00      	nop
 8001558:	40022000 	.word	0x40022000
 800155c:	40021000 	.word	0x40021000
 8001560:	08003a9c 	.word	0x08003a9c
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetHCLKFreq>:
}
 800156c:	4b01      	ldr	r3, [pc, #4]	; (8001574 <HAL_RCC_GetHCLKFreq+0x8>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c

08001578 <HAL_RCC_GetPCLK1Freq>:
{
 8001578:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800157a:	f7ff fff7 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
}
 800158a:	40d8      	lsrs	r0, r3
 800158c:	bd08      	pop	{r3, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	08003aac 	.word	0x08003aac

08001598 <HAL_RCC_GetPCLK2Freq>:
{
 8001598:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159a:	f7ff ffe7 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80015aa:	40d8      	lsrs	r0, r3
 80015ac:	bd08      	pop	{r3, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	08003aac 	.word	0x08003aac

080015b8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d056      	beq.n	800166a <HAL_SPI_Init+0xb2>
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	4604      	mov	r4, r0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015c2:	b933      	cbnz	r3, 80015d2 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015c4:	6843      	ldr	r3, [r0, #4]
 80015c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ca:	d005      	beq.n	80015d8 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61c3      	str	r3, [r0, #28]
 80015d0:	e002      	b.n	80015d8 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015d6:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03c      	beq.n	800165e <HAL_SPI_Init+0xa6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f2:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80015fa:	68a2      	ldr	r2, [r4, #8]
 80015fc:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001600:	4313      	orrs	r3, r2
 8001602:	68e2      	ldr	r2, [r4, #12]
 8001604:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001608:	4313      	orrs	r3, r2
 800160a:	6922      	ldr	r2, [r4, #16]
 800160c:	f002 0202 	and.w	r2, r2, #2
 8001610:	4313      	orrs	r3, r2
 8001612:	6962      	ldr	r2, [r4, #20]
 8001614:	f002 0201 	and.w	r2, r2, #1
 8001618:	4313      	orrs	r3, r2
 800161a:	69a2      	ldr	r2, [r4, #24]
 800161c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001620:	4313      	orrs	r3, r2
 8001622:	69e2      	ldr	r2, [r4, #28]
 8001624:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001628:	4313      	orrs	r3, r2
 800162a:	6a22      	ldr	r2, [r4, #32]
 800162c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001630:	4313      	orrs	r3, r2
 8001632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001634:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800163e:	8b63      	ldrh	r3, [r4, #26]
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	69d3      	ldr	r3, [r2, #28]
 800164c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001650:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001652:	2000      	movs	r0, #0
 8001654:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001656:	2301      	movs	r3, #1
 8001658:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800165c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800165e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001662:	4620      	mov	r0, r4
 8001664:	f000 ffe6 	bl	8002634 <HAL_SPI_MspInit>
 8001668:	e7bc      	b.n	80015e4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
}
 800166c:	4770      	bx	lr

0800166e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800166e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001670:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001672:	6a04      	ldr	r4, [r0, #32]
 8001674:	f024 0401 	bic.w	r4, r4, #1
 8001678:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800167a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800167c:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001680:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001684:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001688:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800168a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800168c:	6203      	str	r3, [r0, #32]
}
 800168e:	bc10      	pop	{r4}
 8001690:	4770      	bx	lr

08001692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001692:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001694:	6a04      	ldr	r4, [r0, #32]
 8001696:	f024 0410 	bic.w	r4, r4, #16
 800169a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800169c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800169e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016a0:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016a4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80016b2:	6203      	str	r3, [r0, #32]
}
 80016b4:	bc10      	pop	{r4}
 80016b6:	4770      	bx	lr

080016b8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80016b8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80016ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016be:	430b      	orrs	r3, r1
 80016c0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016c4:	6083      	str	r3, [r0, #8]
}
 80016c6:	4770      	bx	lr

080016c8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80016c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <TIM_Base_SetConfig+0x70>)
 80016cc:	4290      	cmp	r0, r2
 80016ce:	d00a      	beq.n	80016e6 <TIM_Base_SetConfig+0x1e>
 80016d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016d4:	d007      	beq.n	80016e6 <TIM_Base_SetConfig+0x1e>
 80016d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016da:	4290      	cmp	r0, r2
 80016dc:	d003      	beq.n	80016e6 <TIM_Base_SetConfig+0x1e>
 80016de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d103      	bne.n	80016ee <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016ea:	684a      	ldr	r2, [r1, #4]
 80016ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <TIM_Base_SetConfig+0x70>)
 80016f0:	4290      	cmp	r0, r2
 80016f2:	d00a      	beq.n	800170a <TIM_Base_SetConfig+0x42>
 80016f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f8:	d007      	beq.n	800170a <TIM_Base_SetConfig+0x42>
 80016fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016fe:	4290      	cmp	r0, r2
 8001700:	d003      	beq.n	800170a <TIM_Base_SetConfig+0x42>
 8001702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001706:	4290      	cmp	r0, r2
 8001708:	d103      	bne.n	8001712 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800170a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800170e:	68ca      	ldr	r2, [r1, #12]
 8001710:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001716:	694a      	ldr	r2, [r1, #20]
 8001718:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800171a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171c:	688b      	ldr	r3, [r1, #8]
 800171e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001720:	680b      	ldr	r3, [r1, #0]
 8001722:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <TIM_Base_SetConfig+0x70>)
 8001726:	4298      	cmp	r0, r3
 8001728:	d002      	beq.n	8001730 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800172a:	2301      	movs	r3, #1
 800172c:	6143      	str	r3, [r0, #20]
}
 800172e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001730:	690b      	ldr	r3, [r1, #16]
 8001732:	6303      	str	r3, [r0, #48]	; 0x30
 8001734:	e7f9      	b.n	800172a <TIM_Base_SetConfig+0x62>
 8001736:	bf00      	nop
 8001738:	40012c00 	.word	0x40012c00

0800173c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800173c:	b340      	cbz	r0, 8001790 <HAL_TIM_Base_Init+0x54>
{
 800173e:	b510      	push	{r4, lr}
 8001740:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001742:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001746:	b1f3      	cbz	r3, 8001786 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	2302      	movs	r3, #2
 800174a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174e:	4621      	mov	r1, r4
 8001750:	f851 0b04 	ldr.w	r0, [r1], #4
 8001754:	f7ff ffb8 	bl	80016c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001758:	2301      	movs	r3, #1
 800175a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800175e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001762:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001766:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800176a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001776:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800177a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800177e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
}
 8001784:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001786:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800178a:	f001 fa37 	bl	8002bfc <HAL_TIM_Base_MspInit>
 800178e:	e7db      	b.n	8001748 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
}
 8001792:	4770      	bx	lr

08001794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001794:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001796:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001798:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800179c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80017a0:	430a      	orrs	r2, r1
 80017a2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017a6:	6082      	str	r2, [r0, #8]
}
 80017a8:	bc10      	pop	{r4}
 80017aa:	4770      	bx	lr

080017ac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80017ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d066      	beq.n	8001882 <HAL_TIM_ConfigClockSource+0xd6>
{
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80017b8:	2301      	movs	r3, #1
 80017ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80017c4:	6802      	ldr	r2, [r0, #0]
 80017c6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80017d0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80017d2:	680b      	ldr	r3, [r1, #0]
 80017d4:	2b60      	cmp	r3, #96	; 0x60
 80017d6:	d040      	beq.n	800185a <HAL_TIM_ConfigClockSource+0xae>
 80017d8:	d822      	bhi.n	8001820 <HAL_TIM_ConfigClockSource+0x74>
 80017da:	2b40      	cmp	r3, #64	; 0x40
 80017dc:	d047      	beq.n	800186e <HAL_TIM_ConfigClockSource+0xc2>
 80017de:	d90b      	bls.n	80017f8 <HAL_TIM_ConfigClockSource+0x4c>
 80017e0:	2b50      	cmp	r3, #80	; 0x50
 80017e2:	d10e      	bne.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017e4:	68ca      	ldr	r2, [r1, #12]
 80017e6:	6849      	ldr	r1, [r1, #4]
 80017e8:	6800      	ldr	r0, [r0, #0]
 80017ea:	f7ff ff40 	bl	800166e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017ee:	2150      	movs	r1, #80	; 0x50
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	f7ff ff61 	bl	80016b8 <TIM_ITRx_SetConfig>
      break;
 80017f6:	e004      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d00c      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0x6a>
 80017fc:	d908      	bls.n	8001810 <HAL_TIM_ConfigClockSource+0x64>
 80017fe:	2b30      	cmp	r3, #48	; 0x30
 8001800:	d009      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001802:	2301      	movs	r3, #1
 8001804:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001808:	2000      	movs	r0, #0
 800180a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800180e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001810:	b10b      	cbz	r3, 8001816 <HAL_TIM_ConfigClockSource+0x6a>
 8001812:	2b10      	cmp	r3, #16
 8001814:	d1f5      	bne.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001816:	4619      	mov	r1, r3
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f7ff ff4d 	bl	80016b8 <TIM_ITRx_SetConfig>
        break;
 800181e:	e7f0      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001820:	2b70      	cmp	r3, #112	; 0x70
 8001822:	d00e      	beq.n	8001842 <HAL_TIM_ConfigClockSource+0x96>
 8001824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001828:	d1eb      	bne.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800182a:	68cb      	ldr	r3, [r1, #12]
 800182c:	684a      	ldr	r2, [r1, #4]
 800182e:	6889      	ldr	r1, [r1, #8]
 8001830:	6800      	ldr	r0, [r0, #0]
 8001832:	f7ff ffaf 	bl	8001794 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6893      	ldr	r3, [r2, #8]
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	6093      	str	r3, [r2, #8]
      break;
 8001840:	e7df      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001842:	68cb      	ldr	r3, [r1, #12]
 8001844:	684a      	ldr	r2, [r1, #4]
 8001846:	6889      	ldr	r1, [r1, #8]
 8001848:	6800      	ldr	r0, [r0, #0]
 800184a:	f7ff ffa3 	bl	8001794 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001852:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001856:	6093      	str	r3, [r2, #8]
      break;
 8001858:	e7d3      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800185a:	68ca      	ldr	r2, [r1, #12]
 800185c:	6849      	ldr	r1, [r1, #4]
 800185e:	6800      	ldr	r0, [r0, #0]
 8001860:	f7ff ff17 	bl	8001692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001864:	2160      	movs	r1, #96	; 0x60
 8001866:	6820      	ldr	r0, [r4, #0]
 8001868:	f7ff ff26 	bl	80016b8 <TIM_ITRx_SetConfig>
      break;
 800186c:	e7c9      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800186e:	68ca      	ldr	r2, [r1, #12]
 8001870:	6849      	ldr	r1, [r1, #4]
 8001872:	6800      	ldr	r0, [r0, #0]
 8001874:	f7ff fefb 	bl	800166e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001878:	2140      	movs	r1, #64	; 0x40
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f7ff ff1c 	bl	80016b8 <TIM_ITRx_SetConfig>
      break;
 8001880:	e7bf      	b.n	8001802 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8001882:	2002      	movs	r0, #2
}
 8001884:	4770      	bx	lr
	...

08001888 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001888:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d02c      	beq.n	80018ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8001890:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8001892:	2301      	movs	r3, #1
 8001894:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001898:	2302      	movs	r3, #2
 800189a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800189e:	6803      	ldr	r3, [r0, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018a2:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018a4:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018a8:	680a      	ldr	r2, [r1, #0]
 80018aa:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b0:	6803      	ldr	r3, [r0, #0]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00a      	beq.n	80018ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018bc:	d007      	beq.n	80018ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d104      	bne.n	80018d8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80018ce:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018d2:	684a      	ldr	r2, [r1, #4]
 80018d4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018d6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018d8:	2301      	movs	r3, #1
 80018da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018de:	2300      	movs	r3, #0
 80018e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80018e4:	4618      	mov	r0, r3
}
 80018e6:	bc10      	pop	{r4}
 80018e8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018ea:	2002      	movs	r0, #2
}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80018f4:	6802      	ldr	r2, [r0, #0]
 80018f6:	68d3      	ldr	r3, [r2, #12]
 80018f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018fc:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018fe:	2320      	movs	r3, #32
 8001900:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001904:	4770      	bx	lr

08001906 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001906:	6802      	ldr	r2, [r0, #0]
 8001908:	68d3      	ldr	r3, [r2, #12]
 800190a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800190e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	6953      	ldr	r3, [r2, #20]
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800191a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800191c:	2b01      	cmp	r3, #1
 800191e:	d005      	beq.n	800192c <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001920:	2320      	movs	r3, #32
 8001922:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001926:	2300      	movs	r3, #0
 8001928:	6303      	str	r3, [r0, #48]	; 0x30
}
 800192a:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800192c:	6802      	ldr	r2, [r0, #0]
 800192e:	68d3      	ldr	r3, [r2, #12]
 8001930:	f023 0310 	bic.w	r3, r3, #16
 8001934:	60d3      	str	r3, [r2, #12]
 8001936:	e7f3      	b.n	8001920 <UART_EndRxTransfer+0x1a>

08001938 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001938:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b21      	cmp	r3, #33	; 0x21
 8001940:	d001      	beq.n	8001946 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001942:	2002      	movs	r0, #2
  }
}
 8001944:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001946:	6883      	ldr	r3, [r0, #8]
 8001948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194c:	d017      	beq.n	800197e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800194e:	6a03      	ldr	r3, [r0, #32]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	6202      	str	r2, [r0, #32]
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	6803      	ldr	r3, [r0, #0]
 8001958:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800195a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800195c:	b29b      	uxth	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001964:	b94b      	cbnz	r3, 800197a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001966:	6802      	ldr	r2, [r0, #0]
 8001968:	68d3      	ldr	r3, [r2, #12]
 800196a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800196e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001970:	6802      	ldr	r2, [r0, #0]
 8001972:	68d3      	ldr	r3, [r2, #12]
 8001974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001978:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800197a:	2000      	movs	r0, #0
 800197c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197e:	6903      	ldr	r3, [r0, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e4      	bne.n	800194e <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001984:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	6802      	ldr	r2, [r0, #0]
 800198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001990:	6a03      	ldr	r3, [r0, #32]
 8001992:	3302      	adds	r3, #2
 8001994:	6203      	str	r3, [r0, #32]
 8001996:	e7e0      	b.n	800195a <UART_Transmit_IT+0x22>

08001998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001998:	b510      	push	{r4, lr}
 800199a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800199c:	6802      	ldr	r2, [r0, #0]
 800199e:	6913      	ldr	r3, [r2, #16]
 80019a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a4:	68c1      	ldr	r1, [r0, #12]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019aa:	6883      	ldr	r3, [r0, #8]
 80019ac:	6902      	ldr	r2, [r0, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	6942      	ldr	r2, [r0, #20]
 80019b2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80019b4:	6801      	ldr	r1, [r0, #0]
 80019b6:	68cb      	ldr	r3, [r1, #12]
 80019b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019bc:	f023 030c 	bic.w	r3, r3, #12
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c4:	6802      	ldr	r2, [r0, #0]
 80019c6:	6953      	ldr	r3, [r2, #20]
 80019c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019cc:	6981      	ldr	r1, [r0, #24]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80019d2:	6802      	ldr	r2, [r0, #0]
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <UART_SetConfig+0x8c>)
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d020      	beq.n	8001a1c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019da:	f7ff fdcd 	bl	8001578 <HAL_RCC_GetPCLK1Freq>
 80019de:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <UART_SetConfig+0x90>)
 80019f2:	fba0 3102 	umull	r3, r1, r0, r2
 80019f6:	0949      	lsrs	r1, r1, #5
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	fb03 2311 	mls	r3, r3, r1, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	3332      	adds	r3, #50	; 0x32
 8001a02:	fba0 2303 	umull	r2, r3, r0, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a0c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	6821      	ldr	r1, [r4, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a1a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a1c:	f7ff fdbc 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	e7dd      	b.n	80019e0 <UART_SetConfig+0x48>
 8001a24:	40013800 	.word	0x40013800
 8001a28:	51eb851f 	.word	0x51eb851f

08001a2c <UART_WaitOnFlagUntilTimeout>:
{
 8001a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a30:	4605      	mov	r5, r0
 8001a32:	460f      	mov	r7, r1
 8001a34:	4616      	mov	r6, r2
 8001a36:	4699      	mov	r9, r3
 8001a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a3c:	682c      	ldr	r4, [r5, #0]
 8001a3e:	6824      	ldr	r4, [r4, #0]
 8001a40:	ea37 0304 	bics.w	r3, r7, r4
 8001a44:	bf0c      	ite	eq
 8001a46:	f04f 0c01 	moveq.w	ip, #1
 8001a4a:	f04f 0c00 	movne.w	ip, #0
 8001a4e:	45b4      	cmp	ip, r6
 8001a50:	d11f      	bne.n	8001a92 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8001a52:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a56:	d0f1      	beq.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a58:	f1b8 0f00 	cmp.w	r8, #0
 8001a5c:	d005      	beq.n	8001a6a <UART_WaitOnFlagUntilTimeout+0x3e>
 8001a5e:	f7fe fbbf 	bl	80001e0 <HAL_GetTick>
 8001a62:	eba0 0009 	sub.w	r0, r0, r9
 8001a66:	4540      	cmp	r0, r8
 8001a68:	d9e8      	bls.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a6a:	682a      	ldr	r2, [r5, #0]
 8001a6c:	68d3      	ldr	r3, [r2, #12]
 8001a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a72:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a74:	682a      	ldr	r2, [r5, #0]
 8001a76:	6953      	ldr	r3, [r2, #20]
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a84:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
 8001a90:	e000      	b.n	8001a94 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8001a92:	2000      	movs	r0, #0
}
 8001a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a98 <HAL_UART_Init>:
  if (huart == NULL)
 8001a98:	b358      	cbz	r0, 8001af2 <HAL_UART_Init+0x5a>
{
 8001a9a:	b510      	push	{r4, lr}
 8001a9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aa2:	b30b      	cbz	r3, 8001ae8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001aa4:	2324      	movs	r3, #36	; 0x24
 8001aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	68d3      	ldr	r3, [r2, #12]
 8001aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ab2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff ff6f 	bl	8001998 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	6913      	ldr	r3, [r2, #16]
 8001abe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ac2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac4:	6822      	ldr	r2, [r4, #0]
 8001ac6:	6953      	ldr	r3, [r2, #20]
 8001ac8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001acc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	68d3      	ldr	r3, [r2, #12]
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001adc:	2320      	movs	r3, #32
 8001ade:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ae2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001ae6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ae8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001aec:	f001 f8d2 	bl	8002c94 <HAL_UART_MspInit>
 8001af0:	e7d8      	b.n	8001aa4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001af2:	2001      	movs	r0, #1
}
 8001af4:	4770      	bx	lr

08001af6 <HAL_UART_Transmit>:
{
 8001af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001afe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d154      	bne.n	8001bb2 <HAL_UART_Transmit+0xbc>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	d053      	beq.n	8001bba <HAL_UART_Transmit+0xc4>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d053      	beq.n	8001bbe <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001b16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d051      	beq.n	8001bc2 <HAL_UART_Transmit+0xcc>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b28:	2321      	movs	r3, #33	; 0x21
 8001b2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001b2e:	f7fe fb57 	bl	80001e0 <HAL_GetTick>
 8001b32:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001b34:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b38:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b3c:	68a3      	ldr	r3, [r4, #8]
 8001b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b42:	d005      	beq.n	8001b50 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8001b44:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001b4e:	e012      	b.n	8001b76 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b50:	6923      	ldr	r3, [r4, #16]
 8001b52:	b113      	cbz	r3, 8001b5a <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001b54:	f04f 0800 	mov.w	r8, #0
 8001b58:	e7f6      	b.n	8001b48 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8001b5a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	e7f3      	b.n	8001b48 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b60:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001b6c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	3a01      	subs	r2, #1
 8001b72:	b292      	uxth	r2, r2
 8001b74:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b173      	cbz	r3, 8001b9a <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b7c:	9600      	str	r6, [sp, #0]
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff51 	bl	8001a2c <UART_WaitOnFlagUntilTimeout>
 8001b8a:	b9e0      	cbnz	r0, 8001bc6 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d0e7      	beq.n	8001b60 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b90:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b98:	e7e8      	b.n	8001b6c <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b9a:	9600      	str	r6, [sp, #0]
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff ff42 	bl	8001a2c <UART_WaitOnFlagUntilTimeout>
 8001ba8:	b978      	cbnz	r0, 8001bca <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8001baa:	2320      	movs	r3, #32
 8001bac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001bb0:	e000      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001bb2:	2002      	movs	r0, #2
}
 8001bb4:	b002      	add	sp, #8
 8001bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	e7fa      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e7f8      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	e7f6      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e7f4      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
 8001bcc:	e7f2      	b.n	8001bb4 <HAL_UART_Transmit+0xbe>

08001bce <HAL_UART_TxCpltCallback>:
}
 8001bce:	4770      	bx	lr

08001bd0 <UART_EndTransmit_IT>:
{
 8001bd0:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001bd2:	6801      	ldr	r1, [r0, #0]
 8001bd4:	68ca      	ldr	r2, [r1, #12]
 8001bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bda:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8001be2:	f7ff fff4 	bl	8001bce <HAL_UART_TxCpltCallback>
}
 8001be6:	2000      	movs	r0, #0
 8001be8:	bd08      	pop	{r3, pc}

08001bea <HAL_UART_RxCpltCallback>:
}
 8001bea:	4770      	bx	lr

08001bec <HAL_UART_RxHalfCpltCallback>:
}
 8001bec:	4770      	bx	lr

08001bee <HAL_UART_ErrorCallback>:
}
 8001bee:	4770      	bx	lr

08001bf0 <UART_DMAError>:
{
 8001bf0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001bf8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b21      	cmp	r3, #33	; 0x21
 8001c00:	d010      	beq.n	8001c24 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c0a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b22      	cmp	r3, #34	; 0x22
 8001c12:	d011      	beq.n	8001c38 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ffe6 	bl	8001bee <HAL_UART_ErrorCallback>
}
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d0ea      	beq.n	8001c02 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fe5f 	bl	80018f4 <UART_EndTxTransfer>
 8001c36:	e7e4      	b.n	8001c02 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d0eb      	beq.n	8001c14 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff fe60 	bl	8001906 <UART_EndRxTransfer>
 8001c46:	e7e5      	b.n	8001c14 <UART_DMAError+0x24>

08001c48 <UART_DMAAbortOnError>:
{
 8001c48:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c50:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001c52:	f7ff ffcc 	bl	8001bee <HAL_UART_ErrorCallback>
}
 8001c56:	bd08      	pop	{r3, pc}

08001c58 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c58:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b22      	cmp	r3, #34	; 0x22
 8001c60:	d160      	bne.n	8001d24 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c62:	6883      	ldr	r3, [r0, #8]
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c68:	d046      	beq.n	8001cf8 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001c6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c70:	d004      	beq.n	8001c7c <UART_Receive_IT+0x24>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d14d      	bne.n	8001d12 <UART_Receive_IT+0xba>
 8001c76:	6903      	ldr	r3, [r0, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d14a      	bne.n	8001d12 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c7c:	6803      	ldr	r3, [r0, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001c82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c84:	3301      	adds	r3, #1
 8001c86:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001c88:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d148      	bne.n	8001d28 <UART_Receive_IT+0xd0>
{
 8001c96:	b500      	push	{lr}
 8001c98:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c9a:	6802      	ldr	r2, [r0, #0]
 8001c9c:	68d3      	ldr	r3, [r2, #12]
 8001c9e:	f023 0320 	bic.w	r3, r3, #32
 8001ca2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ca4:	6802      	ldr	r2, [r0, #0]
 8001ca6:	68d3      	ldr	r3, [r2, #12]
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001cae:	6802      	ldr	r2, [r0, #0]
 8001cb0:	6953      	ldr	r3, [r2, #20]
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d12c      	bne.n	8001d1e <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cc8:	6802      	ldr	r2, [r0, #0]
 8001cca:	68d3      	ldr	r3, [r2, #12]
 8001ccc:	f023 0310 	bic.w	r3, r3, #16
 8001cd0:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001cd2:	6803      	ldr	r3, [r0, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f012 0f10 	tst.w	r2, #16
 8001cda:	d006      	beq.n	8001cea <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	9201      	str	r2, [sp, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001cea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001cec:	f000 f9c8 	bl	8002080 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001cf0:	2000      	movs	r0, #0
}
 8001cf2:	b003      	add	sp, #12
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	6902      	ldr	r2, [r0, #16]
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	d1b5      	bne.n	8001c6a <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001cfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d08:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001d0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	6283      	str	r3, [r0, #40]	; 0x28
 8001d10:	e7ba      	b.n	8001c88 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d1a:	7013      	strb	r3, [r2, #0]
 8001d1c:	e7b1      	b.n	8001c82 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8001d1e:	f7ff ff64 	bl	8001bea <HAL_UART_RxCpltCallback>
 8001d22:	e7e5      	b.n	8001cf0 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8001d24:	2002      	movs	r0, #2
 8001d26:	4770      	bx	lr
    return HAL_OK;
 8001d28:	2000      	movs	r0, #0
}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_UART_IRQHandler>:
{
 8001d2c:	b530      	push	{r4, r5, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d32:	6802      	ldr	r2, [r0, #0]
 8001d34:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d36:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d38:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001d3a:	f013 050f 	ands.w	r5, r3, #15
 8001d3e:	d105      	bne.n	8001d4c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d40:	f013 0f20 	tst.w	r3, #32
 8001d44:	d002      	beq.n	8001d4c <HAL_UART_IRQHandler+0x20>
 8001d46:	f010 0f20 	tst.w	r0, #32
 8001d4a:	d119      	bne.n	8001d80 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d4c:	b12d      	cbz	r5, 8001d5a <HAL_UART_IRQHandler+0x2e>
 8001d4e:	f011 0101 	ands.w	r1, r1, #1
 8001d52:	d119      	bne.n	8001d88 <HAL_UART_IRQHandler+0x5c>
 8001d54:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001d58:	d116      	bne.n	8001d88 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d5c:	2901      	cmp	r1, #1
 8001d5e:	d075      	beq.n	8001e4c <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d64:	d003      	beq.n	8001d6e <HAL_UART_IRQHandler+0x42>
 8001d66:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d6a:	f040 80d7 	bne.w	8001f1c <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d72:	d003      	beq.n	8001d7c <HAL_UART_IRQHandler+0x50>
 8001d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d78:	f040 80d4 	bne.w	8001f24 <HAL_UART_IRQHandler+0x1f8>
}
 8001d7c:	b003      	add	sp, #12
 8001d7e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ff69 	bl	8001c58 <UART_Receive_IT>
      return;
 8001d86:	e7f9      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d88:	f013 0f01 	tst.w	r3, #1
 8001d8c:	d006      	beq.n	8001d9c <HAL_UART_IRQHandler+0x70>
 8001d8e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001d92:	d003      	beq.n	8001d9c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d9c:	f013 0f04 	tst.w	r3, #4
 8001da0:	d004      	beq.n	8001dac <HAL_UART_IRQHandler+0x80>
 8001da2:	b119      	cbz	r1, 8001dac <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001da4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001da6:	f042 0202 	orr.w	r2, r2, #2
 8001daa:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dac:	f013 0f02 	tst.w	r3, #2
 8001db0:	d004      	beq.n	8001dbc <HAL_UART_IRQHandler+0x90>
 8001db2:	b119      	cbz	r1, 8001dbc <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001db4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001db6:	f042 0204 	orr.w	r2, r2, #4
 8001dba:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dbc:	f013 0f08 	tst.w	r3, #8
 8001dc0:	d007      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xa6>
 8001dc2:	f010 0f20 	tst.w	r0, #32
 8001dc6:	d100      	bne.n	8001dca <HAL_UART_IRQHandler+0x9e>
 8001dc8:	b119      	cbz	r1, 8001dd2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001dcc:	f042 0208 	orr.w	r2, r2, #8
 8001dd0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d0d1      	beq.n	8001d7c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dd8:	f013 0f20 	tst.w	r3, #32
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_IRQHandler+0xb8>
 8001dde:	f010 0f20 	tst.w	r0, #32
 8001de2:	d121      	bne.n	8001e28 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001dee:	f012 0f08 	tst.w	r2, #8
 8001df2:	d100      	bne.n	8001df6 <HAL_UART_IRQHandler+0xca>
 8001df4:	b323      	cbz	r3, 8001e40 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff fd85 	bl	8001906 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e04:	d018      	beq.n	8001e38 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e0c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e10:	b173      	cbz	r3, 8001e30 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_UART_IRQHandler+0x200>)
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e18:	f7fe fe5a 	bl	8000ad0 <HAL_DMA_Abort_IT>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d0ad      	beq.n	8001d7c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e24:	4798      	blx	r3
 8001e26:	e7a9      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff ff15 	bl	8001c58 <UART_Receive_IT>
 8001e2e:	e7d9      	b.n	8001de4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff fedc 	bl	8001bee <HAL_UART_ErrorCallback>
 8001e36:	e7a1      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff fed8 	bl	8001bee <HAL_UART_ErrorCallback>
 8001e3e:	e79d      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff fed4 	bl	8001bee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8001e4a:	e797      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001e4c:	f013 0f10 	tst.w	r3, #16
 8001e50:	d086      	beq.n	8001d60 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e52:	f010 0f10 	tst.w	r0, #16
 8001e56:	d083      	beq.n	8001d60 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	6853      	ldr	r3, [r2, #4]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e66:	6953      	ldr	r3, [r2, #20]
 8001e68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e6c:	d032      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e70:	680b      	ldr	r3, [r1, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d080      	beq.n	8001d7c <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e7a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001e7c:	4298      	cmp	r0, r3
 8001e7e:	f67f af7d 	bls.w	8001d7c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8001e82:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e84:	698b      	ldr	r3, [r1, #24]
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d108      	bne.n	8001e9c <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e8a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001e8c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1ac9      	subs	r1, r1, r3
 8001e92:	b289      	uxth	r1, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	f000 f8f3 	bl	8002080 <HAL_UARTEx_RxEventCallback>
      return;
 8001e9a:	e76f      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9c:	68d3      	ldr	r3, [r2, #12]
 8001e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea2:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6953      	ldr	r3, [r2, #20]
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	6953      	ldr	r3, [r2, #20]
 8001eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ec2:	6822      	ldr	r2, [r4, #0]
 8001ec4:	68d3      	ldr	r3, [r2, #12]
 8001ec6:	f023 0310 	bic.w	r3, r3, #16
 8001eca:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ecc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ece:	f7fe fddd 	bl	8000a8c <HAL_DMA_Abort>
 8001ed2:	e7da      	b.n	8001e8a <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ed4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001ed6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	1ac9      	subs	r1, r1, r3
 8001edc:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8001ede:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f43f af4a 	beq.w	8001d7c <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8001ee8:	2900      	cmp	r1, #0
 8001eea:	f43f af47 	beq.w	8001d7c <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eee:	68d3      	ldr	r3, [r2, #12]
 8001ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ef4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	6953      	ldr	r3, [r2, #20]
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8001f00:	2320      	movs	r3, #32
 8001f02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f06:	2300      	movs	r3, #0
 8001f08:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f0a:	6822      	ldr	r2, [r4, #0]
 8001f0c:	68d3      	ldr	r3, [r2, #12]
 8001f0e:	f023 0310 	bic.w	r3, r3, #16
 8001f12:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f14:	4620      	mov	r0, r4
 8001f16:	f000 f8b3 	bl	8002080 <HAL_UARTEx_RxEventCallback>
      return;
 8001f1a:	e72f      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fd0b 	bl	8001938 <UART_Transmit_IT>
    return;
 8001f22:	e72b      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fe53 	bl	8001bd0 <UART_EndTransmit_IT>
    return;
 8001f2a:	e727      	b.n	8001d7c <HAL_UART_IRQHandler+0x50>
 8001f2c:	08001c49 	.word	0x08001c49

08001f30 <UART_DMARxHalfCplt>:
{
 8001f30:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f32:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d002      	beq.n	8001f40 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8001f3a:	f7ff fe57 	bl	8001bec <HAL_UART_RxHalfCpltCallback>
}
 8001f3e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8001f40:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001f42:	0849      	lsrs	r1, r1, #1
 8001f44:	f000 f89c 	bl	8002080 <HAL_UARTEx_RxEventCallback>
 8001f48:	e7f9      	b.n	8001f3e <UART_DMARxHalfCplt+0xe>

08001f4a <UART_DMAReceiveCplt>:
{
 8001f4a:	b508      	push	{r3, lr}
 8001f4c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f013 0f20 	tst.w	r3, #32
 8001f58:	d116      	bne.n	8001f88 <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	68d3      	ldr	r3, [r2, #12]
 8001f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f66:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6953      	ldr	r3, [r2, #20]
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	6953      	ldr	r3, [r2, #20]
 8001f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f7a:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d008      	beq.n	8001fa0 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8001f8e:	f7ff fe2c 	bl	8001bea <HAL_UART_RxCpltCallback>
}
 8001f92:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f94:	6802      	ldr	r2, [r0, #0]
 8001f96:	68d3      	ldr	r3, [r2, #12]
 8001f98:	f023 0310 	bic.w	r3, r3, #16
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	e7f3      	b.n	8001f88 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fa0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001fa2:	f000 f86d 	bl	8002080 <HAL_UARTEx_RxEventCallback>
 8001fa6:	e7f4      	b.n	8001f92 <UART_DMAReceiveCplt+0x48>

08001fa8 <UART_Start_Receive_DMA>:
{
 8001fa8:	b530      	push	{r4, r5, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	4604      	mov	r4, r0
 8001fae:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8001fb0:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fb2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb4:	2500      	movs	r5, #0
 8001fb6:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fb8:	2222      	movs	r2, #34	; 0x22
 8001fba:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001fbe:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001fc0:	4814      	ldr	r0, [pc, #80]	; (8002014 <UART_Start_Receive_DMA+0x6c>)
 8001fc2:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001fc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <UART_Start_Receive_DMA+0x70>)
 8001fc8:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001fca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fcc:	4813      	ldr	r0, [pc, #76]	; (800201c <UART_Start_Receive_DMA+0x74>)
 8001fce:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8001fd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001fd2:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001fd4:	6820      	ldr	r0, [r4, #0]
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	1d01      	adds	r1, r0, #4
 8001fda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fdc:	f7fe fd1c 	bl	8000a18 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001fe0:	9501      	str	r5, [sp, #4]
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	9201      	str	r2, [sp, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	9201      	str	r2, [sp, #4]
 8001fec:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 8001fee:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff8:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	6953      	ldr	r3, [r2, #20]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002004:	6822      	ldr	r2, [r4, #0]
 8002006:	6953      	ldr	r3, [r2, #20]
 8002008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200c:	6153      	str	r3, [r2, #20]
}
 800200e:	4628      	mov	r0, r5
 8002010:	b003      	add	sp, #12
 8002012:	bd30      	pop	{r4, r5, pc}
 8002014:	08001f4b 	.word	0x08001f4b
 8002018:	08001f31 	.word	0x08001f31
 800201c:	08001bf1 	.word	0x08001bf1

08002020 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002020:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d121      	bne.n	800206e <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800202a:	b510      	push	{r4, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002030:	b1f9      	cbz	r1, 8002072 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
 8002032:	b302      	cbz	r2, 8002076 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
    __HAL_LOCK(huart);
 8002034:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d01f      	beq.n	800207c <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
 800203c:	2301      	movs	r3, #1
 800203e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002042:	6303      	str	r3, [r0, #48]	; 0x30
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002044:	f7ff ffb0 	bl	8001fa8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8002048:	b9b0      	cbnz	r0, 8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800204a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800204c:	2b01      	cmp	r3, #1
 800204e:	d001      	beq.n	8002054 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002050:	2001      	movs	r0, #1
    return status;
 8002052:	e011      	b.n	8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	9201      	str	r2, [sp, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9a01      	ldr	r2, [sp, #4]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	f042 0210 	orr.w	r2, r2, #16
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	e004      	b.n	8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
    return HAL_BUSY;
 800206e:	2002      	movs	r0, #2
}
 8002070:	4770      	bx	lr
      return HAL_ERROR;
 8002072:	2001      	movs	r0, #1
 8002074:	e000      	b.n	8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
 8002076:	2001      	movs	r0, #1
}
 8002078:	b002      	add	sp, #8
 800207a:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800207c:	2002      	movs	r0, #2
 800207e:	e7fb      	b.n	8002078 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>

08002080 <HAL_UARTEx_RxEventCallback>:
 * @param
 * @param
 * @retval ***NONE***
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002080:	b510      	push	{r4, lr}
 8002082:	4604      	mov	r4, r0
	/* Prevent unused argument(s) compilation warning */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002084:	2110      	movs	r1, #16
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x40>)
 8002088:	f7fe ff28 	bl	8000edc <HAL_GPIO_TogglePin>
	if (huart->Instance == USART3) {
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x44>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d004      	beq.n	800209e <HAL_UARTEx_RxEventCallback+0x1e>
		USART3_Message_Received();
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
				DMA_RX_BUFFER_SIZE);
	}
	if (huart->Instance == USART2) {
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x48>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d008      	beq.n	80020ae <HAL_UARTEx_RxEventCallback+0x2e>
		uart2MessageReceived();
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2,
				DMA_RX_BUFFER_SIZE);
	}
}
 800209c:	bd10      	pop	{r4, pc}
		USART3_Message_Received();
 800209e:	f000 f9eb 	bl	8002478 <USART3_Message_Received>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	4909      	ldr	r1, [pc, #36]	; (80020cc <HAL_UARTEx_RxEventCallback+0x4c>)
 80020a6:	480a      	ldr	r0, [pc, #40]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x50>)
 80020a8:	f7ff ffba 	bl	8002020 <HAL_UARTEx_ReceiveToIdle_DMA>
 80020ac:	e7f2      	b.n	8002094 <HAL_UARTEx_RxEventCallback+0x14>
		uart2MessageReceived();
 80020ae:	f000 fbcf 	bl	8002850 <uart2MessageReceived>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2,
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x58>)
 80020b8:	f7ff ffb2 	bl	8002020 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80020bc:	e7ee      	b.n	800209c <HAL_UARTEx_RxEventCallback+0x1c>
 80020be:	bf00      	nop
 80020c0:	40010800 	.word	0x40010800
 80020c4:	40004800 	.word	0x40004800
 80020c8:	40004400 	.word	0x40004400
 80020cc:	20000098 	.word	0x20000098
 80020d0:	20000fb0 	.word	0x20000fb0
 80020d4:	20000118 	.word	0x20000118
 80020d8:	20000f6c 	.word	0x20000f6c

080020dc <USART_Init>:
 * @brief
 * @param
 * @param
 * @retval ***NONE***
 */
void USART_Init(void) {
 80020dc:	b510      	push	{r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3, DMA_RX_BUFFER_SIZE);
 80020de:	4c06      	ldr	r4, [pc, #24]	; (80020f8 <USART_Init+0x1c>)
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	4621      	mov	r1, r4
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <USART_Init+0x20>)
 80020e6:	f7ff ff9b 	bl	8002020 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE);
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	18a1      	adds	r1, r4, r2
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <USART_Init+0x24>)
 80020f0:	f7ff ff96 	bl	8002020 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	bf00      	nop
 80020f8:	20000098 	.word	0x20000098
 80020fc:	20000fb0 	.word	0x20000fb0
 8002100:	20000f6c 	.word	0x20000f6c

08002104 <ECU_erro_bin_to_int>:

extern CanIdData_t can_vector[CAN_IDS_NUMBER];
extern int8_t FLAG_MSG;

uint8_t ECU_erro_bin_to_int() {
	for (int8_t i = 15; i >= 0; i--) {
 8002104:	230f      	movs	r3, #15
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <ECU_erro_bin_to_int+0x1e>
		if ((can_vector[ID_control_torque_motor].word_0 >> i) == 1) {
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <ECU_erro_bin_to_int+0x24>)
 800210c:	f8b2 2270 	ldrh.w	r2, [r2, #624]	; 0x270
 8002110:	411a      	asrs	r2, r3
 8002112:	2a01      	cmp	r2, #1
 8002114:	d002      	beq.n	800211c <ECU_erro_bin_to_int+0x18>
	for (int8_t i = 15; i >= 0; i--) {
 8002116:	3b01      	subs	r3, #1
 8002118:	b25b      	sxtb	r3, r3
 800211a:	e7f4      	b.n	8002106 <ECU_erro_bin_to_int+0x2>
			return i + 1;
 800211c:	3301      	adds	r3, #1
 800211e:	b2d8      	uxtb	r0, r3
 8002120:	4770      	bx	lr
		}
	}
	return 0;
 8002122:	2000      	movs	r0, #0
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200001ac 	.word	0x200001ac

0800212c <BMS_erro_bin_to_int>:

uint8_t BMS_erro_bin_to_int() {
	for (int8_t i = 8; i >= 0; i--)
 800212c:	2308      	movs	r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <BMS_erro_bin_to_int+0x1e>
		if ((can_vector[ID_safety_bms].word_1) >> i == 1)
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <BMS_erro_bin_to_int+0x24>)
 8002134:	f8b2 271a 	ldrh.w	r2, [r2, #1818]	; 0x71a
 8002138:	411a      	asrs	r2, r3
 800213a:	2a01      	cmp	r2, #1
 800213c:	d002      	beq.n	8002144 <BMS_erro_bin_to_int+0x18>
	for (int8_t i = 8; i >= 0; i--)
 800213e:	3b01      	subs	r3, #1
 8002140:	b25b      	sxtb	r3, r3
 8002142:	e7f4      	b.n	800212e <BMS_erro_bin_to_int+0x2>
			return i + 1;
 8002144:	3301      	adds	r3, #1
 8002146:	b2d8      	uxtb	r0, r3
 8002148:	4770      	bx	lr
	return 0;
 800214a:	2000      	movs	r0, #0
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200001ac 	.word	0x200001ac

08002154 <interfaceInit>:
/* Auxiliar Variables */
int auxiliar = 0;
uint8_t vet_aux[128];
/* Functions */

void interfaceInit(void) {
 8002154:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8002156:	2064      	movs	r0, #100	; 0x64
 8002158:	f7fe f848 	bl	80001ec <HAL_Delay>

	USART_Init();
 800215c:	f7ff ffbe 	bl	80020dc <USART_Init>

	nexInit();
 8002160:	f000 fa22 	bl	80025a8 <nexInit>

//	NEXTION_Init();

	/* Global timer variables init */
}
 8002164:	bd08      	pop	{r3, pc}
	...

08002168 <canMessageReceived>:

	va_end(argList);
}

void canMessageReceived(uint16_t id, uint8_t *data) {
	if (id > CAN_IDS_NUMBER - 1)
 8002168:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 800216c:	d20b      	bcs.n	8002186 <canMessageReceived+0x1e>
		return;
	uint16_t *data_word = (uint16_t*) data;
	can_vector[id].word_0 = data_word[0];
 800216e:	880a      	ldrh	r2, [r1, #0]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <canMessageReceived+0x20>)
 8002172:	f823 2030 	strh.w	r2, [r3, r0, lsl #3]
	can_vector[id].word_1 = data_word[1];
 8002176:	884a      	ldrh	r2, [r1, #2]
 8002178:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800217c:	8042      	strh	r2, [r0, #2]
	can_vector[id].word_2 = data_word[2];
 800217e:	888b      	ldrh	r3, [r1, #4]
 8002180:	8083      	strh	r3, [r0, #4]
	can_vector[id].word_3 = data_word[3];
 8002182:	88cb      	ldrh	r3, [r1, #6]
 8002184:	80c3      	strh	r3, [r0, #6]
}
 8002186:	4770      	bx	lr
 8002188:	200001ac 	.word	0x200001ac

0800218c <blinkLed3>:

void blinkLed2(void) {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
} /* Debug Led 2 */

void blinkLed3(void) {
 800218c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800218e:	2110      	movs	r1, #16
 8002190:	4801      	ldr	r0, [pc, #4]	; (8002198 <blinkLed3+0xc>)
 8002192:	f7fe fea3 	bl	8000edc <HAL_GPIO_TogglePin>
} /* Debug Led 3 */
 8002196:	bd08      	pop	{r3, pc}
 8002198:	40010800 	.word	0x40010800

0800219c <timerAtualization>:

void timerAtualization(void) {
 800219c:	b508      	push	{r3, lr}
	actualTimer = HAL_GetTick();
 800219e:	f7fe f81f 	bl	80001e0 <HAL_GetTick>
 80021a2:	4b02      	ldr	r3, [pc, #8]	; (80021ac <timerAtualization+0x10>)
 80021a4:	f8c3 0b40 	str.w	r0, [r3, #2880]	; 0xb40
}
 80021a8:	bd08      	pop	{r3, pc}
 80021aa:	bf00      	nop
 80021ac:	200001ac 	.word	0x200001ac

080021b0 <timer_wait_ms>:
	// if(auxiliar == 100) auxiliar = 0;
}

//timer_handler - BMS

uint8_t timer_wait_ms(uint32_t timer_start, uint32_t delay) {
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4605      	mov	r5, r0
 80021b4:	460c      	mov	r4, r1
	const uint32_t current_time = HAL_GetTick();
 80021b6:	f7fe f813 	bl	80001e0 <HAL_GetTick>
	if ((current_time - timer_start) >= delay) {
 80021ba:	1b40      	subs	r0, r0, r5
 80021bc:	42a0      	cmp	r0, r4
 80021be:	d201      	bcs.n	80021c4 <timer_wait_ms+0x14>
		return 1;
	}
	return 0;
 80021c0:	2000      	movs	r0, #0
}
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e7fc      	b.n	80021c2 <timer_wait_ms+0x12>

080021c8 <timer_restart>:
void timer_restart(uint32_t *timer_to_restart) {
 80021c8:	b510      	push	{r4, lr}
 80021ca:	4604      	mov	r4, r0
	*timer_to_restart = HAL_GetTick();
 80021cc:	f7fe f808 	bl	80001e0 <HAL_GetTick>
 80021d0:	6020      	str	r0, [r4, #0]
}
 80021d2:	bd10      	pop	{r4, pc}

080021d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80021d4:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80021d6:	4824      	ldr	r0, [pc, #144]	; (8002268 <MX_CAN_Init+0x94>)
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <MX_CAN_Init+0x98>)
 80021da:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 80021dc:	2309      	movs	r3, #9
 80021de:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021e4:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80021e6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80021ea:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80021ec:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80021ee:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80021f0:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021f2:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021f4:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021f6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021f8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80021fa:	f7fe f80b 	bl	8000214 <HAL_CAN_Init>
 80021fe:	bb30      	cbnz	r0, 800224e <MX_CAN_Init+0x7a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <MX_CAN_Init+0x94>)
 8002202:	2300      	movs	r3, #0
 8002204:	63c3      	str	r3, [r0, #60]	; 0x3c
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002206:	6403      	str	r3, [r0, #64]	; 0x40
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002208:	2201      	movs	r2, #1
 800220a:	6442      	str	r2, [r0, #68]	; 0x44
	sFilterConfig.FilterIdHigh = 0x0000;
 800220c:	6283      	str	r3, [r0, #40]	; 0x28
	sFilterConfig.FilterIdLow = 0x0000;
 800220e:	62c3      	str	r3, [r0, #44]	; 0x2c
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002210:	6303      	str	r3, [r0, #48]	; 0x30
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002212:	6343      	str	r3, [r0, #52]	; 0x34
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002214:	6383      	str	r3, [r0, #56]	; 0x38
	sFilterConfig.FilterActivation = ENABLE;
 8002216:	6482      	str	r2, [r0, #72]	; 0x48
	sFilterConfig.SlaveStartFilterBank = 14;
 8002218:	230e      	movs	r3, #14
 800221a:	64c3      	str	r3, [r0, #76]	; 0x4c
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 800221c:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8002220:	f7fe f89e 	bl	8000360 <HAL_CAN_ConfigFilter>
 8002224:	b9b0      	cbnz	r0, 8002254 <MX_CAN_Init+0x80>
		/* Filter configuration Error */
		Error_Handler();
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002226:	4810      	ldr	r0, [pc, #64]	; (8002268 <MX_CAN_Init+0x94>)
 8002228:	f7fe f920 	bl	800046c <HAL_CAN_Start>
 800222c:	b9a8      	cbnz	r0, 800225a <MX_CAN_Init+0x86>
		/* Start Error */
		Error_Handler();
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800222e:	2102      	movs	r1, #2
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_CAN_Init+0x94>)
 8002232:	f7fe f9f4 	bl	800061e <HAL_CAN_ActivateNotification>
 8002236:	b998      	cbnz	r0, 8002260 <MX_CAN_Init+0x8c>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
	}

	TxHeader.ExtId = 0x01;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_CAN_Init+0x94>)
 800223a:	2201      	movs	r2, #1
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
	TxHeader.RTR = CAN_RTR_DATA;
 800223e:	2200      	movs	r2, #0
 8002240:	65da      	str	r2, [r3, #92]	; 0x5c
	TxHeader.IDE = CAN_ID_STD;
 8002242:	659a      	str	r2, [r3, #88]	; 0x58
	TxHeader.DLC = 8;
 8002244:	2108      	movs	r1, #8
 8002246:	6619      	str	r1, [r3, #96]	; 0x60
	TxHeader.TransmitGlobalTime = DISABLE;
 8002248:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

  /* USER CODE END CAN_Init 2 */

}
 800224c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800224e:	f000 f98d 	bl	800256c <Error_Handler>
 8002252:	e7d5      	b.n	8002200 <MX_CAN_Init+0x2c>
		Error_Handler();
 8002254:	f000 f98a 	bl	800256c <Error_Handler>
 8002258:	e7e5      	b.n	8002226 <MX_CAN_Init+0x52>
		Error_Handler();
 800225a:	f000 f987 	bl	800256c <Error_Handler>
 800225e:	e7e6      	b.n	800222e <MX_CAN_Init+0x5a>
		Error_Handler();
 8002260:	f000 f984 	bl	800256c <Error_Handler>
 8002264:	e7e8      	b.n	8002238 <MX_CAN_Init+0x64>
 8002266:	bf00      	nop
 8002268:	20000d74 	.word	0x20000d74
 800226c:	40006400 	.word	0x40006400

08002270 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002270:	b510      	push	{r4, lr}
 8002272:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	2300      	movs	r3, #0
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	9304      	str	r3, [sp, #16]
 800227c:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_CAN_MspInit+0x9c>)
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002286:	b006      	add	sp, #24
 8002288:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800228a:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002294:	61da      	str	r2, [r3, #28]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800229c:	9200      	str	r2, [sp, #0]
 800229e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	f042 0208 	orr.w	r2, r2, #8
 80022a6:	619a      	str	r2, [r3, #24]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	4c15      	ldr	r4, [pc, #84]	; (8002310 <HAL_CAN_MspInit+0xa0>)
 80022ba:	a902      	add	r1, sp, #8
 80022bc:	4620      	mov	r0, r4
 80022be:	f7fe fcf5 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	a902      	add	r1, sp, #8
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7fe fcea 	bl	8000cac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_CAN_MspInit+0xa4>)
 80022da:	6853      	ldr	r3, [r2, #4]
 80022dc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80022e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	4611      	mov	r1, r2
 80022ee:	2014      	movs	r0, #20
 80022f0:	f7fe faec 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80022f4:	2014      	movs	r0, #20
 80022f6:	f7fe fb21 	bl	800093c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	4611      	mov	r1, r2
 80022fe:	2015      	movs	r0, #21
 8002300:	f7fe fae4 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002304:	2015      	movs	r0, #21
 8002306:	f7fe fb19 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 800230a:	e7bc      	b.n	8002286 <HAL_CAN_MspInit+0x16>
 800230c:	40006400 	.word	0x40006400
 8002310:	40010c00 	.word	0x40010c00
 8002314:	40010000 	.word	0x40010000

08002318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002318:	b500      	push	{lr}
 800231a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <MX_DMA_Init+0x50>)
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	4611      	mov	r1, r2
 8002334:	200c      	movs	r0, #12
 8002336:	f7fe fac9 	bl	80008cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800233a:	200c      	movs	r0, #12
 800233c:	f7fe fafe 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	4611      	mov	r1, r2
 8002344:	200d      	movs	r0, #13
 8002346:	f7fe fac1 	bl	80008cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800234a:	200d      	movs	r0, #13
 800234c:	f7fe faf6 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	4611      	mov	r1, r2
 8002354:	2010      	movs	r0, #16
 8002356:	f7fe fab9 	bl	80008cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800235a:	2010      	movs	r0, #16
 800235c:	f7fe faee 	bl	800093c <HAL_NVIC_EnableIRQ>

}
 8002360:	b003      	add	sp, #12
 8002362:	f85d fb04 	ldr.w	pc, [sp], #4
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000

0800236c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800236c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002370:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	2400      	movs	r4, #0
 8002374:	9404      	str	r4, [sp, #16]
 8002376:	9405      	str	r4, [sp, #20]
 8002378:	9406      	str	r4, [sp, #24]
 800237a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <MX_GPIO_Init+0xd4>)
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	f042 0210 	orr.w	r2, r2, #16
 8002384:	619a      	str	r2, [r3, #24]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	f002 0210 	and.w	r2, r2, #16
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	619a      	str	r2, [r3, #24]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	f002 0220 	and.w	r2, r2, #32
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	f042 0204 	orr.w	r2, r2, #4
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	f002 0204 	and.w	r2, r2, #4
 80023b0:	9202      	str	r2, [sp, #8]
 80023b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	f042 0208 	orr.w	r2, r2, #8
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	9303      	str	r3, [sp, #12]
 80023c4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023c6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002444 <MX_GPIO_Init+0xd8>
 80023ca:	4622      	mov	r2, r4
 80023cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d0:	4648      	mov	r0, r9
 80023d2:	f7fe fd7d 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80023d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002448 <MX_GPIO_Init+0xdc>
 80023da:	4622      	mov	r2, r4
 80023dc:	2113      	movs	r1, #19
 80023de:	4640      	mov	r0, r8
 80023e0:	f7fe fd76 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSEL_XBee_GPIO_Port, SSEL_XBee_Pin, GPIO_PIN_RESET);
 80023e4:	4e19      	ldr	r6, [pc, #100]	; (800244c <MX_GPIO_Init+0xe0>)
 80023e6:	4622      	mov	r2, r4
 80023e8:	2101      	movs	r1, #1
 80023ea:	4630      	mov	r0, r6
 80023ec:	f7fe fd70 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2501      	movs	r5, #1
 80023f8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2702      	movs	r7, #2
 80023fe:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002400:	a904      	add	r1, sp, #16
 8002402:	4648      	mov	r0, r9
 8002404:	f7fe fc52 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002408:	2313      	movs	r3, #19
 800240a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	a904      	add	r1, sp, #16
 8002414:	4640      	mov	r0, r8
 8002416:	f7fe fc49 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSEL_XBee_Pin;
 800241a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(SSEL_XBee_GPIO_Port, &GPIO_InitStruct);
 8002422:	a904      	add	r1, sp, #16
 8002424:	4630      	mov	r0, r6
 8002426:	f7fe fc41 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002430:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	a904      	add	r1, sp, #16
 8002434:	4630      	mov	r0, r6
 8002436:	f7fe fc39 	bl	8000cac <HAL_GPIO_Init>

}
 800243a:	b009      	add	sp, #36	; 0x24
 800243c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	40011000 	.word	0x40011000
 8002448:	40010800 	.word	0x40010800
 800244c:	40010c00 	.word	0x40010c00

08002450 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002450:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <MX_IWDG_Init+0x20>)
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <MX_IWDG_Init+0x24>)
 8002456:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8002458:	2303      	movs	r3, #3
 800245a:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 150;
 800245c:	2396      	movs	r3, #150	; 0x96
 800245e:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002460:	f7fe fd45 	bl	8000eee <HAL_IWDG_Init>
 8002464:	b900      	cbnz	r0, 8002468 <MX_IWDG_Init+0x18>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002466:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002468:	f000 f880 	bl	800256c <Error_Handler>
}
 800246c:	e7fb      	b.n	8002466 <MX_IWDG_Init+0x16>
 800246e:	bf00      	nop
 8002470:	20000e0c 	.word	0x20000e0c
 8002474:	40003000 	.word	0x40003000

08002478 <USART3_Message_Received>:
			+ can_vector[ID_control_speed_r_motor].word_0) / 8.89;
	speed = speed / 2;
	return 0.1885 * speed * 0.52;
}

void USART3_Message_Received(void) {
 8002478:	b538      	push	{r3, r4, r5, lr}

	/*Verify if the message is to change the nextion page */
	memcpy(NEXTION_UART_BUFFER, DMA_RX_Buffer_3, DMA_RX_BUFFER_SIZE_NEXTION);
 800247a:	4d16      	ldr	r5, [pc, #88]	; (80024d4 <USART3_Message_Received+0x5c>)
 800247c:	4c16      	ldr	r4, [pc, #88]	; (80024d8 <USART3_Message_Received+0x60>)
 800247e:	46ac      	mov	ip, r5
 8002480:	6820      	ldr	r0, [r4, #0]
 8002482:	6861      	ldr	r1, [r4, #4]
 8002484:	68a2      	ldr	r2, [r4, #8]
 8002486:	68e3      	ldr	r3, [r4, #12]
 8002488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800248c:	6920      	ldr	r0, [r4, #16]
 800248e:	6961      	ldr	r1, [r4, #20]
 8002490:	69a2      	ldr	r2, [r4, #24]
 8002492:	69e3      	ldr	r3, [r4, #28]
 8002494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

	if (NEXTION_UART_BUFFER[0] == DISPLAY_CURRENT_PAGE_COMMAND) {
 8002498:	782b      	ldrb	r3, [r5, #0]
 800249a:	2b66      	cmp	r3, #102	; 0x66
 800249c:	d00f      	beq.n	80024be <USART3_Message_Received+0x46>
		pageMessageReceived = 1;
		actual_page = (NextionPage_e) NEXTION_UART_BUFFER[1];
	}
	if (PAGE != actual_page && NEXTION_STATE != 0)
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <USART3_Message_Received+0x5c>)
 80024a0:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 80024a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a8:	4298      	cmp	r0, r3
 80024aa:	d003      	beq.n	80024b4 <USART3_Message_Received+0x3c>
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <USART3_Message_Received+0x5c>)
 80024ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80024b2:	b95b      	cbnz	r3, 80024cc <USART3_Message_Received+0x54>
		NexPageShow(PAGE);
	timer_actual_nextion = HAL_GetTick();
 80024b4:	f7fd fe94 	bl	80001e0 <HAL_GetTick>
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <USART3_Message_Received+0x5c>)
 80024ba:	6258      	str	r0, [r3, #36]	; 0x24
}
 80024bc:	bd38      	pop	{r3, r4, r5, pc}
		pageMessageReceived = 1;
 80024be:	2201      	movs	r2, #1
 80024c0:	f885 2020 	strb.w	r2, [r5, #32]
		actual_page = (NextionPage_e) NEXTION_UART_BUFFER[1];
 80024c4:	786a      	ldrb	r2, [r5, #1]
 80024c6:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 80024ca:	e7e8      	b.n	800249e <USART3_Message_Received+0x26>
		NexPageShow(PAGE);
 80024cc:	f000 f87a 	bl	80025c4 <NexPageShow>
 80024d0:	e7f0      	b.n	80024b4 <USART3_Message_Received+0x3c>
 80024d2:	bf00      	nop
 80024d4:	20000e18 	.word	0x20000e18
 80024d8:	20000098 	.word	0x20000098

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b530      	push	{r4, r5, lr}
 80024de:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e0:	2228      	movs	r2, #40	; 0x28
 80024e2:	2100      	movs	r1, #0
 80024e4:	a806      	add	r0, sp, #24
 80024e6:	f000 fe3d 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ea:	2400      	movs	r4, #0
 80024ec:	9401      	str	r4, [sp, #4]
 80024ee:	9402      	str	r4, [sp, #8]
 80024f0:	9403      	str	r4, [sp, #12]
 80024f2:	9404      	str	r4, [sp, #16]
 80024f4:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80024f6:	2309      	movs	r3, #9
 80024f8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fe:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002500:	2201      	movs	r2, #1
 8002502:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002504:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002506:	2502      	movs	r5, #2
 8002508:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800250a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800250c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002510:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002512:	a806      	add	r0, sp, #24
 8002514:	f7fe fd34 	bl	8000f80 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002518:	230f      	movs	r3, #15
 800251a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251c:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002524:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002526:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002528:	4629      	mov	r1, r5
 800252a:	a801      	add	r0, sp, #4
 800252c:	f7fe ff68 	bl	8001400 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002530:	b011      	add	sp, #68	; 0x44
 8002532:	bd30      	pop	{r4, r5, pc}

08002534 <main>:
{
 8002534:	b508      	push	{r3, lr}
  HAL_Init();
 8002536:	f7fd fe35 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800253a:	f7ff ffcf 	bl	80024dc <SystemClock_Config>
  MX_GPIO_Init();
 800253e:	f7ff ff15 	bl	800236c <MX_GPIO_Init>
  MX_DMA_Init();
 8002542:	f7ff fee9 	bl	8002318 <MX_DMA_Init>
  MX_CAN_Init();
 8002546:	f7ff fe45 	bl	80021d4 <MX_CAN_Init>
  MX_SPI1_Init();
 800254a:	f000 f851 	bl	80025f0 <MX_SPI1_Init>
  MX_TIM3_Init();
 800254e:	f000 fb1f 	bl	8002b90 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002552:	f000 fb69 	bl	8002c28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002556:	f000 fb81 	bl	8002c5c <MX_USART3_UART_Init>
  MX_IWDG_Init();
 800255a:	f7ff ff79 	bl	8002450 <MX_IWDG_Init>
	interfaceInit();
 800255e:	f7ff fdf9 	bl	8002154 <interfaceInit>
		TELEMETRY();
 8002562:	f000 fac1 	bl	8002ae8 <TELEMETRY>
		timerAtualization();
 8002566:	f7ff fe19 	bl	800219c <timerAtualization>
	while (1) {
 800256a:	e7fa      	b.n	8002562 <main+0x2e>

0800256c <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 800256c:	4770      	bx	lr
	...

08002570 <sendCommand>:
#define NEX_RET_INVALID_OPERATION            (0x1B)

char ENDTERMS[]={255,255,255};

void sendCommand(const char* cmd)
{
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4604      	mov	r4, r0
   
//   while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_RXNE))
//   {
//      huart3.Instance->DR;
//   }
   HAL_UART_Transmit(&huart2, (uint8_t*) cmd, strlen (cmd), 100);
 8002574:	f7fd fdea 	bl	800014c <strlen>
 8002578:	4d06      	ldr	r5, [pc, #24]	; (8002594 <sendCommand+0x24>)
 800257a:	2364      	movs	r3, #100	; 0x64
 800257c:	b282      	uxth	r2, r0
 800257e:	4621      	mov	r1, r4
 8002580:	4628      	mov	r0, r5
 8002582:	f7ff fab8 	bl	8001af6 <HAL_UART_Transmit>
   HAL_UART_Transmit (&huart2, (uint8_t*)&ENDTERMS, 3, 100);
 8002586:	2364      	movs	r3, #100	; 0x64
 8002588:	2203      	movs	r2, #3
 800258a:	4903      	ldr	r1, [pc, #12]	; (8002598 <sendCommand+0x28>)
 800258c:	4628      	mov	r0, r5
 800258e:	f7ff fab2 	bl	8001af6 <HAL_UART_Transmit>
}
 8002592:	bd38      	pop	{r3, r4, r5, pc}
 8002594:	20000f6c 	.word	0x20000f6c
 8002598:	20000008 	.word	0x20000008

0800259c <recvRetCommandFinished>:

int recvRetCommandFinished(void)
{
 800259c:	b082      	sub	sp, #8
   
   int ret=0;
   uint8_t temp[4]={0};
 800259e:	2000      	movs	r0, #0
 80025a0:	9001      	str	r0, [sp, #4]
   {
      ret=1;
   }

   return ret;
}
 80025a2:	b002      	add	sp, #8
 80025a4:	4770      	bx	lr
	...

080025a8 <nexInit>:
   strncpy (buffer, temp, pointer);
   return ret;
}

int nexInit(void)
{
 80025a8:	b508      	push	{r3, lr}
   int ret1=0;
   
   sendCommand ("");
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <nexInit+0x14>)
 80025ac:	f7ff ffe0 	bl	8002570 <sendCommand>
   sendCommand ("bkcmd=1");
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <nexInit+0x18>)
 80025b2:	f7ff ffdd 	bl	8002570 <sendCommand>
   ret1=recvRetCommandFinished  ()  ;
 80025b6:	f7ff fff1 	bl	800259c <recvRetCommandFinished>
//   sendCommand ("page 0");
//   ret2=recvRetCommandFinished  ()  ;
//   return ret1&&ret2;
   return ret1;
}
 80025ba:	bd08      	pop	{r3, pc}
 80025bc:	08003ad4 	.word	0x08003ad4
 80025c0:	08003ad8 	.word	0x08003ad8

080025c4 <NexPageShow>:

int NexPageShow(int Page)
{
 80025c4:	b500      	push	{lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	4602      	mov	r2, r0
   char buffer[10]={0};
 80025ca:	2300      	movs	r3, #0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	f8ad 300c 	strh.w	r3, [sp, #12]
   sprintf (buffer, "page %d", Page);
 80025d4:	4905      	ldr	r1, [pc, #20]	; (80025ec <NexPageShow+0x28>)
 80025d6:	a801      	add	r0, sp, #4
 80025d8:	f000 fdcc 	bl	8003174 <siprintf>
   sendCommand (buffer);
 80025dc:	a801      	add	r0, sp, #4
 80025de:	f7ff ffc7 	bl	8002570 <sendCommand>
   return recvRetCommandFinished ();
 80025e2:	f7ff ffdb 	bl	800259c <recvRetCommandFinished>
}
 80025e6:	b005      	add	sp, #20
 80025e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80025ec:	08003ae0 	.word	0x08003ae0

080025f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025f0:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <MX_SPI1_Init+0x3c>)
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_SPI1_Init+0x40>)
 80025f6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025f8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80025fc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025fe:	2300      	movs	r3, #0
 8002600:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002602:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002604:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002606:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800260e:	2208      	movs	r2, #8
 8002610:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002612:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002614:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002616:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002618:	230a      	movs	r3, #10
 800261a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800261c:	f7fe ffcc 	bl	80015b8 <HAL_SPI_Init>
 8002620:	b900      	cbnz	r0, 8002624 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002622:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002624:	f7ff ffa2 	bl	800256c <Error_Handler>
}
 8002628:	e7fb      	b.n	8002622 <MX_SPI1_Init+0x32>
 800262a:	bf00      	nop
 800262c:	20000e7c 	.word	0x20000e7c
 8002630:	40013000 	.word	0x40013000

08002634 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002634:	b510      	push	{r4, lr}
 8002636:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	2300      	movs	r3, #0
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8002642:	6802      	ldr	r2, [r0, #0]
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_SPI_MspInit+0x6c>)
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800264a:	b006      	add	sp, #24
 800264c:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800264e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002660:	9200      	str	r2, [sp, #0]
 8002662:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	f042 0204 	orr.w	r2, r2, #4
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_XBee_Pin|MOSI_XBee_Pin;
 8002676:	23a0      	movs	r3, #160	; 0xa0
 8002678:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	4c08      	ldr	r4, [pc, #32]	; (80026a4 <HAL_SPI_MspInit+0x70>)
 8002684:	a902      	add	r1, sp, #8
 8002686:	4620      	mov	r0, r4
 8002688:	f7fe fb10 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_XBee_Pin;
 800268c:	2340      	movs	r3, #64	; 0x40
 800268e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	2300      	movs	r3, #0
 8002692:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MISO_XBee_GPIO_Port, &GPIO_InitStruct);
 8002696:	a902      	add	r1, sp, #8
 8002698:	4620      	mov	r0, r4
 800269a:	f7fe fb07 	bl	8000cac <HAL_GPIO_Init>
}
 800269e:	e7d4      	b.n	800264a <HAL_SPI_MspInit+0x16>
 80026a0:	40013000 	.word	0x40013000
 80026a4:	40010800 	.word	0x40010800

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_MspInit+0x3c>)
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	619a      	str	r2, [r3, #24]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	f002 0201 	and.w	r2, r2, #1
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c4:	61da      	str	r2, [r3, #28]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <HAL_MspInit+0x40>)
 80026d2:	6853      	ldr	r3, [r2, #4]
 80026d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	b002      	add	sp, #8
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010000 	.word	0x40010000

080026ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026ec:	4770      	bx	lr

080026ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler>

080026f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <MemManage_Handler>

080026f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <BusFault_Handler>

080026f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler>

080026f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	4770      	bx	lr

080026f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f8:	4770      	bx	lr

080026fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026fe:	f7fd fd63 	bl	80001c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002702:	bd08      	pop	{r3, pc}

08002704 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002704:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002706:	4802      	ldr	r0, [pc, #8]	; (8002710 <DMA1_Channel2_IRQHandler+0xc>)
 8002708:	f7fe fa2e 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800270c:	bd08      	pop	{r3, pc}
 800270e:	bf00      	nop
 8002710:	2000107c 	.word	0x2000107c

08002714 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002714:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002716:	4802      	ldr	r0, [pc, #8]	; (8002720 <DMA1_Channel3_IRQHandler+0xc>)
 8002718:	f7fe fa26 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800271c:	bd08      	pop	{r3, pc}
 800271e:	bf00      	nop
 8002720:	20001038 	.word	0x20001038

08002724 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002724:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002726:	4802      	ldr	r0, [pc, #8]	; (8002730 <DMA1_Channel6_IRQHandler+0xc>)
 8002728:	f7fe fa1e 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800272c:	bd08      	pop	{r3, pc}
 800272e:	bf00      	nop
 8002730:	20000ff4 	.word	0x20000ff4

08002734 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002734:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002736:	4816      	ldr	r0, [pc, #88]	; (8002790 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
 8002738:	f7fd ff90 	bl	800065c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	if (HAL_GetTick() - timer_actual > 30) {
 800273c:	f7fd fd50 	bl	80001e0 <HAL_GetTick>
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <USB_LP_CAN1_RX0_IRQHandler+0x60>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1ac0      	subs	r0, r0, r3
 8002746:	281e      	cmp	r0, #30
 8002748:	d818      	bhi.n	800277c <USB_LP_CAN1_RX0_IRQHandler+0x48>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		timer_actual = HAL_GetTick();
	}

	if (CAN_STATE == 0) {
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b92b      	cbnz	r3, 800275c <USB_LP_CAN1_RX0_IRQHandler+0x28>
		CAN_STATE = 1;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
		FLAG_POP_UP = 0;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <USB_LP_CAN1_RX0_IRQHandler+0x68>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
	}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800275c:	4d10      	ldr	r5, [pc, #64]	; (80027a0 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 800275e:	4c11      	ldr	r4, [pc, #68]	; (80027a4 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8002760:	462b      	mov	r3, r5
 8002762:	4622      	mov	r2, r4
 8002764:	2100      	movs	r1, #0
 8002766:	480a      	ldr	r0, [pc, #40]	; (8002790 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
 8002768:	f7fd feae 	bl	80004c8 <HAL_CAN_GetRxMessage>
	canMessageReceived(RxHeader.StdId, RxData);
 800276c:	4629      	mov	r1, r5
 800276e:	8820      	ldrh	r0, [r4, #0]
 8002770:	f7ff fcfa 	bl	8002168 <canMessageReceived>
		HAL_IWDG_Refresh(&hiwdg);
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8002776:	f7fe fbe6 	bl	8000f46 <HAL_IWDG_Refresh>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800277a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800277c:	2101      	movs	r1, #1
 800277e:	480b      	ldr	r0, [pc, #44]	; (80027ac <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8002780:	f7fe fbac 	bl	8000edc <HAL_GPIO_TogglePin>
		timer_actual = HAL_GetTick();
 8002784:	f7fd fd2c 	bl	80001e0 <HAL_GetTick>
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <USB_LP_CAN1_RX0_IRQHandler+0x60>)
 800278a:	6018      	str	r0, [r3, #0]
 800278c:	e7dd      	b.n	800274a <USB_LP_CAN1_RX0_IRQHandler+0x16>
 800278e:	bf00      	nop
 8002790:	20000d74 	.word	0x20000d74
 8002794:	20000ed4 	.word	0x20000ed4
 8002798:	20000e40 	.word	0x20000e40
 800279c:	200001a8 	.word	0x200001a8
 80027a0:	20000de0 	.word	0x20000de0
 80027a4:	20000df0 	.word	0x20000df0
 80027a8:	20000e0c 	.word	0x20000e0c
 80027ac:	40010800 	.word	0x40010800

080027b0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80027b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80027b2:	4802      	ldr	r0, [pc, #8]	; (80027bc <CAN1_RX1_IRQHandler+0xc>)
 80027b4:	f7fd ff52 	bl	800065c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80027b8:	bd08      	pop	{r3, pc}
 80027ba:	bf00      	nop
 80027bc:	20000d74 	.word	0x20000d74

080027c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027c2:	4803      	ldr	r0, [pc, #12]	; (80027d0 <USART2_IRQHandler+0x10>)
 80027c4:	f7ff fab2 	bl	8001d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//	USART_IrqHandler(&huart2, &hdma_usart2_rx);
	uart2MessageReceived();
 80027c8:	f000 f842 	bl	8002850 <uart2MessageReceived>

  /* USER CODE END USART2_IRQn 1 */
}
 80027cc:	bd08      	pop	{r3, pc}
 80027ce:	bf00      	nop
 80027d0:	20000f6c 	.word	0x20000f6c

080027d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027d6:	4802      	ldr	r0, [pc, #8]	; (80027e0 <USART3_IRQHandler+0xc>)
 80027d8:	f7ff faa8 	bl	8001d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027dc:	bd08      	pop	{r3, pc}
 80027de:	bf00      	nop
 80027e0:	20000fb0 	.word	0x20000fb0

080027e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <SystemInit+0x40>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <SystemInit+0x44>)
 80027f2:	400a      	ands	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002800:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002808:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002810:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002812:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002816:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <SystemInit+0x48>)
 800281a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	f8ff0000 	.word	0xf8ff0000
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <compareString>:

/* Telemetry variables */
uint8_t _real_clock_received = 0;

uint8_t compareString(uint8_t *first, uint8_t *second, uint16_t len) {
	while (*first == *second) {
 8002830:	e001      	b.n	8002836 <compareString+0x6>

		len--;
		if (len == 0)
			return 1; /* Same strings */

		first++;
 8002832:	3001      	adds	r0, #1
		second++;
 8002834:	3101      	adds	r1, #1
	while (*first == *second) {
 8002836:	f890 c000 	ldrb.w	ip, [r0]
 800283a:	780b      	ldrb	r3, [r1, #0]
 800283c:	459c      	cmp	ip, r3
 800283e:	d105      	bne.n	800284c <compareString+0x1c>
		len--;
 8002840:	3a01      	subs	r2, #1
 8002842:	b292      	uxth	r2, r2
		if (len == 0)
 8002844:	2a00      	cmp	r2, #0
 8002846:	d1f4      	bne.n	8002832 <compareString+0x2>
			return 1; /* Same strings */
 8002848:	2001      	movs	r0, #1
	}

	return 0;
}
 800284a:	4770      	bx	lr
	return 0;
 800284c:	2000      	movs	r0, #0
 800284e:	4770      	bx	lr

08002850 <uart2MessageReceived>:

void uart2MessageReceived(void) {
 8002850:	b538      	push	{r3, r4, r5, lr}
	 Receive options: 0x40
	 Receive data: 0x?? 0x?? 0x?? 0x?? ... ... maximum 255 bytes
	 Checksum: 0x??
	 */

	memcpy(XBEE_UART_BUFFER, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE_XBEE);
 8002852:	4c18      	ldr	r4, [pc, #96]	; (80028b4 <uart2MessageReceived+0x64>)
 8002854:	4d18      	ldr	r5, [pc, #96]	; (80028b8 <uart2MessageReceived+0x68>)
 8002856:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800285a:	46ac      	mov	ip, r5
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	6861      	ldr	r1, [r4, #4]
 8002860:	68a2      	ldr	r2, [r4, #8]
 8002862:	68e3      	ldr	r3, [r4, #12]
 8002864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002868:	3410      	adds	r4, #16
 800286a:	4665      	mov	r5, ip
 800286c:	4574      	cmp	r4, lr
 800286e:	d1f4      	bne.n	800285a <uart2MessageReceived+0xa>

	if (XBEE_UART_BUFFER[3] != 0x90)
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <uart2MessageReceived+0x68>)
 8002872:	78db      	ldrb	r3, [r3, #3]
 8002874:	2b90      	cmp	r3, #144	; 0x90
 8002876:	d108      	bne.n	800288a <uart2MessageReceived+0x3a>
		return; /* If the message received != "Receive Packet" */

	return_status = compareString(XBEE_UART_BUFFER + 15, ping_request, 4); /* Comparing if the received message is the xbee ping request */
 8002878:	2204      	movs	r2, #4
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <uart2MessageReceived+0x6c>)
 800287c:	4810      	ldr	r0, [pc, #64]	; (80028c0 <uart2MessageReceived+0x70>)
 800287e:	f7ff ffd7 	bl	8002830 <compareString>
	if (return_status)
 8002882:	b910      	cbnz	r0, 800288a <uart2MessageReceived+0x3a>
		return;
	if (mode == BYTES_API) {
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <uart2MessageReceived+0x74>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b103      	cbz	r3, 800288c <uart2MessageReceived+0x3c>

		FLAG_MSG = XBEE_UART_BUFFER[15];
	}
//	for (uint8_t i = 0; i < DMA_RX_BUFFER_SIZE_NEXTION; i++)
//		XBEE_UART_BUFFER[i] = 0;
}
 800288a:	bd38      	pop	{r3, r4, r5, pc}
		blinkLed3();
 800288c:	f7ff fc7e 	bl	800218c <blinkLed3>
		api_length = XBEE_UART_BUFFER[1] << 8;
 8002890:	4a09      	ldr	r2, [pc, #36]	; (80028b8 <uart2MessageReceived+0x68>)
 8002892:	7853      	ldrb	r3, [r2, #1]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		api_length += XBEE_UART_BUFFER[2];
 800289a:	7891      	ldrb	r1, [r2, #2]
 800289c:	440b      	add	r3, r1
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		if (api_length > 255)
 80028a4:	2bff      	cmp	r3, #255	; 0xff
 80028a6:	d8f0      	bhi.n	800288a <uart2MessageReceived+0x3a>
		FLAG_MSG = XBEE_UART_BUFFER[15];
 80028a8:	4613      	mov	r3, r2
 80028aa:	f992 200f 	ldrsb.w	r2, [r2, #15]
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b2:	e7ea      	b.n	800288a <uart2MessageReceived+0x3a>
 80028b4:	20000118 	.word	0x20000118
 80028b8:	20000ed8 	.word	0x20000ed8
 80028bc:	08003c34 	.word	0x08003c34
 80028c0:	20000ee7 	.word	0x20000ee7
 80028c4:	200010c4 	.word	0x200010c4

080028c8 <xbeePACKS_1>:

void xbeePACKS_1(void) {
 80028c8:	b510      	push	{r4, lr}
 80028ca:	b082      	sub	sp, #8
	/*Pack 1*/
	for (int i = ID_safety_pack1_1; i <= ID_safety_pack1_5; i++)
 80028cc:	f240 142d 	movw	r4, #301	; 0x12d
 80028d0:	e00c      	b.n	80028ec <xbeePACKS_1+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 80028d2:	4909      	ldr	r1, [pc, #36]	; (80028f8 <xbeePACKS_1+0x30>)
 80028d4:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 80028d8:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	8893      	ldrh	r3, [r2, #4]
 80028de:	8852      	ldrh	r2, [r2, #2]
 80028e0:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 80028e4:	4620      	mov	r0, r4
 80028e6:	f000 fb7b 	bl	8002fe0 <xbeeSend>
	for (int i = ID_safety_pack1_1; i <= ID_safety_pack1_5; i++)
 80028ea:	3401      	adds	r4, #1
 80028ec:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 80028f0:	dbef      	blt.n	80028d2 <xbeePACKS_1+0xa>
}
 80028f2:	b002      	add	sp, #8
 80028f4:	bd10      	pop	{r4, pc}
 80028f6:	bf00      	nop
 80028f8:	200001ac 	.word	0x200001ac

080028fc <xbeePACKS_2>:

void xbeePACKS_2(void) {
 80028fc:	b510      	push	{r4, lr}
 80028fe:	b082      	sub	sp, #8
	/*Pack 2*/
	for (int i = ID_safety_pack2_1; i <= ID_safety_pack2_5; i++)
 8002900:	f44f 7499 	mov.w	r4, #306	; 0x132
 8002904:	e00c      	b.n	8002920 <xbeePACKS_2+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8002906:	4909      	ldr	r1, [pc, #36]	; (800292c <xbeePACKS_2+0x30>)
 8002908:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 800290c:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	8893      	ldrh	r3, [r2, #4]
 8002912:	8852      	ldrh	r2, [r2, #2]
 8002914:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002918:	4620      	mov	r0, r4
 800291a:	f000 fb61 	bl	8002fe0 <xbeeSend>
	for (int i = ID_safety_pack2_1; i <= ID_safety_pack2_5; i++)
 800291e:	3401      	adds	r4, #1
 8002920:	f5b4 7f9b 	cmp.w	r4, #310	; 0x136
 8002924:	ddef      	ble.n	8002906 <xbeePACKS_2+0xa>
}
 8002926:	b002      	add	sp, #8
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	200001ac 	.word	0x200001ac

08002930 <xbeePACKS_3>:

void xbeePACKS_3(void) {
 8002930:	b510      	push	{r4, lr}
 8002932:	b082      	sub	sp, #8
	/*Pack 3*/
	for (int i = ID_safety_pack3_1; i <= ID_safety_pack3_5; i++)
 8002934:	f240 1437 	movw	r4, #311	; 0x137
 8002938:	e00c      	b.n	8002954 <xbeePACKS_3+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 800293a:	4909      	ldr	r1, [pc, #36]	; (8002960 <xbeePACKS_3+0x30>)
 800293c:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8002940:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	8893      	ldrh	r3, [r2, #4]
 8002946:	8852      	ldrh	r2, [r2, #2]
 8002948:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 800294c:	4620      	mov	r0, r4
 800294e:	f000 fb47 	bl	8002fe0 <xbeeSend>
	for (int i = ID_safety_pack3_1; i <= ID_safety_pack3_5; i++)
 8002952:	3401      	adds	r4, #1
 8002954:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 8002958:	dbef      	blt.n	800293a <xbeePACKS_3+0xa>
}
 800295a:	b002      	add	sp, #8
 800295c:	bd10      	pop	{r4, pc}
 800295e:	bf00      	nop
 8002960:	200001ac 	.word	0x200001ac

08002964 <xbeePACKS_4>:

void xbeePACKS_4(void) {
 8002964:	b510      	push	{r4, lr}
 8002966:	b082      	sub	sp, #8
	/*Pack 4*/
	for (int i = ID_safety_pack4_1; i <= ID_safety_pack4_5; i++)
 8002968:	f44f 749e 	mov.w	r4, #316	; 0x13c
 800296c:	e00c      	b.n	8002988 <xbeePACKS_4+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 800296e:	4909      	ldr	r1, [pc, #36]	; (8002994 <xbeePACKS_4+0x30>)
 8002970:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8002974:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	8893      	ldrh	r3, [r2, #4]
 800297a:	8852      	ldrh	r2, [r2, #2]
 800297c:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002980:	4620      	mov	r0, r4
 8002982:	f000 fb2d 	bl	8002fe0 <xbeeSend>
	for (int i = ID_safety_pack4_1; i <= ID_safety_pack4_5; i++)
 8002986:	3401      	adds	r4, #1
 8002988:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800298c:	ddef      	ble.n	800296e <xbeePACKS_4+0xa>
}
 800298e:	b002      	add	sp, #8
 8002990:	bd10      	pop	{r4, pc}
 8002992:	bf00      	nop
 8002994:	200001ac 	.word	0x200001ac

08002998 <xbeeGERAL>:

void xbeeGERAL(void) {
 8002998:	b530      	push	{r4, r5, lr}
 800299a:	b083      	sub	sp, #12
	/*GERAL*/
	xbeeSend(ID_safety_voltage, can_vector[ID_safety_voltage].word_0,
 800299c:	4c25      	ldr	r4, [pc, #148]	; (8002a34 <xbeeGERAL+0x9c>)
			can_vector[ID_safety_voltage].word_1, 0,
			can_vector[ID_safety_voltage].word_3);
 800299e:	f8b4 3716 	ldrh.w	r3, [r4, #1814]	; 0x716
	xbeeSend(ID_safety_voltage, can_vector[ID_safety_voltage].word_0,
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8b4 2712 	ldrh.w	r2, [r4, #1810]	; 0x712
 80029aa:	f8b4 1710 	ldrh.w	r1, [r4, #1808]	; 0x710
 80029ae:	20e2      	movs	r0, #226	; 0xe2
 80029b0:	f000 fb16 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_safety_bms, can_vector[ID_safety_bms].word_0, _ERRO_SEGURANCA,
 80029b4:	f8b4 5718 	ldrh.w	r5, [r4, #1816]	; 0x718
 80029b8:	f7ff fbb8 	bl	800212c <BMS_erro_bin_to_int>
 80029bc:	4602      	mov	r2, r0
			can_vector[ID_safety_bms].word_2, can_vector[ID_safety_bms].word_3);
 80029be:	f8b4 371e 	ldrh.w	r3, [r4, #1822]	; 0x71e
	xbeeSend(ID_safety_bms, can_vector[ID_safety_bms].word_0, _ERRO_SEGURANCA,
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	f8b4 371c 	ldrh.w	r3, [r4, #1820]	; 0x71c
 80029c8:	4629      	mov	r1, r5
 80029ca:	20e3      	movs	r0, #227	; 0xe3
 80029cc:	f000 fb08 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_safety_current, 0, can_vector[ID_safety_current].word_1, 0,
			can_vector[ID_safety_current].word_3);
 80029d0:	f8b4 3736 	ldrh.w	r3, [r4, #1846]	; 0x736
	xbeeSend(ID_safety_current, 0, can_vector[ID_safety_current].word_1, 0,
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8b4 2732 	ldrh.w	r2, [r4, #1842]	; 0x732
 80029dc:	4619      	mov	r1, r3
 80029de:	20e6      	movs	r0, #230	; 0xe6
 80029e0:	f000 fafe 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_safety_charge, can_vector[ID_safety_charge].word_0, 0, 0,
			can_vector[ID_safety_charge].word_3);
 80029e4:	f8b4 373e 	ldrh.w	r3, [r4, #1854]	; 0x73e
	xbeeSend(ID_safety_charge, can_vector[ID_safety_charge].word_0, 0, 0,
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	461a      	mov	r2, r3
 80029ee:	f8b4 1738 	ldrh.w	r1, [r4, #1848]	; 0x738
 80029f2:	20e7      	movs	r0, #231	; 0xe7
 80029f4:	f000 faf4 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_safety_soc, can_vector[ID_safety_soc].word_0, 0, 0, 0);
 80029f8:	2500      	movs	r5, #0
 80029fa:	9500      	str	r5, [sp, #0]
 80029fc:	462b      	mov	r3, r5
 80029fe:	462a      	mov	r2, r5
 8002a00:	f8b4 1740 	ldrh.w	r1, [r4, #1856]	; 0x740
 8002a04:	20e8      	movs	r0, #232	; 0xe8
 8002a06:	f000 faeb 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_control_speed_l_motor,
 8002a0a:	9500      	str	r5, [sp, #0]
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	f8b4 22aa 	ldrh.w	r2, [r4, #682]	; 0x2aa
 8002a12:	f8b4 12a8 	ldrh.w	r1, [r4, #680]	; 0x2a8
 8002a16:	2055      	movs	r0, #85	; 0x55
 8002a18:	f000 fae2 	bl	8002fe0 <xbeeSend>
			can_vector[ID_control_speed_l_motor].word_0,
			can_vector[ID_control_speed_l_motor].word_1, 0, 0);

	xbeeSend(ID_control_speed_r_motor,
 8002a1c:	9500      	str	r5, [sp, #0]
 8002a1e:	462b      	mov	r3, r5
 8002a20:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
 8002a24:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
 8002a28:	205f      	movs	r0, #95	; 0x5f
 8002a2a:	f000 fad9 	bl	8002fe0 <xbeeSend>
			can_vector[ID_control_speed_r_motor].word_0,
			can_vector[ID_control_speed_r_motor].word_1, 0, 0);
}
 8002a2e:	b003      	add	sp, #12
 8002a30:	bd30      	pop	{r4, r5, pc}
 8002a32:	bf00      	nop
 8002a34:	200001ac 	.word	0x200001ac

08002a38 <xbeeCONTROLE>:

void xbeeCONTROLE(void) {
 8002a38:	b530      	push	{r4, r5, lr}
 8002a3a:	b083      	sub	sp, #12
	/*CONTROLE*/
	xbeeSend(ID_control_accelerometer,
			can_vector[ID_control_accelerometer].word_0,
 8002a3c:	4c29      	ldr	r4, [pc, #164]	; (8002ae4 <xbeeCONTROLE+0xac>)
	xbeeSend(ID_control_accelerometer,
 8002a3e:	2500      	movs	r5, #0
 8002a40:	9500      	str	r5, [sp, #0]
 8002a42:	f8b4 391c 	ldrh.w	r3, [r4, #2332]	; 0x91c
 8002a46:	f8b4 291a 	ldrh.w	r2, [r4, #2330]	; 0x91a
 8002a4a:	f8b4 1918 	ldrh.w	r1, [r4, #2328]	; 0x918
 8002a4e:	f240 1023 	movw	r0, #291	; 0x123
 8002a52:	f000 fac5 	bl	8002fe0 <xbeeSend>
			can_vector[ID_control_accelerometer].word_1,
			can_vector[ID_control_accelerometer].word_2, 0);

	xbeeSend(ID_control_gyroscopic,
 8002a56:	9500      	str	r5, [sp, #0]
 8002a58:	f8b4 3924 	ldrh.w	r3, [r4, #2340]	; 0x924
 8002a5c:	f8b4 2922 	ldrh.w	r2, [r4, #2338]	; 0x922
 8002a60:	f8b4 1920 	ldrh.w	r1, [r4, #2336]	; 0x920
 8002a64:	f44f 7092 	mov.w	r0, #292	; 0x124
 8002a68:	f000 faba 	bl	8002fe0 <xbeeSend>
				can_vector[ID_control_gyroscopic].word_2, 0);

	xbeeSend(ID_control_speed_average, 0,
			can_vector[ID_control_speed_average].word_1,
			can_vector[ID_control_speed_average].word_2,
			can_vector[ID_control_speed_average].word_3);
 8002a6c:	f8b4 3266 	ldrh.w	r3, [r4, #614]	; 0x266
	xbeeSend(ID_control_speed_average, 0,
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f8b4 3264 	ldrh.w	r3, [r4, #612]	; 0x264
 8002a76:	f8b4 2262 	ldrh.w	r2, [r4, #610]	; 0x262
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	204c      	movs	r0, #76	; 0x4c
 8002a7e:	f000 faaf 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_control_hodometer, can_vector[ID_control_hodometer].word_0,
			can_vector[ID_control_hodometer].word_1,
			can_vector[ID_control_hodometer].word_2,
			can_vector[ID_control_hodometer].word_3);
 8002a82:	f8b4 326e 	ldrh.w	r3, [r4, #622]	; 0x26e
	xbeeSend(ID_control_hodometer, can_vector[ID_control_hodometer].word_0,
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
 8002a8c:	f8b4 226a 	ldrh.w	r2, [r4, #618]	; 0x26a
 8002a90:	f8b4 1268 	ldrh.w	r1, [r4, #616]	; 0x268
 8002a94:	204d      	movs	r0, #77	; 0x4d
 8002a96:	f000 faa3 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_control_torque_motor, _ERRO_CONTROLE, _ERRO_INVERSOR, 0, 0);
 8002a9a:	f7ff fb33 	bl	8002104 <ECU_erro_bin_to_int>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	9500      	str	r5, [sp, #0]
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	f8b4 2272 	ldrh.w	r2, [r4, #626]	; 0x272
 8002aa8:	204e      	movs	r0, #78	; 0x4e
 8002aaa:	f000 fa99 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_control_speed_wheel, can_vector[ID_control_speed_wheel].word_0,
			can_vector[ID_control_speed_wheel].word_1,
			can_vector[ID_control_speed_wheel].word_2,
			can_vector[ID_control_speed_wheel].word_3);
 8002aae:	f8b4 327e 	ldrh.w	r3, [r4, #638]	; 0x27e
	xbeeSend(ID_control_speed_wheel, can_vector[ID_control_speed_wheel].word_0,
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f8b4 327c 	ldrh.w	r3, [r4, #636]	; 0x27c
 8002ab8:	f8b4 227a 	ldrh.w	r2, [r4, #634]	; 0x27a
 8002abc:	f8b4 1278 	ldrh.w	r1, [r4, #632]	; 0x278
 8002ac0:	204f      	movs	r0, #79	; 0x4f
 8002ac2:	f000 fa8d 	bl	8002fe0 <xbeeSend>

	xbeeSend(ID_acquisition_brake, can_vector[ID_acquisition_brake].word_0,
				can_vector[ID_acquisition_brake].word_1,
				can_vector[ID_acquisition_brake].word_2,
				can_vector[ID_acquisition_brake].word_3);
 8002ac6:	f8b4 34c6 	ldrh.w	r3, [r4, #1222]	; 0x4c6
	xbeeSend(ID_acquisition_brake, can_vector[ID_acquisition_brake].word_0,
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f8b4 34c4 	ldrh.w	r3, [r4, #1220]	; 0x4c4
 8002ad0:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
 8002ad4:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
 8002ad8:	2098      	movs	r0, #152	; 0x98
 8002ada:	f000 fa81 	bl	8002fe0 <xbeeSend>
}
 8002ade:	b003      	add	sp, #12
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200001ac 	.word	0x200001ac

08002ae8 <TELEMETRY>:

void TELEMETRY() {
 8002ae8:	b508      	push	{r3, lr}
	switch (INFORMACAO) {
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <TELEMETRY+0x9c>)
 8002aec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002af0:	b18b      	cbz	r3, 8002b16 <TELEMETRY+0x2e>
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d016      	beq.n	8002b24 <TELEMETRY+0x3c>
		xbeeCONTROLE();
		INFORMACAO = PACKS;
		break;

	default:
		if (timer_wait_ms(informacaoTimeout, PACKS_Timer))
 8002af6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <TELEMETRY+0x9c>)
 8002afc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002afe:	f7ff fb57 	bl	80021b0 <timer_wait_ms>
 8002b02:	b1f0      	cbz	r0, 8002b42 <TELEMETRY+0x5a>
			switch (PACK) {
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <TELEMETRY+0xa0>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d819      	bhi.n	8002b42 <TELEMETRY+0x5a>
 8002b0e:	e8df f003 	tbb	[pc, r3]
 8002b12:	1d10      	.short	0x1d10
 8002b14:	2f26      	.short	0x2f26
		xbeeGERAL();
 8002b16:	f7ff ff3f 	bl	8002998 <xbeeGERAL>
		INFORMACAO = CONTROL;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <TELEMETRY+0x9c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
 8002b22:	e012      	b.n	8002b4a <TELEMETRY+0x62>
		xbeeCONTROLE();
 8002b24:	f7ff ff88 	bl	8002a38 <xbeeCONTROLE>
		INFORMACAO = PACKS;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <TELEMETRY+0x9c>)
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
 8002b30:	e00b      	b.n	8002b4a <TELEMETRY+0x62>
			case PACKS1:
				xbeePACKS_1();
 8002b32:	f7ff fec9 	bl	80028c8 <xbeePACKS_1>
				PACK = PACKS2;
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <TELEMETRY+0xa0>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8002b3c:	4813      	ldr	r0, [pc, #76]	; (8002b8c <TELEMETRY+0xa4>)
 8002b3e:	f7ff fb43 	bl	80021c8 <timer_restart>
			case PACKS4:
				xbeePACKS_4();
				PACK = PACKS1;
				timer_restart(&informacaoTimeout);
			}
		INFORMACAO = GERAL;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <TELEMETRY+0x9c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
	}
}
 8002b4a:	bd08      	pop	{r3, pc}
				xbeePACKS_2();
 8002b4c:	f7ff fed6 	bl	80028fc <xbeePACKS_2>
				PACK = PACKS3;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <TELEMETRY+0xa0>)
 8002b52:	2205      	movs	r2, #5
 8002b54:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8002b56:	480d      	ldr	r0, [pc, #52]	; (8002b8c <TELEMETRY+0xa4>)
 8002b58:	f7ff fb36 	bl	80021c8 <timer_restart>
				break;
 8002b5c:	e7f1      	b.n	8002b42 <TELEMETRY+0x5a>
				xbeePACKS_3();
 8002b5e:	f7ff fee7 	bl	8002930 <xbeePACKS_3>
				PACK = PACKS4;
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <TELEMETRY+0xa0>)
 8002b64:	2206      	movs	r2, #6
 8002b66:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8002b68:	4808      	ldr	r0, [pc, #32]	; (8002b8c <TELEMETRY+0xa4>)
 8002b6a:	f7ff fb2d 	bl	80021c8 <timer_restart>
				break;
 8002b6e:	e7e8      	b.n	8002b42 <TELEMETRY+0x5a>
				xbeePACKS_4();
 8002b70:	f7ff fef8 	bl	8002964 <xbeePACKS_4>
				PACK = PACKS1;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <TELEMETRY+0xa0>)
 8002b76:	2203      	movs	r2, #3
 8002b78:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8002b7a:	4804      	ldr	r0, [pc, #16]	; (8002b8c <TELEMETRY+0xa4>)
 8002b7c:	f7ff fb24 	bl	80021c8 <timer_restart>
 8002b80:	e7df      	b.n	8002b42 <TELEMETRY+0x5a>
 8002b82:	bf00      	nop
 8002b84:	20000ed8 	.word	0x20000ed8
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	20000f1c 	.word	0x20000f1c

08002b90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b90:	b500      	push	{lr}
 8002b92:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b94:	2300      	movs	r3, #0
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	9303      	str	r3, [sp, #12]
 8002b9a:	9304      	str	r3, [sp, #16]
 8002b9c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba2:	4814      	ldr	r0, [pc, #80]	; (8002bf4 <MX_TIM3_Init+0x64>)
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <MX_TIM3_Init+0x68>)
 8002ba6:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002ba8:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002baa:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb6:	f7fe fdc1 	bl	800173c <HAL_TIM_Base_Init>
 8002bba:	b990      	cbnz	r0, 8002be2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bc2:	a902      	add	r1, sp, #8
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <MX_TIM3_Init+0x64>)
 8002bc6:	f7fe fdf1 	bl	80017ac <HAL_TIM_ConfigClockSource>
 8002bca:	b968      	cbnz	r0, 8002be8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd2:	4669      	mov	r1, sp
 8002bd4:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <MX_TIM3_Init+0x64>)
 8002bd6:	f7fe fe57 	bl	8001888 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	b940      	cbnz	r0, 8002bee <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bdc:	b007      	add	sp, #28
 8002bde:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002be2:	f7ff fcc3 	bl	800256c <Error_Handler>
 8002be6:	e7e9      	b.n	8002bbc <MX_TIM3_Init+0x2c>
    Error_Handler();
 8002be8:	f7ff fcc0 	bl	800256c <Error_Handler>
 8002bec:	e7ee      	b.n	8002bcc <MX_TIM3_Init+0x3c>
    Error_Handler();
 8002bee:	f7ff fcbd 	bl	800256c <Error_Handler>
}
 8002bf2:	e7f3      	b.n	8002bdc <MX_TIM3_Init+0x4c>
 8002bf4:	20000f24 	.word	0x20000f24
 8002bf8:	40000400 	.word	0x40000400

08002bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_TIM_Base_MspInit+0x28>)
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d000      	beq.n	8002c06 <HAL_TIM_Base_MspInit+0xa>
 8002c04:	4770      	bx	lr
{
 8002c06:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c08:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	f042 0202 	orr.w	r2, r2, #2
 8002c12:	61da      	str	r2, [r3, #28]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c1e:	b002      	add	sp, #8
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40000400 	.word	0x40000400

08002c28 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c28:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c2a:	480a      	ldr	r0, [pc, #40]	; (8002c54 <MX_USART2_UART_Init+0x2c>)
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <MX_USART2_UART_Init+0x30>)
 8002c2e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002c30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c34:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	2300      	movs	r3, #0
 8002c38:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c3a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c3c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c3e:	220c      	movs	r2, #12
 8002c40:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c44:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c46:	f7fe ff27 	bl	8001a98 <HAL_UART_Init>
 8002c4a:	b900      	cbnz	r0, 8002c4e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002c4e:	f7ff fc8d 	bl	800256c <Error_Handler>
}
 8002c52:	e7fb      	b.n	8002c4c <MX_USART2_UART_Init+0x24>
 8002c54:	20000f6c 	.word	0x20000f6c
 8002c58:	40004400 	.word	0x40004400

08002c5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c5c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c5e:	480b      	ldr	r0, [pc, #44]	; (8002c8c <MX_USART3_UART_Init+0x30>)
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_USART3_UART_Init+0x34>)
 8002c62:	6443      	str	r3, [r0, #68]	; 0x44
  huart3.Init.BaudRate = 115200;
 8002c64:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c68:	6483      	str	r3, [r0, #72]	; 0x48
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	64c3      	str	r3, [r0, #76]	; 0x4c
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c6e:	6503      	str	r3, [r0, #80]	; 0x50
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c70:	6543      	str	r3, [r0, #84]	; 0x54
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c72:	220c      	movs	r2, #12
 8002c74:	6582      	str	r2, [r0, #88]	; 0x58
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	65c3      	str	r3, [r0, #92]	; 0x5c
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c7a:	3044      	adds	r0, #68	; 0x44
 8002c7c:	f7fe ff0c 	bl	8001a98 <HAL_UART_Init>
 8002c80:	b900      	cbnz	r0, 8002c84 <MX_USART3_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002c84:	f7ff fc72 	bl	800256c <Error_Handler>
}
 8002c88:	e7fb      	b.n	8002c82 <MX_USART3_UART_Init+0x26>
 8002c8a:	bf00      	nop
 8002c8c:	20000f6c 	.word	0x20000f6c
 8002c90:	40004800 	.word	0x40004800

08002c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	9305      	str	r3, [sp, #20]
 8002ca0:	9306      	str	r3, [sp, #24]
 8002ca2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_UART_MspInit+0x1b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002cac:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_UART_MspInit+0x1b4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d051      	beq.n	8002d56 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cb2:	b008      	add	sp, #32
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_UART_MspInit+0x1b8>)
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	f042 0204 	orr.w	r2, r2, #4
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_XBee_Pin;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART2_TX_XBee_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	4e59      	ldr	r6, [pc, #356]	; (8002e50 <HAL_UART_MspInit+0x1bc>)
 8002cea:	a904      	add	r1, sp, #16
 8002cec:	4630      	mov	r0, r6
 8002cee:	f7fd ffdd 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RX_XBee_Pin;
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART2_RX_XBee_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	a904      	add	r1, sp, #16
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f7fd ffd4 	bl	8000cac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002d04:	4853      	ldr	r0, [pc, #332]	; (8002e54 <HAL_UART_MspInit+0x1c0>)
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_UART_MspInit+0x1c4>)
 8002d08:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1a:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1e:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d22:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d26:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d2a:	3088      	adds	r0, #136	; 0x88
 8002d2c:	f7fd fe3e 	bl	80009ac <HAL_DMA_Init>
 8002d30:	b970      	cbnz	r0, 8002d50 <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d32:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_UART_MspInit+0x1c0>)
 8002d34:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002d38:	63a2      	str	r2, [r4, #56]	; 0x38
 8002d3a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4611      	mov	r1, r2
 8002d42:	2026      	movs	r0, #38	; 0x26
 8002d44:	f7fd fdc2 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d48:	2026      	movs	r0, #38	; 0x26
 8002d4a:	f7fd fdf7 	bl	800093c <HAL_NVIC_EnableIRQ>
 8002d4e:	e7b0      	b.n	8002cb2 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8002d50:	f7ff fc0c 	bl	800256c <Error_Handler>
 8002d54:	e7ed      	b.n	8002d32 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_UART_MspInit+0x1b8>)
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d5e:	61da      	str	r2, [r3, #28]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002d66:	9202      	str	r2, [sp, #8]
 8002d68:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_LCD_Pin;
 8002d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART3_TX_LCD_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	4e34      	ldr	r6, [pc, #208]	; (8002e5c <HAL_UART_MspInit+0x1c8>)
 8002d8c:	a904      	add	r1, sp, #16
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f7fd ff8c 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_LCD_Pin;
 8002d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART3_RX_LCD_GPIO_Port, &GPIO_InitStruct);
 8002da0:	a904      	add	r1, sp, #16
 8002da2:	4630      	mov	r0, r6
 8002da4:	f7fd ff82 	bl	8000cac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002da8:	482a      	ldr	r0, [pc, #168]	; (8002e54 <HAL_UART_MspInit+0x1c0>)
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_UART_MspInit+0x1cc>)
 8002dac:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db0:	f8c0 50d0 	str.w	r5, [r0, #208]	; 0xd0
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db4:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dbe:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc2:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002dc6:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dce:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002dd2:	30cc      	adds	r0, #204	; 0xcc
 8002dd4:	f7fd fdea 	bl	80009ac <HAL_DMA_Init>
 8002dd8:	bb68      	cbnz	r0, 8002e36 <HAL_UART_MspInit+0x1a2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002dda:	481e      	ldr	r0, [pc, #120]	; (8002e54 <HAL_UART_MspInit+0x1c0>)
 8002ddc:	f100 03cc 	add.w	r3, r0, #204	; 0xcc
 8002de0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002de2:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_UART_MspInit+0x1d0>)
 8002de8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dec:	2310      	movs	r3, #16
 8002dee:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dfe:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e02:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e06:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e0a:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e0e:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8002e12:	f7fd fdcb 	bl	80009ac <HAL_DMA_Init>
 8002e16:	b988      	cbnz	r0, 8002e3c <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_UART_MspInit+0x1c0>)
 8002e1a:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8002e1e:	6362      	str	r2, [r4, #52]	; 0x34
 8002e20:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	4611      	mov	r1, r2
 8002e28:	2027      	movs	r0, #39	; 0x27
 8002e2a:	f7fd fd4f 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e2e:	2027      	movs	r0, #39	; 0x27
 8002e30:	f7fd fd84 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 8002e34:	e73d      	b.n	8002cb2 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8002e36:	f7ff fb99 	bl	800256c <Error_Handler>
 8002e3a:	e7ce      	b.n	8002dda <HAL_UART_MspInit+0x146>
      Error_Handler();
 8002e3c:	f7ff fb96 	bl	800256c <Error_Handler>
 8002e40:	e7ea      	b.n	8002e18 <HAL_UART_MspInit+0x184>
 8002e42:	bf00      	nop
 8002e44:	40004400 	.word	0x40004400
 8002e48:	40004800 	.word	0x40004800
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010800 	.word	0x40010800
 8002e54:	20000f6c 	.word	0x20000f6c
 8002e58:	4002006c 	.word	0x4002006c
 8002e5c:	40010c00 	.word	0x40010c00
 8002e60:	40020030 	.word	0x40020030
 8002e64:	4002001c 	.word	0x4002001c

08002e68 <xbeeApiModeSend>:
#include "xbee.h"

SendMode_e mode = BYTES_API;
uint32_t timer_actual_uart = 0;

uint8_t xbeeApiModeSend(char *xbeeBuffer, int buff_size) {
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
	/*Send chars through UART (Max 255 chars)*/
	/*Frame with specified address*/
	unsigned  char api_start = '\x7E';
 8002e70:	237e      	movs	r3, #126	; 0x7e
 8002e72:	f88d 301f 	strb.w	r3, [sp, #31]
	unsigned char api_frame_type = '\x10';
 8002e76:	2310      	movs	r3, #16
 8002e78:	f88d 301e 	strb.w	r3, [sp, #30]
	unsigned char api_frame_id = '\x00'; /* No response is requested */
 8002e7c:	2700      	movs	r7, #0
 8002e7e:	f88d 701d 	strb.w	r7, [sp, #29]
	unsigned char api_dest_address_64b[9] = "\x00\x00\x00\x00\x00\x00\xFF\xFF";
 8002e82:	4e53      	ldr	r6, [pc, #332]	; (8002fd0 <xbeeApiModeSend+0x168>)
 8002e84:	ab05      	add	r3, sp, #20
 8002e86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002e8a:	c303      	stmia	r3!, {r0, r1}
 8002e8c:	701a      	strb	r2, [r3, #0]
	unsigned char api_dest_address_16b[3] = "\x00\x00";
 8002e8e:	68f3      	ldr	r3, [r6, #12]
 8002e90:	f8ad 3010 	strh.w	r3, [sp, #16]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f88d 3012 	strb.w	r3, [sp, #18]
	unsigned char api_broad_radius = '\x00';
 8002e9a:	f88d 700f 	strb.w	r7, [sp, #15]
	unsigned char api_options = '\x40';
 8002e9e:	2340      	movs	r3, #64	; 0x40
 8002ea0:	f88d 300e 	strb.w	r3, [sp, #14]

	/*Aux variables*/
	int i, length_0;

	/*If the buff size is larger than 255, return 'fail'*/
	if (buff_size > 255)
 8002ea4:	2cff      	cmp	r4, #255	; 0xff
 8002ea6:	f300 8091 	bgt.w	8002fcc <xbeeApiModeSend+0x164>
		return 0;
	length = buff_size + 14; /*The frame length is 14 bytes + msg size*/
 8002eaa:	f104 060e 	add.w	r6, r4, #14

	/*Checksum calc step by step*/
	checksum = api_frame_type + api_frame_id; /*Sum 'type' and 'ID'*/
 8002eae:	2310      	movs	r3, #16
 8002eb0:	9302      	str	r3, [sp, #8]
	for (i = 0; i < 8; i++)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	e008      	b.n	8002ec8 <xbeeApiModeSend+0x60>
		checksum += api_dest_address_64b[i]; /*Sum the 64b address*/
 8002eb6:	f103 0220 	add.w	r2, r3, #32
 8002eba:	446a      	add	r2, sp
 8002ebc:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8002ec0:	9a02      	ldr	r2, [sp, #8]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 8; i++)
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	2b07      	cmp	r3, #7
 8002eca:	ddf4      	ble.n	8002eb6 <xbeeApiModeSend+0x4e>
	for (i = 0; i < 2; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e008      	b.n	8002ee2 <xbeeApiModeSend+0x7a>
		checksum += api_dest_address_16b[i]; /*Sum the 16b address*/
 8002ed0:	f103 0220 	add.w	r2, r3, #32
 8002ed4:	446a      	add	r2, sp
 8002ed6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8002eda:	9a02      	ldr	r2, [sp, #8]
 8002edc:	440a      	add	r2, r1
 8002ede:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 2; i++)
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	ddf4      	ble.n	8002ed0 <xbeeApiModeSend+0x68>
	checksum += api_broad_radius + api_options; /*Sum 'BroadcastRadius' and 'options'*/
 8002ee6:	9b02      	ldr	r3, [sp, #8]
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	9302      	str	r3, [sp, #8]
	for (i = 0; i < buff_size; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	e004      	b.n	8002efa <xbeeApiModeSend+0x92>
		checksum += (int) xbeeBuffer[i]; /*Sum the message*/
 8002ef0:	5ce9      	ldrb	r1, [r5, r3]
 8002ef2:	9a02      	ldr	r2, [sp, #8]
 8002ef4:	440a      	add	r2, r1
 8002ef6:	9202      	str	r2, [sp, #8]
	for (i = 0; i < buff_size; i++)
 8002ef8:	3301      	adds	r3, #1
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	dbf8      	blt.n	8002ef0 <xbeeApiModeSend+0x88>
	checksum = checksum & 0xFF; /*keep only the lowest 8 bits*/
 8002efe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002f02:	9302      	str	r3, [sp, #8]
	checksum = 255 - checksum; /*Negate it and get checksum*/
 8002f04:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002f08:	9302      	str	r3, [sp, #8]


	/*Send message to ALL ID's*/

	HAL_UART_Transmit(&huart2, &api_start, 1, 100); /*Send 'start*/
 8002f0a:	4f32      	ldr	r7, [pc, #200]	; (8002fd4 <xbeeApiModeSend+0x16c>)
 8002f0c:	2364      	movs	r3, #100	; 0x64
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f10d 011f 	add.w	r1, sp, #31
 8002f14:	4638      	mov	r0, r7
 8002f16:	f7fe fdee 	bl	8001af6 <HAL_UART_Transmit>
	length_0 = 0xFF00 & length;
 8002f1a:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8002f1e:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart2, &length_0, 1, 100); /*Send 'length' first byte*/
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	2201      	movs	r2, #1
 8002f24:	a901      	add	r1, sp, #4
 8002f26:	4638      	mov	r0, r7
 8002f28:	f7fe fde5 	bl	8001af6 <HAL_UART_Transmit>
	length_0 = 0xFF & length;
 8002f2c:	b2f6      	uxtb	r6, r6
 8002f2e:	9601      	str	r6, [sp, #4]
	HAL_UART_Transmit(&huart2, &length_0, 1, 100); /*Send 'length' second byte*/
 8002f30:	2364      	movs	r3, #100	; 0x64
 8002f32:	2201      	movs	r2, #1
 8002f34:	a901      	add	r1, sp, #4
 8002f36:	4638      	mov	r0, r7
 8002f38:	f7fe fddd 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_type, 1, 100); /*Send 'freme type'*/
 8002f3c:	2364      	movs	r3, #100	; 0x64
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f10d 011e 	add.w	r1, sp, #30
 8002f44:	4638      	mov	r0, r7
 8002f46:	f7fe fdd6 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_id, 1, 100); /*Send 'freme id'*/
 8002f4a:	2364      	movs	r3, #100	; 0x64
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f10d 011d 	add.w	r1, sp, #29
 8002f52:	4638      	mov	r0, r7
 8002f54:	f7fe fdcf 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_64b, 8, 100); /*Send '64b address'*/
 8002f58:	2364      	movs	r3, #100	; 0x64
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	a905      	add	r1, sp, #20
 8002f5e:	4638      	mov	r0, r7
 8002f60:	f7fe fdc9 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_16b, 2, 100); /*Send '16b address'*/
 8002f64:	2364      	movs	r3, #100	; 0x64
 8002f66:	2202      	movs	r2, #2
 8002f68:	a904      	add	r1, sp, #16
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f7fe fdc3 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_broad_radius, 1, 100); /*Send 'freme type'*/
 8002f70:	2364      	movs	r3, #100	; 0x64
 8002f72:	2201      	movs	r2, #1
 8002f74:	f10d 010f 	add.w	r1, sp, #15
 8002f78:	4638      	mov	r0, r7
 8002f7a:	f7fe fdbc 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_options, 1, 100); /*Send 'options'*/
 8002f7e:	2364      	movs	r3, #100	; 0x64
 8002f80:	2201      	movs	r2, #1
 8002f82:	f10d 010e 	add.w	r1, sp, #14
 8002f86:	4638      	mov	r0, r7
 8002f88:	f7fe fdb5 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, xbeeBuffer, buff_size, 100); /*Send the message*/
 8002f8c:	2364      	movs	r3, #100	; 0x64
 8002f8e:	b2a2      	uxth	r2, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	4638      	mov	r0, r7
 8002f94:	f7fe fdaf 	bl	8001af6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &checksum, 1, 100); /*Send 'checksum'*/
 8002f98:	2364      	movs	r3, #100	; 0x64
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	a902      	add	r1, sp, #8
 8002f9e:	4638      	mov	r0, r7
 8002fa0:	f7fe fda9 	bl	8001af6 <HAL_UART_Transmit>

	/*Reflesh the whatchDog*/

	if (HAL_GetTick() - timer_actual_uart > 60) {
 8002fa4:	f7fd f91c 	bl	80001e0 <HAL_GetTick>
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <xbeeApiModeSend+0x170>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1ac0      	subs	r0, r0, r3
 8002fae:	283c      	cmp	r0, #60	; 0x3c
 8002fb0:	d802      	bhi.n	8002fb8 <xbeeApiModeSend+0x150>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
		timer_actual_uart = HAL_GetTick();
	}
	return 1; /*Return 'success'*/
 8002fb2:	2001      	movs	r0, #1
}
 8002fb4:	b009      	add	sp, #36	; 0x24
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4808      	ldr	r0, [pc, #32]	; (8002fdc <xbeeApiModeSend+0x174>)
 8002fbc:	f7fd ff8e 	bl	8000edc <HAL_GPIO_TogglePin>
		timer_actual_uart = HAL_GetTick();
 8002fc0:	f7fd f90e 	bl	80001e0 <HAL_GetTick>
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <xbeeApiModeSend+0x170>)
 8002fc6:	6018      	str	r0, [r3, #0]
	return 1; /*Return 'success'*/
 8002fc8:	2001      	movs	r0, #1
 8002fca:	e7f3      	b.n	8002fb4 <xbeeApiModeSend+0x14c>
		return 0;
 8002fcc:	2000      	movs	r0, #0
 8002fce:	e7f1      	b.n	8002fb4 <xbeeApiModeSend+0x14c>
 8002fd0:	08003ab4 	.word	0x08003ab4
 8002fd4:	20000f6c 	.word	0x20000f6c
 8002fd8:	200010c0 	.word	0x200010c0
 8002fdc:	40010800 	.word	0x40010800

08002fe0 <xbeeSend>:

void xbeeSend(int id, ...) {
 8002fe0:	b40f      	push	{r0, r1, r2, r3}
 8002fe2:	b500      	push	{lr}
 8002fe4:	b0a9      	sub	sp, #164	; 0xa4
 8002fe6:	ab2a      	add	r3, sp, #168	; 0xa8
 8002fe8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	va_start(args, id);
 8002fec:	9327      	str	r3, [sp, #156]	; 0x9c

	uint16_t data_word[4];

	for (int i = 0; i < 4; i++) {
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e009      	b.n	8003006 <xbeeSend+0x26>
		data_word[i] = (uint16_t) va_arg(args, int);
 8002ff2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8002ff4:	1d08      	adds	r0, r1, #4
 8002ff6:	9027      	str	r0, [sp, #156]	; 0x9c
 8002ff8:	8808      	ldrh	r0, [r1, #0]
 8002ffa:	a928      	add	r1, sp, #160	; 0xa0
 8002ffc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003000:	f821 0c0c 	strh.w	r0, [r1, #-12]
	for (int i = 0; i < 4; i++) {
 8003004:	3301      	adds	r3, #1
 8003006:	2b03      	cmp	r3, #3
 8003008:	ddf3      	ble.n	8002ff2 <xbeeSend+0x12>
	}
	va_end(args);

	uint8_t xbeeBuffer[128];
	int len;
	switch (mode) {
 800300a:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <xbeeSend+0xe0>)
 800300c:	791b      	ldrb	r3, [r3, #4]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d812      	bhi.n	8003038 <xbeeSend+0x58>
 8003012:	e8df f003 	tbb	[pc, r3]
 8003016:	1602      	.short	0x1602
 8003018:	402a      	.short	0x402a
	case BYTES_API:
		xbeeBuffer[0] = (id);
 800301a:	f88d 2014 	strb.w	r2, [sp, #20]
		xbeeBuffer[1] = (id >> 8);
 800301e:	1212      	asrs	r2, r2, #8
 8003020:	f88d 2015 	strb.w	r2, [sp, #21]
		memcpy(xbeeBuffer + 2, data_word, 8);
 8003024:	ab25      	add	r3, sp, #148	; 0x94
 8003026:	cb03      	ldmia	r3!, {r0, r1}
 8003028:	f8cd 0016 	str.w	r0, [sp, #22]
 800302c:	f8cd 101a 	str.w	r1, [sp, #26]
		len = 10;
		xbeeApiModeSend(xbeeBuffer, len);
 8003030:	210a      	movs	r1, #10
 8003032:	a805      	add	r0, sp, #20
 8003034:	f7ff ff18 	bl	8002e68 <xbeeApiModeSend>
		memcpy(xbeeBuffer + 10, '\n', 1);
		HAL_UART_Transmit(&huart3, xbeeBuffer, 11, 100);
	}

//	HAL_Delay(DELAY_XBEE);
}
 8003038:	b029      	add	sp, #164	; 0xa4
 800303a:	f85d eb04 	ldr.w	lr, [sp], #4
 800303e:	b004      	add	sp, #16
 8003040:	4770      	bx	lr
				data_word[1], data_word[2], data_word[3]);
 8003042:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 8003046:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800304a:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u", id, data_word[0],
 800304e:	9002      	str	r0, [sp, #8]
 8003050:	9101      	str	r1, [sp, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8003058:	491a      	ldr	r1, [pc, #104]	; (80030c4 <xbeeSend+0xe4>)
 800305a:	a805      	add	r0, sp, #20
 800305c:	f000 f88a 	bl	8003174 <siprintf>
 8003060:	4601      	mov	r1, r0
		xbeeApiModeSend(xbeeBuffer, len);
 8003062:	a805      	add	r0, sp, #20
 8003064:	f7ff ff00 	bl	8002e68 <xbeeApiModeSend>
		break;
 8003068:	e7e6      	b.n	8003038 <xbeeSend+0x58>
				data_word[1], data_word[2], data_word[3]);
 800306a:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 800306e:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8003072:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u\n", id, data_word[0],
 8003076:	9002      	str	r0, [sp, #8]
 8003078:	9101      	str	r1, [sp, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8003080:	4911      	ldr	r1, [pc, #68]	; (80030c8 <xbeeSend+0xe8>)
 8003082:	a805      	add	r0, sp, #20
 8003084:	f000 f876 	bl	8003174 <siprintf>
		HAL_UART_Transmit(&huart3, xbeeBuffer, len, 100);
 8003088:	2364      	movs	r3, #100	; 0x64
 800308a:	b282      	uxth	r2, r0
 800308c:	a905      	add	r1, sp, #20
 800308e:	480f      	ldr	r0, [pc, #60]	; (80030cc <xbeeSend+0xec>)
 8003090:	f7fe fd31 	bl	8001af6 <HAL_UART_Transmit>
		break;
 8003094:	e7d0      	b.n	8003038 <xbeeSend+0x58>
		memcpy(xbeeBuffer, id, sizeof(uint16_t));
 8003096:	8813      	ldrh	r3, [r2, #0]
 8003098:	f8ad 3014 	strh.w	r3, [sp, #20]
		memcpy(xbeeBuffer + 2, data_word, sizeof(uint16_t) * 4);
 800309c:	ab25      	add	r3, sp, #148	; 0x94
 800309e:	cb03      	ldmia	r3!, {r0, r1}
 80030a0:	f8cd 0016 	str.w	r0, [sp, #22]
 80030a4:	f8cd 101a 	str.w	r1, [sp, #26]
		memcpy(xbeeBuffer + 10, '\n', 1);
 80030a8:	2300      	movs	r3, #0
 80030aa:	7a9b      	ldrb	r3, [r3, #10]
 80030ac:	f88d 301e 	strb.w	r3, [sp, #30]
		HAL_UART_Transmit(&huart3, xbeeBuffer, 11, 100);
 80030b0:	2364      	movs	r3, #100	; 0x64
 80030b2:	220b      	movs	r2, #11
 80030b4:	a905      	add	r1, sp, #20
 80030b6:	4805      	ldr	r0, [pc, #20]	; (80030cc <xbeeSend+0xec>)
 80030b8:	f7fe fd1d 	bl	8001af6 <HAL_UART_Transmit>
}
 80030bc:	e7bc      	b.n	8003038 <xbeeSend+0x58>
 80030be:	bf00      	nop
 80030c0:	200010c0 	.word	0x200010c0
 80030c4:	08003c3c 	.word	0x08003c3c
 80030c8:	08003c4c 	.word	0x08003c4c
 80030cc:	20000fb0 	.word	0x20000fb0

080030d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030d2:	e003      	b.n	80030dc <LoopCopyDataInit>

080030d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030da:	3104      	adds	r1, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030dc:	480a      	ldr	r0, [pc, #40]	; (8003108 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030e4:	d3f6      	bcc.n	80030d4 <CopyDataInit>
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030e8:	e002      	b.n	80030f0 <LoopFillZerobss>

080030ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030ec:	f842 3b04 	str.w	r3, [r2], #4

080030f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030f4:	d3f9      	bcc.n	80030ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030f6:	f7ff fb75 	bl	80027e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fa:	f000 f80f 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030fe:	f7ff fa19 	bl	8002534 <main>
  bx lr
 8003102:	4770      	bx	lr
  ldr r3, =_sidata
 8003104:	08003c98 	.word	0x08003c98
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800310c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003110:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003114:	200010dc 	.word	0x200010dc

08003118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_2_IRQHandler>
	...

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	2600      	movs	r6, #0
 8003120:	4d0c      	ldr	r5, [pc, #48]	; (8003154 <__libc_init_array+0x38>)
 8003122:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003124:	1b64      	subs	r4, r4, r5
 8003126:	10a4      	asrs	r4, r4, #2
 8003128:	42a6      	cmp	r6, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	f000 fcaa 	bl	8003a84 <_init>
 8003130:	2600      	movs	r6, #0
 8003132:	4d0a      	ldr	r5, [pc, #40]	; (800315c <__libc_init_array+0x40>)
 8003134:	4c0a      	ldr	r4, [pc, #40]	; (8003160 <__libc_init_array+0x44>)
 8003136:	1b64      	subs	r4, r4, r5
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	42a6      	cmp	r6, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f855 3b04 	ldr.w	r3, [r5], #4
 8003144:	4798      	blx	r3
 8003146:	3601      	adds	r6, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f855 3b04 	ldr.w	r3, [r5], #4
 800314e:	4798      	blx	r3
 8003150:	3601      	adds	r6, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	08003c90 	.word	0x08003c90
 8003158:	08003c90 	.word	0x08003c90
 800315c:	08003c90 	.word	0x08003c90
 8003160:	08003c94 	.word	0x08003c94

08003164 <memset>:
 8003164:	4603      	mov	r3, r0
 8003166:	4402      	add	r2, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <siprintf>:
 8003174:	b40e      	push	{r1, r2, r3}
 8003176:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800317a:	b500      	push	{lr}
 800317c:	b09c      	sub	sp, #112	; 0x70
 800317e:	ab1d      	add	r3, sp, #116	; 0x74
 8003180:	9002      	str	r0, [sp, #8]
 8003182:	9006      	str	r0, [sp, #24]
 8003184:	9107      	str	r1, [sp, #28]
 8003186:	9104      	str	r1, [sp, #16]
 8003188:	4808      	ldr	r0, [pc, #32]	; (80031ac <siprintf+0x38>)
 800318a:	4909      	ldr	r1, [pc, #36]	; (80031b0 <siprintf+0x3c>)
 800318c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003190:	9105      	str	r1, [sp, #20]
 8003192:	6800      	ldr	r0, [r0, #0]
 8003194:	a902      	add	r1, sp, #8
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	f000 f868 	bl	800326c <_svfiprintf_r>
 800319c:	2200      	movs	r2, #0
 800319e:	9b02      	ldr	r3, [sp, #8]
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	b01c      	add	sp, #112	; 0x70
 80031a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a8:	b003      	add	sp, #12
 80031aa:	4770      	bx	lr
 80031ac:	20000014 	.word	0x20000014
 80031b0:	ffff0208 	.word	0xffff0208

080031b4 <__ssputs_r>:
 80031b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b8:	688e      	ldr	r6, [r1, #8]
 80031ba:	4682      	mov	sl, r0
 80031bc:	429e      	cmp	r6, r3
 80031be:	460c      	mov	r4, r1
 80031c0:	4690      	mov	r8, r2
 80031c2:	461f      	mov	r7, r3
 80031c4:	d838      	bhi.n	8003238 <__ssputs_r+0x84>
 80031c6:	898a      	ldrh	r2, [r1, #12]
 80031c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031cc:	d032      	beq.n	8003234 <__ssputs_r+0x80>
 80031ce:	6825      	ldr	r5, [r4, #0]
 80031d0:	6909      	ldr	r1, [r1, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	eba5 0901 	sub.w	r9, r5, r1
 80031d8:	6965      	ldr	r5, [r4, #20]
 80031da:	444b      	add	r3, r9
 80031dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031e4:	106d      	asrs	r5, r5, #1
 80031e6:	429d      	cmp	r5, r3
 80031e8:	bf38      	it	cc
 80031ea:	461d      	movcc	r5, r3
 80031ec:	0553      	lsls	r3, r2, #21
 80031ee:	d531      	bpl.n	8003254 <__ssputs_r+0xa0>
 80031f0:	4629      	mov	r1, r5
 80031f2:	f000 fb6f 	bl	80038d4 <_malloc_r>
 80031f6:	4606      	mov	r6, r0
 80031f8:	b950      	cbnz	r0, 8003210 <__ssputs_r+0x5c>
 80031fa:	230c      	movs	r3, #12
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f8ca 3000 	str.w	r3, [sl]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003210:	464a      	mov	r2, r9
 8003212:	6921      	ldr	r1, [r4, #16]
 8003214:	f000 face 	bl	80037b4 <memcpy>
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	81a3      	strh	r3, [r4, #12]
 8003224:	6126      	str	r6, [r4, #16]
 8003226:	444e      	add	r6, r9
 8003228:	6026      	str	r6, [r4, #0]
 800322a:	463e      	mov	r6, r7
 800322c:	6165      	str	r5, [r4, #20]
 800322e:	eba5 0509 	sub.w	r5, r5, r9
 8003232:	60a5      	str	r5, [r4, #8]
 8003234:	42be      	cmp	r6, r7
 8003236:	d900      	bls.n	800323a <__ssputs_r+0x86>
 8003238:	463e      	mov	r6, r7
 800323a:	4632      	mov	r2, r6
 800323c:	4641      	mov	r1, r8
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f000 fac6 	bl	80037d0 <memmove>
 8003244:	68a3      	ldr	r3, [r4, #8]
 8003246:	2000      	movs	r0, #0
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	4433      	add	r3, r6
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	e7db      	b.n	800320c <__ssputs_r+0x58>
 8003254:	462a      	mov	r2, r5
 8003256:	f000 fbb1 	bl	80039bc <_realloc_r>
 800325a:	4606      	mov	r6, r0
 800325c:	2800      	cmp	r0, #0
 800325e:	d1e1      	bne.n	8003224 <__ssputs_r+0x70>
 8003260:	4650      	mov	r0, sl
 8003262:	6921      	ldr	r1, [r4, #16]
 8003264:	f000 face 	bl	8003804 <_free_r>
 8003268:	e7c7      	b.n	80031fa <__ssputs_r+0x46>
	...

0800326c <_svfiprintf_r>:
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	4698      	mov	r8, r3
 8003272:	898b      	ldrh	r3, [r1, #12]
 8003274:	4607      	mov	r7, r0
 8003276:	061b      	lsls	r3, r3, #24
 8003278:	460d      	mov	r5, r1
 800327a:	4614      	mov	r4, r2
 800327c:	b09d      	sub	sp, #116	; 0x74
 800327e:	d50e      	bpl.n	800329e <_svfiprintf_r+0x32>
 8003280:	690b      	ldr	r3, [r1, #16]
 8003282:	b963      	cbnz	r3, 800329e <_svfiprintf_r+0x32>
 8003284:	2140      	movs	r1, #64	; 0x40
 8003286:	f000 fb25 	bl	80038d4 <_malloc_r>
 800328a:	6028      	str	r0, [r5, #0]
 800328c:	6128      	str	r0, [r5, #16]
 800328e:	b920      	cbnz	r0, 800329a <_svfiprintf_r+0x2e>
 8003290:	230c      	movs	r3, #12
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	e0d1      	b.n	800343e <_svfiprintf_r+0x1d2>
 800329a:	2340      	movs	r3, #64	; 0x40
 800329c:	616b      	str	r3, [r5, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	2320      	movs	r3, #32
 80032a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032a8:	2330      	movs	r3, #48	; 0x30
 80032aa:	f04f 0901 	mov.w	r9, #1
 80032ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003458 <_svfiprintf_r+0x1ec>
 80032b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032ba:	4623      	mov	r3, r4
 80032bc:	469a      	mov	sl, r3
 80032be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032c2:	b10a      	cbz	r2, 80032c8 <_svfiprintf_r+0x5c>
 80032c4:	2a25      	cmp	r2, #37	; 0x25
 80032c6:	d1f9      	bne.n	80032bc <_svfiprintf_r+0x50>
 80032c8:	ebba 0b04 	subs.w	fp, sl, r4
 80032cc:	d00b      	beq.n	80032e6 <_svfiprintf_r+0x7a>
 80032ce:	465b      	mov	r3, fp
 80032d0:	4622      	mov	r2, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	4638      	mov	r0, r7
 80032d6:	f7ff ff6d 	bl	80031b4 <__ssputs_r>
 80032da:	3001      	adds	r0, #1
 80032dc:	f000 80aa 	beq.w	8003434 <_svfiprintf_r+0x1c8>
 80032e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032e2:	445a      	add	r2, fp
 80032e4:	9209      	str	r2, [sp, #36]	; 0x24
 80032e6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a2 	beq.w	8003434 <_svfiprintf_r+0x1c8>
 80032f0:	2300      	movs	r3, #0
 80032f2:	f04f 32ff 	mov.w	r2, #4294967295
 80032f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032fa:	f10a 0a01 	add.w	sl, sl, #1
 80032fe:	9304      	str	r3, [sp, #16]
 8003300:	9307      	str	r3, [sp, #28]
 8003302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003306:	931a      	str	r3, [sp, #104]	; 0x68
 8003308:	4654      	mov	r4, sl
 800330a:	2205      	movs	r2, #5
 800330c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003310:	4851      	ldr	r0, [pc, #324]	; (8003458 <_svfiprintf_r+0x1ec>)
 8003312:	f000 fa41 	bl	8003798 <memchr>
 8003316:	9a04      	ldr	r2, [sp, #16]
 8003318:	b9d8      	cbnz	r0, 8003352 <_svfiprintf_r+0xe6>
 800331a:	06d0      	lsls	r0, r2, #27
 800331c:	bf44      	itt	mi
 800331e:	2320      	movmi	r3, #32
 8003320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003324:	0711      	lsls	r1, r2, #28
 8003326:	bf44      	itt	mi
 8003328:	232b      	movmi	r3, #43	; 0x2b
 800332a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800332e:	f89a 3000 	ldrb.w	r3, [sl]
 8003332:	2b2a      	cmp	r3, #42	; 0x2a
 8003334:	d015      	beq.n	8003362 <_svfiprintf_r+0xf6>
 8003336:	4654      	mov	r4, sl
 8003338:	2000      	movs	r0, #0
 800333a:	f04f 0c0a 	mov.w	ip, #10
 800333e:	9a07      	ldr	r2, [sp, #28]
 8003340:	4621      	mov	r1, r4
 8003342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003346:	3b30      	subs	r3, #48	; 0x30
 8003348:	2b09      	cmp	r3, #9
 800334a:	d94e      	bls.n	80033ea <_svfiprintf_r+0x17e>
 800334c:	b1b0      	cbz	r0, 800337c <_svfiprintf_r+0x110>
 800334e:	9207      	str	r2, [sp, #28]
 8003350:	e014      	b.n	800337c <_svfiprintf_r+0x110>
 8003352:	eba0 0308 	sub.w	r3, r0, r8
 8003356:	fa09 f303 	lsl.w	r3, r9, r3
 800335a:	4313      	orrs	r3, r2
 800335c:	46a2      	mov	sl, r4
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	e7d2      	b.n	8003308 <_svfiprintf_r+0x9c>
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	1d19      	adds	r1, r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	9103      	str	r1, [sp, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	bfbb      	ittet	lt
 800336e:	425b      	neglt	r3, r3
 8003370:	f042 0202 	orrlt.w	r2, r2, #2
 8003374:	9307      	strge	r3, [sp, #28]
 8003376:	9307      	strlt	r3, [sp, #28]
 8003378:	bfb8      	it	lt
 800337a:	9204      	strlt	r2, [sp, #16]
 800337c:	7823      	ldrb	r3, [r4, #0]
 800337e:	2b2e      	cmp	r3, #46	; 0x2e
 8003380:	d10c      	bne.n	800339c <_svfiprintf_r+0x130>
 8003382:	7863      	ldrb	r3, [r4, #1]
 8003384:	2b2a      	cmp	r3, #42	; 0x2a
 8003386:	d135      	bne.n	80033f4 <_svfiprintf_r+0x188>
 8003388:	9b03      	ldr	r3, [sp, #12]
 800338a:	3402      	adds	r4, #2
 800338c:	1d1a      	adds	r2, r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	9203      	str	r2, [sp, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	bfb8      	it	lt
 8003396:	f04f 33ff 	movlt.w	r3, #4294967295
 800339a:	9305      	str	r3, [sp, #20]
 800339c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800345c <_svfiprintf_r+0x1f0>
 80033a0:	2203      	movs	r2, #3
 80033a2:	4650      	mov	r0, sl
 80033a4:	7821      	ldrb	r1, [r4, #0]
 80033a6:	f000 f9f7 	bl	8003798 <memchr>
 80033aa:	b140      	cbz	r0, 80033be <_svfiprintf_r+0x152>
 80033ac:	2340      	movs	r3, #64	; 0x40
 80033ae:	eba0 000a 	sub.w	r0, r0, sl
 80033b2:	fa03 f000 	lsl.w	r0, r3, r0
 80033b6:	9b04      	ldr	r3, [sp, #16]
 80033b8:	3401      	adds	r4, #1
 80033ba:	4303      	orrs	r3, r0
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c2:	2206      	movs	r2, #6
 80033c4:	4826      	ldr	r0, [pc, #152]	; (8003460 <_svfiprintf_r+0x1f4>)
 80033c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033ca:	f000 f9e5 	bl	8003798 <memchr>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d038      	beq.n	8003444 <_svfiprintf_r+0x1d8>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <_svfiprintf_r+0x1f8>)
 80033d4:	bb1b      	cbnz	r3, 800341e <_svfiprintf_r+0x1b2>
 80033d6:	9b03      	ldr	r3, [sp, #12]
 80033d8:	3307      	adds	r3, #7
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	3308      	adds	r3, #8
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e4:	4433      	add	r3, r6
 80033e6:	9309      	str	r3, [sp, #36]	; 0x24
 80033e8:	e767      	b.n	80032ba <_svfiprintf_r+0x4e>
 80033ea:	460c      	mov	r4, r1
 80033ec:	2001      	movs	r0, #1
 80033ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f2:	e7a5      	b.n	8003340 <_svfiprintf_r+0xd4>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f04f 0c0a 	mov.w	ip, #10
 80033fa:	4619      	mov	r1, r3
 80033fc:	3401      	adds	r4, #1
 80033fe:	9305      	str	r3, [sp, #20]
 8003400:	4620      	mov	r0, r4
 8003402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003406:	3a30      	subs	r2, #48	; 0x30
 8003408:	2a09      	cmp	r2, #9
 800340a:	d903      	bls.n	8003414 <_svfiprintf_r+0x1a8>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0c5      	beq.n	800339c <_svfiprintf_r+0x130>
 8003410:	9105      	str	r1, [sp, #20]
 8003412:	e7c3      	b.n	800339c <_svfiprintf_r+0x130>
 8003414:	4604      	mov	r4, r0
 8003416:	2301      	movs	r3, #1
 8003418:	fb0c 2101 	mla	r1, ip, r1, r2
 800341c:	e7f0      	b.n	8003400 <_svfiprintf_r+0x194>
 800341e:	ab03      	add	r3, sp, #12
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	462a      	mov	r2, r5
 8003424:	4638      	mov	r0, r7
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <_svfiprintf_r+0x1fc>)
 8003428:	a904      	add	r1, sp, #16
 800342a:	f3af 8000 	nop.w
 800342e:	1c42      	adds	r2, r0, #1
 8003430:	4606      	mov	r6, r0
 8003432:	d1d6      	bne.n	80033e2 <_svfiprintf_r+0x176>
 8003434:	89ab      	ldrh	r3, [r5, #12]
 8003436:	065b      	lsls	r3, r3, #25
 8003438:	f53f af2c 	bmi.w	8003294 <_svfiprintf_r+0x28>
 800343c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800343e:	b01d      	add	sp, #116	; 0x74
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	ab03      	add	r3, sp, #12
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	462a      	mov	r2, r5
 800344a:	4638      	mov	r0, r7
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <_svfiprintf_r+0x1fc>)
 800344e:	a904      	add	r1, sp, #16
 8003450:	f000 f87c 	bl	800354c <_printf_i>
 8003454:	e7eb      	b.n	800342e <_svfiprintf_r+0x1c2>
 8003456:	bf00      	nop
 8003458:	08003c5c 	.word	0x08003c5c
 800345c:	08003c62 	.word	0x08003c62
 8003460:	08003c66 	.word	0x08003c66
 8003464:	00000000 	.word	0x00000000
 8003468:	080031b5 	.word	0x080031b5

0800346c <_printf_common>:
 800346c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	4616      	mov	r6, r2
 8003472:	4699      	mov	r9, r3
 8003474:	688a      	ldr	r2, [r1, #8]
 8003476:	690b      	ldr	r3, [r1, #16]
 8003478:	4607      	mov	r7, r0
 800347a:	4293      	cmp	r3, r2
 800347c:	bfb8      	it	lt
 800347e:	4613      	movlt	r3, r2
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003486:	460c      	mov	r4, r1
 8003488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800348c:	b10a      	cbz	r2, 8003492 <_printf_common+0x26>
 800348e:	3301      	adds	r3, #1
 8003490:	6033      	str	r3, [r6, #0]
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	0699      	lsls	r1, r3, #26
 8003496:	bf42      	ittt	mi
 8003498:	6833      	ldrmi	r3, [r6, #0]
 800349a:	3302      	addmi	r3, #2
 800349c:	6033      	strmi	r3, [r6, #0]
 800349e:	6825      	ldr	r5, [r4, #0]
 80034a0:	f015 0506 	ands.w	r5, r5, #6
 80034a4:	d106      	bne.n	80034b4 <_printf_common+0x48>
 80034a6:	f104 0a19 	add.w	sl, r4, #25
 80034aa:	68e3      	ldr	r3, [r4, #12]
 80034ac:	6832      	ldr	r2, [r6, #0]
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	dc28      	bgt.n	8003506 <_printf_common+0x9a>
 80034b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034b8:	1e13      	subs	r3, r2, #0
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	0692      	lsls	r2, r2, #26
 80034c2:	d42d      	bmi.n	8003520 <_printf_common+0xb4>
 80034c4:	4649      	mov	r1, r9
 80034c6:	4638      	mov	r0, r7
 80034c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034cc:	47c0      	blx	r8
 80034ce:	3001      	adds	r0, #1
 80034d0:	d020      	beq.n	8003514 <_printf_common+0xa8>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	68e5      	ldr	r5, [r4, #12]
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf18      	it	ne
 80034de:	2500      	movne	r5, #0
 80034e0:	6832      	ldr	r2, [r6, #0]
 80034e2:	f04f 0600 	mov.w	r6, #0
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	bf08      	it	eq
 80034ea:	1aad      	subeq	r5, r5, r2
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	bf08      	it	eq
 80034f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bfc4      	itt	gt
 80034f8:	1a9b      	subgt	r3, r3, r2
 80034fa:	18ed      	addgt	r5, r5, r3
 80034fc:	341a      	adds	r4, #26
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d11a      	bne.n	8003538 <_printf_common+0xcc>
 8003502:	2000      	movs	r0, #0
 8003504:	e008      	b.n	8003518 <_printf_common+0xac>
 8003506:	2301      	movs	r3, #1
 8003508:	4652      	mov	r2, sl
 800350a:	4649      	mov	r1, r9
 800350c:	4638      	mov	r0, r7
 800350e:	47c0      	blx	r8
 8003510:	3001      	adds	r0, #1
 8003512:	d103      	bne.n	800351c <_printf_common+0xb0>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	3501      	adds	r5, #1
 800351e:	e7c4      	b.n	80034aa <_printf_common+0x3e>
 8003520:	2030      	movs	r0, #48	; 0x30
 8003522:	18e1      	adds	r1, r4, r3
 8003524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800352e:	4422      	add	r2, r4
 8003530:	3302      	adds	r3, #2
 8003532:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003536:	e7c5      	b.n	80034c4 <_printf_common+0x58>
 8003538:	2301      	movs	r3, #1
 800353a:	4622      	mov	r2, r4
 800353c:	4649      	mov	r1, r9
 800353e:	4638      	mov	r0, r7
 8003540:	47c0      	blx	r8
 8003542:	3001      	adds	r0, #1
 8003544:	d0e6      	beq.n	8003514 <_printf_common+0xa8>
 8003546:	3601      	adds	r6, #1
 8003548:	e7d9      	b.n	80034fe <_printf_common+0x92>
	...

0800354c <_printf_i>:
 800354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	7e0f      	ldrb	r7, [r1, #24]
 8003552:	4691      	mov	r9, r2
 8003554:	2f78      	cmp	r7, #120	; 0x78
 8003556:	4680      	mov	r8, r0
 8003558:	460c      	mov	r4, r1
 800355a:	469a      	mov	sl, r3
 800355c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800355e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003562:	d807      	bhi.n	8003574 <_printf_i+0x28>
 8003564:	2f62      	cmp	r7, #98	; 0x62
 8003566:	d80a      	bhi.n	800357e <_printf_i+0x32>
 8003568:	2f00      	cmp	r7, #0
 800356a:	f000 80d9 	beq.w	8003720 <_printf_i+0x1d4>
 800356e:	2f58      	cmp	r7, #88	; 0x58
 8003570:	f000 80a4 	beq.w	80036bc <_printf_i+0x170>
 8003574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800357c:	e03a      	b.n	80035f4 <_printf_i+0xa8>
 800357e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003582:	2b15      	cmp	r3, #21
 8003584:	d8f6      	bhi.n	8003574 <_printf_i+0x28>
 8003586:	a101      	add	r1, pc, #4	; (adr r1, 800358c <_printf_i+0x40>)
 8003588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035f9 	.word	0x080035f9
 8003594:	08003575 	.word	0x08003575
 8003598:	08003575 	.word	0x08003575
 800359c:	08003575 	.word	0x08003575
 80035a0:	08003575 	.word	0x08003575
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003575 	.word	0x08003575
 80035ac:	08003575 	.word	0x08003575
 80035b0:	08003575 	.word	0x08003575
 80035b4:	08003575 	.word	0x08003575
 80035b8:	08003707 	.word	0x08003707
 80035bc:	08003629 	.word	0x08003629
 80035c0:	080036e9 	.word	0x080036e9
 80035c4:	08003575 	.word	0x08003575
 80035c8:	08003575 	.word	0x08003575
 80035cc:	08003729 	.word	0x08003729
 80035d0:	08003575 	.word	0x08003575
 80035d4:	08003629 	.word	0x08003629
 80035d8:	08003575 	.word	0x08003575
 80035dc:	08003575 	.word	0x08003575
 80035e0:	080036f1 	.word	0x080036f1
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	602a      	str	r2, [r5, #0]
 80035ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0a4      	b.n	8003742 <_printf_i+0x1f6>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	6829      	ldr	r1, [r5, #0]
 80035fc:	0606      	lsls	r6, r0, #24
 80035fe:	f101 0304 	add.w	r3, r1, #4
 8003602:	d50a      	bpl.n	800361a <_printf_i+0xce>
 8003604:	680e      	ldr	r6, [r1, #0]
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	2e00      	cmp	r6, #0
 800360a:	da03      	bge.n	8003614 <_printf_i+0xc8>
 800360c:	232d      	movs	r3, #45	; 0x2d
 800360e:	4276      	negs	r6, r6
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003614:	230a      	movs	r3, #10
 8003616:	485e      	ldr	r0, [pc, #376]	; (8003790 <_printf_i+0x244>)
 8003618:	e019      	b.n	800364e <_printf_i+0x102>
 800361a:	680e      	ldr	r6, [r1, #0]
 800361c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	bf18      	it	ne
 8003624:	b236      	sxthne	r6, r6
 8003626:	e7ef      	b.n	8003608 <_printf_i+0xbc>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	1d19      	adds	r1, r3, #4
 800362e:	6029      	str	r1, [r5, #0]
 8003630:	0601      	lsls	r1, r0, #24
 8003632:	d501      	bpl.n	8003638 <_printf_i+0xec>
 8003634:	681e      	ldr	r6, [r3, #0]
 8003636:	e002      	b.n	800363e <_printf_i+0xf2>
 8003638:	0646      	lsls	r6, r0, #25
 800363a:	d5fb      	bpl.n	8003634 <_printf_i+0xe8>
 800363c:	881e      	ldrh	r6, [r3, #0]
 800363e:	2f6f      	cmp	r7, #111	; 0x6f
 8003640:	bf0c      	ite	eq
 8003642:	2308      	moveq	r3, #8
 8003644:	230a      	movne	r3, #10
 8003646:	4852      	ldr	r0, [pc, #328]	; (8003790 <_printf_i+0x244>)
 8003648:	2100      	movs	r1, #0
 800364a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800364e:	6865      	ldr	r5, [r4, #4]
 8003650:	2d00      	cmp	r5, #0
 8003652:	bfa8      	it	ge
 8003654:	6821      	ldrge	r1, [r4, #0]
 8003656:	60a5      	str	r5, [r4, #8]
 8003658:	bfa4      	itt	ge
 800365a:	f021 0104 	bicge.w	r1, r1, #4
 800365e:	6021      	strge	r1, [r4, #0]
 8003660:	b90e      	cbnz	r6, 8003666 <_printf_i+0x11a>
 8003662:	2d00      	cmp	r5, #0
 8003664:	d04d      	beq.n	8003702 <_printf_i+0x1b6>
 8003666:	4615      	mov	r5, r2
 8003668:	fbb6 f1f3 	udiv	r1, r6, r3
 800366c:	fb03 6711 	mls	r7, r3, r1, r6
 8003670:	5dc7      	ldrb	r7, [r0, r7]
 8003672:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003676:	4637      	mov	r7, r6
 8003678:	42bb      	cmp	r3, r7
 800367a:	460e      	mov	r6, r1
 800367c:	d9f4      	bls.n	8003668 <_printf_i+0x11c>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d10b      	bne.n	800369a <_printf_i+0x14e>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	07de      	lsls	r6, r3, #31
 8003686:	d508      	bpl.n	800369a <_printf_i+0x14e>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6861      	ldr	r1, [r4, #4]
 800368c:	4299      	cmp	r1, r3
 800368e:	bfde      	ittt	le
 8003690:	2330      	movle	r3, #48	; 0x30
 8003692:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003696:	f105 35ff 	addle.w	r5, r5, #4294967295
 800369a:	1b52      	subs	r2, r2, r5
 800369c:	6122      	str	r2, [r4, #16]
 800369e:	464b      	mov	r3, r9
 80036a0:	4621      	mov	r1, r4
 80036a2:	4640      	mov	r0, r8
 80036a4:	f8cd a000 	str.w	sl, [sp]
 80036a8:	aa03      	add	r2, sp, #12
 80036aa:	f7ff fedf 	bl	800346c <_printf_common>
 80036ae:	3001      	adds	r0, #1
 80036b0:	d14c      	bne.n	800374c <_printf_i+0x200>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	b004      	add	sp, #16
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	4834      	ldr	r0, [pc, #208]	; (8003790 <_printf_i+0x244>)
 80036be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036c2:	6829      	ldr	r1, [r5, #0]
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80036ca:	6029      	str	r1, [r5, #0]
 80036cc:	061d      	lsls	r5, r3, #24
 80036ce:	d514      	bpl.n	80036fa <_printf_i+0x1ae>
 80036d0:	07df      	lsls	r7, r3, #31
 80036d2:	bf44      	itt	mi
 80036d4:	f043 0320 	orrmi.w	r3, r3, #32
 80036d8:	6023      	strmi	r3, [r4, #0]
 80036da:	b91e      	cbnz	r6, 80036e4 <_printf_i+0x198>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f023 0320 	bic.w	r3, r3, #32
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	2310      	movs	r3, #16
 80036e6:	e7af      	b.n	8003648 <_printf_i+0xfc>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	2378      	movs	r3, #120	; 0x78
 80036f2:	4828      	ldr	r0, [pc, #160]	; (8003794 <_printf_i+0x248>)
 80036f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036f8:	e7e3      	b.n	80036c2 <_printf_i+0x176>
 80036fa:	0659      	lsls	r1, r3, #25
 80036fc:	bf48      	it	mi
 80036fe:	b2b6      	uxthmi	r6, r6
 8003700:	e7e6      	b.n	80036d0 <_printf_i+0x184>
 8003702:	4615      	mov	r5, r2
 8003704:	e7bb      	b.n	800367e <_printf_i+0x132>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	6826      	ldr	r6, [r4, #0]
 800370a:	1d18      	adds	r0, r3, #4
 800370c:	6961      	ldr	r1, [r4, #20]
 800370e:	6028      	str	r0, [r5, #0]
 8003710:	0635      	lsls	r5, r6, #24
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	d501      	bpl.n	800371a <_printf_i+0x1ce>
 8003716:	6019      	str	r1, [r3, #0]
 8003718:	e002      	b.n	8003720 <_printf_i+0x1d4>
 800371a:	0670      	lsls	r0, r6, #25
 800371c:	d5fb      	bpl.n	8003716 <_printf_i+0x1ca>
 800371e:	8019      	strh	r1, [r3, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	4615      	mov	r5, r2
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	e7ba      	b.n	800369e <_printf_i+0x152>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	1d1a      	adds	r2, r3, #4
 800372e:	602a      	str	r2, [r5, #0]
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	6862      	ldr	r2, [r4, #4]
 8003734:	4628      	mov	r0, r5
 8003736:	f000 f82f 	bl	8003798 <memchr>
 800373a:	b108      	cbz	r0, 8003740 <_printf_i+0x1f4>
 800373c:	1b40      	subs	r0, r0, r5
 800373e:	6060      	str	r0, [r4, #4]
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	2300      	movs	r3, #0
 8003746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374a:	e7a8      	b.n	800369e <_printf_i+0x152>
 800374c:	462a      	mov	r2, r5
 800374e:	4649      	mov	r1, r9
 8003750:	4640      	mov	r0, r8
 8003752:	6923      	ldr	r3, [r4, #16]
 8003754:	47d0      	blx	sl
 8003756:	3001      	adds	r0, #1
 8003758:	d0ab      	beq.n	80036b2 <_printf_i+0x166>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	079b      	lsls	r3, r3, #30
 800375e:	d413      	bmi.n	8003788 <_printf_i+0x23c>
 8003760:	68e0      	ldr	r0, [r4, #12]
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	4298      	cmp	r0, r3
 8003766:	bfb8      	it	lt
 8003768:	4618      	movlt	r0, r3
 800376a:	e7a4      	b.n	80036b6 <_printf_i+0x16a>
 800376c:	2301      	movs	r3, #1
 800376e:	4632      	mov	r2, r6
 8003770:	4649      	mov	r1, r9
 8003772:	4640      	mov	r0, r8
 8003774:	47d0      	blx	sl
 8003776:	3001      	adds	r0, #1
 8003778:	d09b      	beq.n	80036b2 <_printf_i+0x166>
 800377a:	3501      	adds	r5, #1
 800377c:	68e3      	ldr	r3, [r4, #12]
 800377e:	9903      	ldr	r1, [sp, #12]
 8003780:	1a5b      	subs	r3, r3, r1
 8003782:	42ab      	cmp	r3, r5
 8003784:	dcf2      	bgt.n	800376c <_printf_i+0x220>
 8003786:	e7eb      	b.n	8003760 <_printf_i+0x214>
 8003788:	2500      	movs	r5, #0
 800378a:	f104 0619 	add.w	r6, r4, #25
 800378e:	e7f5      	b.n	800377c <_printf_i+0x230>
 8003790:	08003c6d 	.word	0x08003c6d
 8003794:	08003c7e 	.word	0x08003c7e

08003798 <memchr>:
 8003798:	4603      	mov	r3, r0
 800379a:	b510      	push	{r4, lr}
 800379c:	b2c9      	uxtb	r1, r1
 800379e:	4402      	add	r2, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	d101      	bne.n	80037aa <memchr+0x12>
 80037a6:	2000      	movs	r0, #0
 80037a8:	e003      	b.n	80037b2 <memchr+0x1a>
 80037aa:	7804      	ldrb	r4, [r0, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	428c      	cmp	r4, r1
 80037b0:	d1f6      	bne.n	80037a0 <memchr+0x8>
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <memcpy>:
 80037b4:	440a      	add	r2, r1
 80037b6:	4291      	cmp	r1, r2
 80037b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037bc:	d100      	bne.n	80037c0 <memcpy+0xc>
 80037be:	4770      	bx	lr
 80037c0:	b510      	push	{r4, lr}
 80037c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c6:	4291      	cmp	r1, r2
 80037c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037cc:	d1f9      	bne.n	80037c2 <memcpy+0xe>
 80037ce:	bd10      	pop	{r4, pc}

080037d0 <memmove>:
 80037d0:	4288      	cmp	r0, r1
 80037d2:	b510      	push	{r4, lr}
 80037d4:	eb01 0402 	add.w	r4, r1, r2
 80037d8:	d902      	bls.n	80037e0 <memmove+0x10>
 80037da:	4284      	cmp	r4, r0
 80037dc:	4623      	mov	r3, r4
 80037de:	d807      	bhi.n	80037f0 <memmove+0x20>
 80037e0:	1e43      	subs	r3, r0, #1
 80037e2:	42a1      	cmp	r1, r4
 80037e4:	d008      	beq.n	80037f8 <memmove+0x28>
 80037e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ee:	e7f8      	b.n	80037e2 <memmove+0x12>
 80037f0:	4601      	mov	r1, r0
 80037f2:	4402      	add	r2, r0
 80037f4:	428a      	cmp	r2, r1
 80037f6:	d100      	bne.n	80037fa <memmove+0x2a>
 80037f8:	bd10      	pop	{r4, pc}
 80037fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003802:	e7f7      	b.n	80037f4 <memmove+0x24>

08003804 <_free_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4605      	mov	r5, r0
 8003808:	2900      	cmp	r1, #0
 800380a:	d040      	beq.n	800388e <_free_r+0x8a>
 800380c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003810:	1f0c      	subs	r4, r1, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfb8      	it	lt
 8003816:	18e4      	addlt	r4, r4, r3
 8003818:	f000 f910 	bl	8003a3c <__malloc_lock>
 800381c:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <_free_r+0x8c>)
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	b933      	cbnz	r3, 8003830 <_free_r+0x2c>
 8003822:	6063      	str	r3, [r4, #4]
 8003824:	6014      	str	r4, [r2, #0]
 8003826:	4628      	mov	r0, r5
 8003828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800382c:	f000 b90c 	b.w	8003a48 <__malloc_unlock>
 8003830:	42a3      	cmp	r3, r4
 8003832:	d908      	bls.n	8003846 <_free_r+0x42>
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	1821      	adds	r1, r4, r0
 8003838:	428b      	cmp	r3, r1
 800383a:	bf01      	itttt	eq
 800383c:	6819      	ldreq	r1, [r3, #0]
 800383e:	685b      	ldreq	r3, [r3, #4]
 8003840:	1809      	addeq	r1, r1, r0
 8003842:	6021      	streq	r1, [r4, #0]
 8003844:	e7ed      	b.n	8003822 <_free_r+0x1e>
 8003846:	461a      	mov	r2, r3
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	b10b      	cbz	r3, 8003850 <_free_r+0x4c>
 800384c:	42a3      	cmp	r3, r4
 800384e:	d9fa      	bls.n	8003846 <_free_r+0x42>
 8003850:	6811      	ldr	r1, [r2, #0]
 8003852:	1850      	adds	r0, r2, r1
 8003854:	42a0      	cmp	r0, r4
 8003856:	d10b      	bne.n	8003870 <_free_r+0x6c>
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	4401      	add	r1, r0
 800385c:	1850      	adds	r0, r2, r1
 800385e:	4283      	cmp	r3, r0
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	d1e0      	bne.n	8003826 <_free_r+0x22>
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4401      	add	r1, r0
 800386a:	6011      	str	r1, [r2, #0]
 800386c:	6053      	str	r3, [r2, #4]
 800386e:	e7da      	b.n	8003826 <_free_r+0x22>
 8003870:	d902      	bls.n	8003878 <_free_r+0x74>
 8003872:	230c      	movs	r3, #12
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	e7d6      	b.n	8003826 <_free_r+0x22>
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	1821      	adds	r1, r4, r0
 800387c:	428b      	cmp	r3, r1
 800387e:	bf01      	itttt	eq
 8003880:	6819      	ldreq	r1, [r3, #0]
 8003882:	685b      	ldreq	r3, [r3, #4]
 8003884:	1809      	addeq	r1, r1, r0
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	6063      	str	r3, [r4, #4]
 800388a:	6054      	str	r4, [r2, #4]
 800388c:	e7cb      	b.n	8003826 <_free_r+0x22>
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	200010c8 	.word	0x200010c8

08003894 <sbrk_aligned>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4e0e      	ldr	r6, [pc, #56]	; (80038d0 <sbrk_aligned+0x3c>)
 8003898:	460c      	mov	r4, r1
 800389a:	6831      	ldr	r1, [r6, #0]
 800389c:	4605      	mov	r5, r0
 800389e:	b911      	cbnz	r1, 80038a6 <sbrk_aligned+0x12>
 80038a0:	f000 f8bc 	bl	8003a1c <_sbrk_r>
 80038a4:	6030      	str	r0, [r6, #0]
 80038a6:	4621      	mov	r1, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f8b7 	bl	8003a1c <_sbrk_r>
 80038ae:	1c43      	adds	r3, r0, #1
 80038b0:	d00a      	beq.n	80038c8 <sbrk_aligned+0x34>
 80038b2:	1cc4      	adds	r4, r0, #3
 80038b4:	f024 0403 	bic.w	r4, r4, #3
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d007      	beq.n	80038cc <sbrk_aligned+0x38>
 80038bc:	1a21      	subs	r1, r4, r0
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f8ac 	bl	8003a1c <_sbrk_r>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d101      	bne.n	80038cc <sbrk_aligned+0x38>
 80038c8:	f04f 34ff 	mov.w	r4, #4294967295
 80038cc:	4620      	mov	r0, r4
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	200010cc 	.word	0x200010cc

080038d4 <_malloc_r>:
 80038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	1ccd      	adds	r5, r1, #3
 80038da:	f025 0503 	bic.w	r5, r5, #3
 80038de:	3508      	adds	r5, #8
 80038e0:	2d0c      	cmp	r5, #12
 80038e2:	bf38      	it	cc
 80038e4:	250c      	movcc	r5, #12
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	4607      	mov	r7, r0
 80038ea:	db01      	blt.n	80038f0 <_malloc_r+0x1c>
 80038ec:	42a9      	cmp	r1, r5
 80038ee:	d905      	bls.n	80038fc <_malloc_r+0x28>
 80038f0:	230c      	movs	r3, #12
 80038f2:	2600      	movs	r6, #0
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4630      	mov	r0, r6
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038fc:	4e2e      	ldr	r6, [pc, #184]	; (80039b8 <_malloc_r+0xe4>)
 80038fe:	f000 f89d 	bl	8003a3c <__malloc_lock>
 8003902:	6833      	ldr	r3, [r6, #0]
 8003904:	461c      	mov	r4, r3
 8003906:	bb34      	cbnz	r4, 8003956 <_malloc_r+0x82>
 8003908:	4629      	mov	r1, r5
 800390a:	4638      	mov	r0, r7
 800390c:	f7ff ffc2 	bl	8003894 <sbrk_aligned>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	4604      	mov	r4, r0
 8003914:	d14d      	bne.n	80039b2 <_malloc_r+0xde>
 8003916:	6834      	ldr	r4, [r6, #0]
 8003918:	4626      	mov	r6, r4
 800391a:	2e00      	cmp	r6, #0
 800391c:	d140      	bne.n	80039a0 <_malloc_r+0xcc>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	4631      	mov	r1, r6
 8003922:	4638      	mov	r0, r7
 8003924:	eb04 0803 	add.w	r8, r4, r3
 8003928:	f000 f878 	bl	8003a1c <_sbrk_r>
 800392c:	4580      	cmp	r8, r0
 800392e:	d13a      	bne.n	80039a6 <_malloc_r+0xd2>
 8003930:	6821      	ldr	r1, [r4, #0]
 8003932:	3503      	adds	r5, #3
 8003934:	1a6d      	subs	r5, r5, r1
 8003936:	f025 0503 	bic.w	r5, r5, #3
 800393a:	3508      	adds	r5, #8
 800393c:	2d0c      	cmp	r5, #12
 800393e:	bf38      	it	cc
 8003940:	250c      	movcc	r5, #12
 8003942:	4638      	mov	r0, r7
 8003944:	4629      	mov	r1, r5
 8003946:	f7ff ffa5 	bl	8003894 <sbrk_aligned>
 800394a:	3001      	adds	r0, #1
 800394c:	d02b      	beq.n	80039a6 <_malloc_r+0xd2>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	442b      	add	r3, r5
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	e00e      	b.n	8003974 <_malloc_r+0xa0>
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	1b52      	subs	r2, r2, r5
 800395a:	d41e      	bmi.n	800399a <_malloc_r+0xc6>
 800395c:	2a0b      	cmp	r2, #11
 800395e:	d916      	bls.n	800398e <_malloc_r+0xba>
 8003960:	1961      	adds	r1, r4, r5
 8003962:	42a3      	cmp	r3, r4
 8003964:	6025      	str	r5, [r4, #0]
 8003966:	bf18      	it	ne
 8003968:	6059      	strne	r1, [r3, #4]
 800396a:	6863      	ldr	r3, [r4, #4]
 800396c:	bf08      	it	eq
 800396e:	6031      	streq	r1, [r6, #0]
 8003970:	5162      	str	r2, [r4, r5]
 8003972:	604b      	str	r3, [r1, #4]
 8003974:	4638      	mov	r0, r7
 8003976:	f104 060b 	add.w	r6, r4, #11
 800397a:	f000 f865 	bl	8003a48 <__malloc_unlock>
 800397e:	f026 0607 	bic.w	r6, r6, #7
 8003982:	1d23      	adds	r3, r4, #4
 8003984:	1af2      	subs	r2, r6, r3
 8003986:	d0b6      	beq.n	80038f6 <_malloc_r+0x22>
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	50a3      	str	r3, [r4, r2]
 800398c:	e7b3      	b.n	80038f6 <_malloc_r+0x22>
 800398e:	6862      	ldr	r2, [r4, #4]
 8003990:	42a3      	cmp	r3, r4
 8003992:	bf0c      	ite	eq
 8003994:	6032      	streq	r2, [r6, #0]
 8003996:	605a      	strne	r2, [r3, #4]
 8003998:	e7ec      	b.n	8003974 <_malloc_r+0xa0>
 800399a:	4623      	mov	r3, r4
 800399c:	6864      	ldr	r4, [r4, #4]
 800399e:	e7b2      	b.n	8003906 <_malloc_r+0x32>
 80039a0:	4634      	mov	r4, r6
 80039a2:	6876      	ldr	r6, [r6, #4]
 80039a4:	e7b9      	b.n	800391a <_malloc_r+0x46>
 80039a6:	230c      	movs	r3, #12
 80039a8:	4638      	mov	r0, r7
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	f000 f84c 	bl	8003a48 <__malloc_unlock>
 80039b0:	e7a1      	b.n	80038f6 <_malloc_r+0x22>
 80039b2:	6025      	str	r5, [r4, #0]
 80039b4:	e7de      	b.n	8003974 <_malloc_r+0xa0>
 80039b6:	bf00      	nop
 80039b8:	200010c8 	.word	0x200010c8

080039bc <_realloc_r>:
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	4680      	mov	r8, r0
 80039c2:	4614      	mov	r4, r2
 80039c4:	460e      	mov	r6, r1
 80039c6:	b921      	cbnz	r1, 80039d2 <_realloc_r+0x16>
 80039c8:	4611      	mov	r1, r2
 80039ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ce:	f7ff bf81 	b.w	80038d4 <_malloc_r>
 80039d2:	b92a      	cbnz	r2, 80039e0 <_realloc_r+0x24>
 80039d4:	f7ff ff16 	bl	8003804 <_free_r>
 80039d8:	4625      	mov	r5, r4
 80039da:	4628      	mov	r0, r5
 80039dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e0:	f000 f838 	bl	8003a54 <_malloc_usable_size_r>
 80039e4:	4284      	cmp	r4, r0
 80039e6:	4607      	mov	r7, r0
 80039e8:	d802      	bhi.n	80039f0 <_realloc_r+0x34>
 80039ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039ee:	d812      	bhi.n	8003a16 <_realloc_r+0x5a>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4640      	mov	r0, r8
 80039f4:	f7ff ff6e 	bl	80038d4 <_malloc_r>
 80039f8:	4605      	mov	r5, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d0ed      	beq.n	80039da <_realloc_r+0x1e>
 80039fe:	42bc      	cmp	r4, r7
 8003a00:	4622      	mov	r2, r4
 8003a02:	4631      	mov	r1, r6
 8003a04:	bf28      	it	cs
 8003a06:	463a      	movcs	r2, r7
 8003a08:	f7ff fed4 	bl	80037b4 <memcpy>
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f7ff fef8 	bl	8003804 <_free_r>
 8003a14:	e7e1      	b.n	80039da <_realloc_r+0x1e>
 8003a16:	4635      	mov	r5, r6
 8003a18:	e7df      	b.n	80039da <_realloc_r+0x1e>
	...

08003a1c <_sbrk_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	2300      	movs	r3, #0
 8003a20:	4d05      	ldr	r5, [pc, #20]	; (8003a38 <_sbrk_r+0x1c>)
 8003a22:	4604      	mov	r4, r0
 8003a24:	4608      	mov	r0, r1
 8003a26:	602b      	str	r3, [r5, #0]
 8003a28:	f000 f81e 	bl	8003a68 <_sbrk>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <_sbrk_r+0x1a>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	b103      	cbz	r3, 8003a36 <_sbrk_r+0x1a>
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	200010d0 	.word	0x200010d0

08003a3c <__malloc_lock>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	; (8003a44 <__malloc_lock+0x8>)
 8003a3e:	f000 b811 	b.w	8003a64 <__retarget_lock_acquire_recursive>
 8003a42:	bf00      	nop
 8003a44:	200010d4 	.word	0x200010d4

08003a48 <__malloc_unlock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_unlock+0x8>)
 8003a4a:	f000 b80c 	b.w	8003a66 <__retarget_lock_release_recursive>
 8003a4e:	bf00      	nop
 8003a50:	200010d4 	.word	0x200010d4

08003a54 <_malloc_usable_size_r>:
 8003a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a58:	1f18      	subs	r0, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bfbc      	itt	lt
 8003a5e:	580b      	ldrlt	r3, [r1, r0]
 8003a60:	18c0      	addlt	r0, r0, r3
 8003a62:	4770      	bx	lr

08003a64 <__retarget_lock_acquire_recursive>:
 8003a64:	4770      	bx	lr

08003a66 <__retarget_lock_release_recursive>:
 8003a66:	4770      	bx	lr

08003a68 <_sbrk>:
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <_sbrk+0x14>)
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	b909      	cbnz	r1, 8003a74 <_sbrk+0xc>
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <_sbrk+0x18>)
 8003a72:	6011      	str	r1, [r2, #0]
 8003a74:	6810      	ldr	r0, [r2, #0]
 8003a76:	4403      	add	r3, r0
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4770      	bx	lr
 8003a7c:	200010d8 	.word	0x200010d8
 8003a80:	200010e0 	.word	0x200010e0

08003a84 <_init>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr

08003a90 <_fini>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr
