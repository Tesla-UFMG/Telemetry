
Interface_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08005188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001064  20000080  08005208  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200010e4  08005208  000210e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000176c9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d32  00000000  00000000  00037772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000dc8b  00000000  00000000  0003b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001260  00000000  00000000  00049130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001120  00000000  00000000  0004a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001ac43  00000000  00000000  0004b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001be33  00000000  00000000  000660f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000905cd  00000000  00000000  00081f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001124f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003630  00000000  00000000  00112544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f24 	.word	0x08004f24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08004f24 	.word	0x08004f24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__aeabi_d2uiz>:
 8000a64:	004a      	lsls	r2, r1, #1
 8000a66:	d211      	bcs.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a6c:	d211      	bcs.n	8000a92 <__aeabi_d2uiz+0x2e>
 8000a6e:	d50d      	bpl.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a78:	d40e      	bmi.n	8000a98 <__aeabi_d2uiz+0x34>
 8000a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_d2uiz+0x3a>
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b510      	push	{r4, lr}
 8000b46:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_InitTick+0x40>)
 8000b4a:	7818      	ldrb	r0, [r3, #0]
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_InitTick+0x44>)
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5c:	f000 fbf0 	bl	8001340 <HAL_SYSTICK_Config>
 8000b60:	b968      	cbnz	r0, 8000b7e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	2c0f      	cmp	r4, #15
 8000b64:	d901      	bls.n	8000b6a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
 8000b68:	e00a      	b.n	8000b80 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b72:	f000 fb9f 	bl	80012b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b76:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_InitTick+0x40>)
 8000b78:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
}
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000014 	.word	0x20000014

08000b8c <HAL_Init>:
{
 8000b8c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x20>)
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 fb79 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ffd0 	bl	8000b44 <HAL_InitTick>
  HAL_MspInit();
 8000ba4:	f002 ffd0 	bl	8003b48 <HAL_MspInit>
}
 8000ba8:	2000      	movs	r0, #0
 8000baa:	bd08      	pop	{r3, pc}
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x10>)
 8000bb2:	6811      	ldr	r1, [r2, #0]
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_IncTick+0x14>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	440b      	add	r3, r1
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000009c 	.word	0x2000009c
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bc8:	4b01      	ldr	r3, [pc, #4]	; (8000bd0 <HAL_GetTick+0x8>)
 8000bca:	6818      	ldr	r0, [r3, #0]
}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000009c 	.word	0x2000009c

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b538      	push	{r3, r4, r5, lr}
 8000bd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff fff6 	bl	8000bc8 <HAL_GetTick>
 8000bdc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000be2:	d002      	beq.n	8000bea <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_Delay+0x24>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	f7ff ffed 	bl	8000bc8 <HAL_GetTick>
 8000bee:	1b40      	subs	r0, r0, r5
 8000bf0:	42a0      	cmp	r0, r4
 8000bf2:	d3fa      	bcc.n	8000bea <HAL_Delay+0x16>
  {
  }
}
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000000 	.word	0x20000000

08000bfc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	f000 80a1 	beq.w	8000d44 <HAL_CAN_Init+0x148>
{
 8000c02:	b538      	push	{r3, r4, r5, lr}
 8000c04:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c0a:	b1d3      	cbz	r3, 8000c42 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c16:	f7ff ffd7 	bl	8000bc8 <HAL_GetTick>
 8000c1a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	f012 0f01 	tst.w	r2, #1
 8000c24:	d110      	bne.n	8000c48 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c26:	f7ff ffcf 	bl	8000bc8 <HAL_GetTick>
 8000c2a:	1b40      	subs	r0, r0, r5
 8000c2c:	280a      	cmp	r0, #10
 8000c2e:	d9f5      	bls.n	8000c1c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c36:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000c40:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000c42:	f002 fa71 	bl	8003128 <HAL_CAN_MspInit>
 8000c46:	e7e1      	b.n	8000c0c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f022 0202 	bic.w	r2, r2, #2
 8000c4e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c50:	f7ff ffba 	bl	8000bc8 <HAL_GetTick>
 8000c54:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	f012 0f02 	tst.w	r2, #2
 8000c5e:	d00d      	beq.n	8000c7c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c60:	f7ff ffb2 	bl	8000bc8 <HAL_GetTick>
 8000c64:	1b40      	subs	r0, r0, r5
 8000c66:	280a      	cmp	r0, #10
 8000c68:	d9f5      	bls.n	8000c56 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c72:	2305      	movs	r3, #5
 8000c74:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
 8000c7a:	e7e1      	b.n	8000c40 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c7c:	7e22      	ldrb	r2, [r4, #24]
 8000c7e:	2a01      	cmp	r2, #1
 8000c80:	d03d      	beq.n	8000cfe <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c88:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c8a:	7e63      	ldrb	r3, [r4, #25]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d03b      	beq.n	8000d08 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c90:	6822      	ldr	r2, [r4, #0]
 8000c92:	6813      	ldr	r3, [r2, #0]
 8000c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c98:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c9a:	7ea3      	ldrb	r3, [r4, #26]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d039      	beq.n	8000d14 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca0:	6822      	ldr	r2, [r4, #0]
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	f023 0320 	bic.w	r3, r3, #32
 8000ca8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000caa:	7ee3      	ldrb	r3, [r4, #27]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d037      	beq.n	8000d20 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cba:	7f23      	ldrb	r3, [r4, #28]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d035      	beq.n	8000d2c <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	f023 0308 	bic.w	r3, r3, #8
 8000cc8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cca:	7f63      	ldrb	r3, [r4, #29]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d033      	beq.n	8000d38 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f023 0304 	bic.w	r3, r3, #4
 8000cd8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cda:	68a3      	ldr	r3, [r4, #8]
 8000cdc:	68e2      	ldr	r2, [r4, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	6922      	ldr	r2, [r4, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	6962      	ldr	r2, [r4, #20]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	6862      	ldr	r2, [r4, #4]
 8000cea:	3a01      	subs	r2, #1
 8000cec:	6821      	ldr	r1, [r4, #0]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000cfc:	e7a0      	b.n	8000c40 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e7c0      	b.n	8000c8a <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e7c2      	b.n	8000c9a <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d14:	6822      	ldr	r2, [r4, #0]
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e7c4      	b.n	8000caa <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	f023 0310 	bic.w	r3, r3, #16
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e7c6      	b.n	8000cba <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e7c8      	b.n	8000cca <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	6813      	ldr	r3, [r2, #0]
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e7ca      	b.n	8000cda <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
}
 8000d46:	4770      	bx	lr

08000d48 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d48:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d4a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d905      	bls.n	8000d62 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000d5e:	2001      	movs	r0, #1
  }
}
 8000d60:	4770      	bx	lr
{
 8000d62:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d64:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d70:	694b      	ldr	r3, [r1, #20]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	2001      	movs	r0, #1
 8000d78:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d7c:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000d80:	ea6f 0c03 	mvn.w	ip, r3
 8000d84:	ea20 0003 	bic.w	r0, r0, r3
 8000d88:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d8c:	69c8      	ldr	r0, [r1, #28]
 8000d8e:	b9c0      	cbnz	r0, 8000dc2 <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d90:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000d94:	ea0c 0000 	and.w	r0, ip, r0
 8000d98:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d9c:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d9e:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000da0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da8:	3048      	adds	r0, #72	; 0x48
 8000daa:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dae:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000db0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000db2:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000db6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dba:	3048      	adds	r0, #72	; 0x48
 8000dbc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000dc0:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dc2:	69c8      	ldr	r0, [r1, #28]
 8000dc4:	2801      	cmp	r0, #1
 8000dc6:	d01a      	beq.n	8000dfe <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dc8:	6988      	ldr	r0, [r1, #24]
 8000dca:	bb88      	cbnz	r0, 8000e30 <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000dd0:	ea0c 0000 	and.w	r0, ip, r0
 8000dd4:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dd8:	6908      	ldr	r0, [r1, #16]
 8000dda:	bb78      	cbnz	r0, 8000e3c <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ddc:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000de0:	ea0c 0000 	and.w	r0, ip, r0
 8000de4:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000de8:	6a09      	ldr	r1, [r1, #32]
 8000dea:	2901      	cmp	r1, #1
 8000dec:	d02c      	beq.n	8000e48 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000df2:	f023 0301 	bic.w	r3, r3, #1
 8000df6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000dfa:	2000      	movs	r0, #0
}
 8000dfc:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dfe:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000e02:	4318      	orrs	r0, r3
 8000e04:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e08:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e0a:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e0c:	f8d1 e000 	ldr.w	lr, [r1]
 8000e10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e14:	3048      	adds	r0, #72	; 0x48
 8000e16:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e1a:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e1e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000e22:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e26:	3048      	adds	r0, #72	; 0x48
 8000e28:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000e2c:	6044      	str	r4, [r0, #4]
 8000e2e:	e7cb      	b.n	8000dc8 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000e34:	4318      	orrs	r0, r3
 8000e36:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000e3a:	e7cd      	b.n	8000dd8 <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e3c:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000e40:	4318      	orrs	r0, r3
 8000e42:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000e46:	e7cf      	b.n	8000de8 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e48:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8000e52:	e7cc      	b.n	8000dee <HAL_CAN_ConfigFilter+0xa6>

08000e54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e58:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000e5c:	b2ed      	uxtb	r5, r5
 8000e5e:	2d01      	cmp	r5, #1
 8000e60:	d006      	beq.n	8000e70 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e68:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000e6a:	2501      	movs	r5, #1
  }
}
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e76:	6802      	ldr	r2, [r0, #0]
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000e80:	f7ff fea2 	bl	8000bc8 <HAL_GetTick>
 8000e84:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f013 0f01 	tst.w	r3, #1
 8000e8e:	d00c      	beq.n	8000eaa <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e90:	f7ff fe9a 	bl	8000bc8 <HAL_GetTick>
 8000e94:	1b83      	subs	r3, r0, r6
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d9f5      	bls.n	8000e86 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000ea8:	e7e0      	b.n	8000e6c <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eaa:	2500      	movs	r5, #0
 8000eac:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000eae:	e7dd      	b.n	8000e6c <HAL_CAN_Start+0x18>

08000eb0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb0:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000eb8:	fa5f fc8c 	uxtb.w	ip, ip
 8000ebc:	f1bc 0f01 	cmp.w	ip, #1
 8000ec0:	f200 809b 	bhi.w	8000ffa <HAL_CAN_GetRxMessage+0x14a>
{
 8000ec4:	b410      	push	{r4}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec6:	b951      	cbnz	r1, 8000ede <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ec8:	6804      	ldr	r4, [r0, #0]
 8000eca:	68e4      	ldr	r4, [r4, #12]
 8000ecc:	f014 0f03 	tst.w	r4, #3
 8000ed0:	d110      	bne.n	8000ef4 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
 8000edc:	e07b      	b.n	8000fd6 <HAL_CAN_GetRxMessage+0x126>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ede:	6804      	ldr	r4, [r0, #0]
 8000ee0:	6924      	ldr	r4, [r4, #16]
 8000ee2:	f014 0f03 	tst.w	r4, #3
 8000ee6:	d105      	bne.n	8000ef4 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eee:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e070      	b.n	8000fd6 <HAL_CAN_GetRxMessage+0x126>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ef4:	f101 041b 	add.w	r4, r1, #27
 8000ef8:	0124      	lsls	r4, r4, #4
 8000efa:	f8d0 c000 	ldr.w	ip, [r0]
 8000efe:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000f02:	f004 0404 	and.w	r4, r4, #4
 8000f06:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f08:	2c00      	cmp	r4, #0
 8000f0a:	d166      	bne.n	8000fda <HAL_CAN_GetRxMessage+0x12a>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f0c:	f101 041b 	add.w	r4, r1, #27
 8000f10:	0124      	lsls	r4, r4, #4
 8000f12:	f8d0 c000 	ldr.w	ip, [r0]
 8000f16:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000f1a:	0d64      	lsrs	r4, r4, #21
 8000f1c:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f1e:	6804      	ldr	r4, [r0, #0]
 8000f20:	f101 0c1b 	add.w	ip, r1, #27
 8000f24:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000f28:	f854 400c 	ldr.w	r4, [r4, ip]
 8000f2c:	f004 0402 	and.w	r4, r4, #2
 8000f30:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f32:	6804      	ldr	r4, [r0, #0]
 8000f34:	4464      	add	r4, ip
 8000f36:	6864      	ldr	r4, [r4, #4]
 8000f38:	f004 040f 	and.w	r4, r4, #15
 8000f3c:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f3e:	6804      	ldr	r4, [r0, #0]
 8000f40:	4464      	add	r4, ip
 8000f42:	6864      	ldr	r4, [r4, #4]
 8000f44:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000f48:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f4a:	6804      	ldr	r4, [r0, #0]
 8000f4c:	4464      	add	r4, ip
 8000f4e:	6864      	ldr	r4, [r4, #4]
 8000f50:	0c24      	lsrs	r4, r4, #16
 8000f52:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f54:	6802      	ldr	r2, [r0, #0]
 8000f56:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f5a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f60:	6802      	ldr	r2, [r0, #0]
 8000f62:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f66:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000f6e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f70:	6802      	ldr	r2, [r0, #0]
 8000f72:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f76:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f7a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000f7e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f80:	6802      	ldr	r2, [r0, #0]
 8000f82:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f86:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f8a:	0e12      	lsrs	r2, r2, #24
 8000f8c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f8e:	6802      	ldr	r2, [r0, #0]
 8000f90:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000f94:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000f98:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f9a:	6802      	ldr	r2, [r0, #0]
 8000f9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fa0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fa4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fa8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000faa:	6802      	ldr	r2, [r0, #0]
 8000fac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fb0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fb4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000fb8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fba:	6802      	ldr	r2, [r0, #0]
 8000fbc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000fc0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fc4:	0e12      	lsrs	r2, r2, #24
 8000fc6:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fc8:	b989      	cbnz	r1, 8000fee <HAL_CAN_GetRxMessage+0x13e>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fca:	6802      	ldr	r2, [r0, #0]
 8000fcc:	68d3      	ldr	r3, [r2, #12]
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8000fd4:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000fd6:	bc10      	pop	{r4}
 8000fd8:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fda:	f101 041b 	add.w	r4, r1, #27
 8000fde:	0124      	lsls	r4, r4, #4
 8000fe0:	f8d0 c000 	ldr.w	ip, [r0]
 8000fe4:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000fe8:	08e4      	lsrs	r4, r4, #3
 8000fea:	6054      	str	r4, [r2, #4]
 8000fec:	e797      	b.n	8000f1e <HAL_CAN_GetRxMessage+0x6e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fee:	6802      	ldr	r2, [r0, #0]
 8000ff0:	6913      	ldr	r3, [r2, #16]
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6113      	str	r3, [r2, #16]
 8000ff8:	e7ec      	b.n	8000fd4 <HAL_CAN_GetRxMessage+0x124>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
}
 8001004:	4770      	bx	lr

08001006 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001006:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800100a:	3b01      	subs	r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d905      	bls.n	800101e <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001012:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
  }
}
 800101c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800101e:	6802      	ldr	r2, [r0, #0]
 8001020:	6953      	ldr	r3, [r2, #20]
 8001022:	4319      	orrs	r1, r3
 8001024:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001026:	2000      	movs	r0, #0
 8001028:	4770      	bx	lr

0800102a <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800102a:	4770      	bx	lr

0800102c <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001030:	4770      	bx	lr

08001032 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001032:	4770      	bx	lr

08001034 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001034:	4770      	bx	lr

08001036 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001036:	4770      	bx	lr

08001038 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001038:	4770      	bx	lr

0800103a <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800103a:	4770      	bx	lr

0800103c <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800103e:	4770      	bx	lr

08001040 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001042:	4770      	bx	lr

08001044 <HAL_CAN_IRQHandler>:
{
 8001044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001048:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800104e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001052:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001054:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001058:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800105c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001060:	f014 0601 	ands.w	r6, r4, #1
 8001064:	d03b      	beq.n	80010de <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001066:	f017 0601 	ands.w	r6, r7, #1
 800106a:	d016      	beq.n	800109a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800106c:	2201      	movs	r2, #1
 800106e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001070:	f017 0f02 	tst.w	r7, #2
 8001074:	d108      	bne.n	8001088 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001076:	f017 0f04 	tst.w	r7, #4
 800107a:	d10c      	bne.n	8001096 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800107c:	f017 0608 	ands.w	r6, r7, #8
 8001080:	d006      	beq.n	8001090 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001082:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001086:	e008      	b.n	800109a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001088:	f7ff ffcf 	bl	800102a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800108c:	2600      	movs	r6, #0
 800108e:	e004      	b.n	800109a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001090:	f7ff ffce 	bl	8001030 <HAL_CAN_TxMailbox0AbortCallback>
 8001094:	e001      	b.n	800109a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001096:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800109a:	f417 7f80 	tst.w	r7, #256	; 0x100
 800109e:	d00d      	beq.n	80010bc <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010a8:	f417 7f00 	tst.w	r7, #512	; 0x200
 80010ac:	f040 8086 	bne.w	80011bc <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010b0:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80010b4:	f000 8086 	beq.w	80011c4 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010b8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010bc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80010c0:	d00d      	beq.n	80010de <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010c2:	682b      	ldr	r3, [r5, #0]
 80010c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010c8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010ca:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80010ce:	f040 8083 	bne.w	80011d8 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010d2:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80010d6:	f000 8083 	beq.w	80011e0 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010da:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010de:	f014 0f08 	tst.w	r4, #8
 80010e2:	d007      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010e4:	f01b 0f10 	tst.w	fp, #16
 80010e8:	d004      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010ea:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	2210      	movs	r2, #16
 80010f2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010f4:	f014 0f04 	tst.w	r4, #4
 80010f8:	d002      	beq.n	8001100 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010fa:	f01b 0f08 	tst.w	fp, #8
 80010fe:	d179      	bne.n	80011f4 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001100:	f014 0f02 	tst.w	r4, #2
 8001104:	d004      	beq.n	8001110 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f013 0f03 	tst.w	r3, #3
 800110e:	d178      	bne.n	8001202 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001110:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001114:	d007      	beq.n	8001126 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001116:	f01a 0f10 	tst.w	sl, #16
 800111a:	d004      	beq.n	8001126 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800111c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	2210      	movs	r2, #16
 8001124:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001126:	f014 0f20 	tst.w	r4, #32
 800112a:	d002      	beq.n	8001132 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800112c:	f01a 0f08 	tst.w	sl, #8
 8001130:	d16b      	bne.n	800120a <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001132:	f014 0f10 	tst.w	r4, #16
 8001136:	d004      	beq.n	8001142 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f013 0f03 	tst.w	r3, #3
 8001140:	d16a      	bne.n	8001218 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001142:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001146:	d002      	beq.n	800114e <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001148:	f018 0f10 	tst.w	r8, #16
 800114c:	d168      	bne.n	8001220 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800114e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001152:	d002      	beq.n	800115a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001154:	f018 0f08 	tst.w	r8, #8
 8001158:	d169      	bne.n	800122e <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800115a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800115e:	d07a      	beq.n	8001256 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001160:	f018 0f04 	tst.w	r8, #4
 8001164:	d074      	beq.n	8001250 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001166:	f414 7f80 	tst.w	r4, #256	; 0x100
 800116a:	d004      	beq.n	8001176 <HAL_CAN_IRQHandler+0x132>
 800116c:	f019 0f01 	tst.w	r9, #1
 8001170:	d001      	beq.n	8001176 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8001172:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001176:	f414 7f00 	tst.w	r4, #512	; 0x200
 800117a:	d004      	beq.n	8001186 <HAL_CAN_IRQHandler+0x142>
 800117c:	f019 0f02 	tst.w	r9, #2
 8001180:	d001      	beq.n	8001186 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8001182:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001186:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800118a:	d004      	beq.n	8001196 <HAL_CAN_IRQHandler+0x152>
 800118c:	f019 0f04 	tst.w	r9, #4
 8001190:	d001      	beq.n	8001196 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001192:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001196:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800119a:	d059      	beq.n	8001250 <HAL_CAN_IRQHandler+0x20c>
 800119c:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80011a0:	d056      	beq.n	8001250 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 80011a2:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80011a6:	d065      	beq.n	8001274 <HAL_CAN_IRQHandler+0x230>
 80011a8:	d858      	bhi.n	800125c <HAL_CAN_IRQHandler+0x218>
 80011aa:	f1b9 0f20 	cmp.w	r9, #32
 80011ae:	d05e      	beq.n	800126e <HAL_CAN_IRQHandler+0x22a>
 80011b0:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80011b4:	d142      	bne.n	800123c <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011b6:	f046 0620 	orr.w	r6, r6, #32
            break;
 80011ba:	e044      	b.n	8001246 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff ff35 	bl	800102c <HAL_CAN_TxMailbox1CompleteCallback>
 80011c2:	e77b      	b.n	80010bc <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011c4:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80011c8:	d002      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011ca:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80011ce:	e775      	b.n	80010bc <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011d0:	4628      	mov	r0, r5
 80011d2:	f7ff ff2e 	bl	8001032 <HAL_CAN_TxMailbox1AbortCallback>
 80011d6:	e771      	b.n	80010bc <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011d8:	4628      	mov	r0, r5
 80011da:	f7ff ff28 	bl	800102e <HAL_CAN_TxMailbox2CompleteCallback>
 80011de:	e77e      	b.n	80010de <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011e0:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80011e4:	d002      	beq.n	80011ec <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011e6:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80011ea:	e778      	b.n	80010de <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011ec:	4628      	mov	r0, r5
 80011ee:	f7ff ff21 	bl	8001034 <HAL_CAN_TxMailbox2AbortCallback>
 80011f2:	e774      	b.n	80010de <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	2208      	movs	r2, #8
 80011f8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff ff1c 	bl	8001038 <HAL_CAN_RxFifo0FullCallback>
 8001200:	e77e      	b.n	8001100 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001202:	4628      	mov	r0, r5
 8001204:	f7ff ff17 	bl	8001036 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001208:	e782      	b.n	8001110 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	2208      	movs	r2, #8
 800120e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001210:	4628      	mov	r0, r5
 8001212:	f7ff ff13 	bl	800103c <HAL_CAN_RxFifo1FullCallback>
 8001216:	e78c      	b.n	8001132 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001218:	4628      	mov	r0, r5
 800121a:	f7ff ff0e 	bl	800103a <HAL_CAN_RxFifo1MsgPendingCallback>
 800121e:	e790      	b.n	8001142 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff ff09 	bl	800103e <HAL_CAN_SleepCallback>
 800122c:	e78f      	b.n	800114e <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	2208      	movs	r2, #8
 8001232:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ff03 	bl	8001040 <HAL_CAN_WakeUpFromRxMsgCallback>
 800123a:	e78e      	b.n	800115a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 800123c:	f1b9 0f10 	cmp.w	r9, #16
 8001240:	d101      	bne.n	8001246 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8001242:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001246:	682a      	ldr	r2, [r5, #0]
 8001248:	6993      	ldr	r3, [r2, #24]
 800124a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800124e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001256:	b99e      	cbnz	r6, 8001280 <HAL_CAN_IRQHandler+0x23c>
}
 8001258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 800125c:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8001260:	d00b      	beq.n	800127a <HAL_CAN_IRQHandler+0x236>
 8001262:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8001266:	d1ee      	bne.n	8001246 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001268:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 800126c:	e7eb      	b.n	8001246 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 800126e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8001272:	e7e8      	b.n	8001246 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8001274:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8001278:	e7e5      	b.n	8001246 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 800127a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800127e:	e7e2      	b.n	8001246 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8001280:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001282:	431e      	orrs	r6, r3
 8001284:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001286:	4628      	mov	r0, r5
 8001288:	f7ff fedb 	bl	8001042 <HAL_CAN_ErrorCallback>
}
 800128c:	e7e4      	b.n	8001258 <HAL_CAN_IRQHandler+0x214>
	...

08001290 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001292:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800129c:	0200      	lsls	r0, r0, #8
 800129e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80012ac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_NVIC_SetPriority+0x68>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012be:	f1c3 0c07 	rsb	ip, r3, #7
 80012c2:	f1bc 0f04 	cmp.w	ip, #4
 80012c6:	bf28      	it	cs
 80012c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012cc:	f103 0e04 	add.w	lr, r3, #4
 80012d0:	f1be 0f06 	cmp.w	lr, #6
 80012d4:	d918      	bls.n	8001308 <HAL_NVIC_SetPriority+0x54>
 80012d6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 3eff 	mov.w	lr, #4294967295
 80012dc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80012e0:	ea21 010c 	bic.w	r1, r1, ip
 80012e4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e6:	fa0e f303 	lsl.w	r3, lr, r3
 80012ea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80012f0:	2800      	cmp	r0, #0
 80012f2:	db0b      	blt.n	800130c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	0109      	lsls	r1, r1, #4
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001300:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001308:	2300      	movs	r3, #0
 800130a:	e7e5      	b.n	80012d8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	f000 000f 	and.w	r0, r0, #15
 8001310:	0109      	lsls	r1, r1, #4
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_NVIC_SetPriority+0x6c>)
 8001316:	5419      	strb	r1, [r3, r0]
 8001318:	e7f4      	b.n	8001304 <HAL_NVIC_SetPriority+0x50>
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	e000ed14 	.word	0xe000ed14

08001324 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001324:	2800      	cmp	r0, #0
 8001326:	db07      	blt.n	8001338 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001328:	f000 021f 	and.w	r2, r0, #31
 800132c:	0940      	lsrs	r0, r0, #5
 800132e:	2301      	movs	r3, #1
 8001330:	4093      	lsls	r3, r2
 8001332:	4a02      	ldr	r2, [pc, #8]	; (800133c <HAL_NVIC_EnableIRQ+0x18>)
 8001334:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	3801      	subs	r0, #1
 8001342:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001346:	d20b      	bcs.n	8001360 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800134c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_SYSTICK_Config+0x24>)
 8001350:	21f0      	movs	r1, #240	; 0xf0
 8001352:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001356:	2000      	movs	r0, #0
 8001358:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	2207      	movs	r2, #7
 800135c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001360:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001368:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800136a:	2401      	movs	r4, #1
 800136c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800136e:	40ac      	lsls	r4, r5
 8001370:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001372:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001374:	6804      	ldr	r4, [r0, #0]
 8001376:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001378:	6843      	ldr	r3, [r0, #4]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d005      	beq.n	800138a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001382:	6803      	ldr	r3, [r0, #0]
 8001384:	60da      	str	r2, [r3, #12]
  }
}
 8001386:	bc30      	pop	{r4, r5}
 8001388:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800138a:	6803      	ldr	r3, [r0, #0]
 800138c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800138e:	6803      	ldr	r3, [r0, #0]
 8001390:	60d9      	str	r1, [r3, #12]
 8001392:	e7f8      	b.n	8001386 <DMA_SetConfig+0x1e>

08001394 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001394:	b360      	cbz	r0, 80013f0 <HAL_DMA_Init+0x5c>
{
 8001396:	b410      	push	{r4}
 8001398:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800139a:	6801      	ldr	r1, [r0, #0]
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_DMA_Init+0x60>)
 800139e:	440b      	add	r3, r1
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <HAL_DMA_Init+0x64>)
 80013a2:	fba0 0303 	umull	r0, r3, r0, r3
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_DMA_Init+0x68>)
 80013ae:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80013b6:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013b8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80013bc:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80013c0:	6853      	ldr	r3, [r2, #4]
 80013c2:	6894      	ldr	r4, [r2, #8]
 80013c4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	68d4      	ldr	r4, [r2, #12]
 80013c8:	4323      	orrs	r3, r4
 80013ca:	6914      	ldr	r4, [r2, #16]
 80013cc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	6954      	ldr	r4, [r2, #20]
 80013d0:	4323      	orrs	r3, r4
 80013d2:	6994      	ldr	r4, [r2, #24]
 80013d4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d6:	69d4      	ldr	r4, [r2, #28]
 80013d8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80013da:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80013dc:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013de:	2000      	movs	r0, #0
 80013e0:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80013e8:	f882 0020 	strb.w	r0, [r2, #32]
}
 80013ec:	bc10      	pop	{r4}
 80013ee:	4770      	bx	lr
    return HAL_ERROR;
 80013f0:	2001      	movs	r0, #1
}
 80013f2:	4770      	bx	lr
 80013f4:	bffdfff8 	.word	0xbffdfff8
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	40020000 	.word	0x40020000

08001400 <HAL_DMA_Start_IT>:
{
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001404:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001408:	2801      	cmp	r0, #1
 800140a:	d031      	beq.n	8001470 <HAL_DMA_Start_IT+0x70>
 800140c:	2001      	movs	r0, #1
 800140e:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001412:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8001416:	2801      	cmp	r0, #1
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 800141a:	2300      	movs	r3, #0
 800141c:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001420:	2002      	movs	r0, #2
}
 8001422:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001424:	2002      	movs	r0, #2
 8001426:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142a:	2000      	movs	r0, #0
 800142c:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800142e:	6825      	ldr	r5, [r4, #0]
 8001430:	6828      	ldr	r0, [r5, #0]
 8001432:	f020 0001 	bic.w	r0, r0, #1
 8001436:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff ff95 	bl	8001368 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800143e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001440:	b15b      	cbz	r3, 800145a <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	f043 030e 	orr.w	r3, r3, #14
 800144a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	e7e3      	b.n	8001422 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f023 0304 	bic.w	r3, r3, #4
 8001462:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f043 030a 	orr.w	r3, r3, #10
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e7ed      	b.n	800144c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001470:	2002      	movs	r0, #2
 8001472:	e7d6      	b.n	8001422 <HAL_DMA_Start_IT+0x22>

08001474 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001474:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001478:	2b02      	cmp	r3, #2
 800147a:	d006      	beq.n	800148a <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	2304      	movs	r3, #4
 800147e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001480:	2300      	movs	r3, #0
 8001482:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001486:	2001      	movs	r0, #1
 8001488:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148a:	6802      	ldr	r2, [r0, #0]
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	f023 030e 	bic.w	r3, r3, #14
 8001492:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001494:	6802      	ldr	r2, [r0, #0]
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800149e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014a0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80014a2:	2201      	movs	r2, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80014ae:	2300      	movs	r3, #0
 80014b0:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80014b4:	4618      	mov	r0, r3
}
 80014b6:	4770      	bx	lr

080014b8 <HAL_DMA_Abort_IT>:
{  
 80014b8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d003      	beq.n	80014ca <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	2304      	movs	r3, #4
 80014c4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
}
 80014c8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ca:	6802      	ldr	r2, [r0, #0]
 80014cc:	6813      	ldr	r3, [r2, #0]
 80014ce:	f023 030e 	bic.w	r3, r3, #14
 80014d2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80014d4:	6802      	ldr	r2, [r0, #0]
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014de:	6803      	ldr	r3, [r0, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_DMA_Abort_IT+0x90>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d014      	beq.n	8001510 <HAL_DMA_Abort_IT+0x58>
 80014e6:	3214      	adds	r2, #20
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d01f      	beq.n	800152c <HAL_DMA_Abort_IT+0x74>
 80014ec:	3214      	adds	r2, #20
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01e      	beq.n	8001530 <HAL_DMA_Abort_IT+0x78>
 80014f2:	3214      	adds	r2, #20
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d01e      	beq.n	8001536 <HAL_DMA_Abort_IT+0x7e>
 80014f8:	3214      	adds	r2, #20
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d01e      	beq.n	800153c <HAL_DMA_Abort_IT+0x84>
 80014fe:	3214      	adds	r2, #20
 8001500:	4293      	cmp	r3, r2
 8001502:	d002      	beq.n	800150a <HAL_DMA_Abort_IT+0x52>
 8001504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001508:	e003      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
 800150a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800150e:	e000      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
 8001510:	2201      	movs	r2, #1
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_DMA_Abort_IT+0x94>)
 8001514:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001516:	2301      	movs	r3, #1
 8001518:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800151c:	2300      	movs	r3, #0
 800151e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001522:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001524:	b16b      	cbz	r3, 8001542 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001526:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	e7cd      	b.n	80014c8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800152c:	2210      	movs	r2, #16
 800152e:	e7f0      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	e7ed      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
 8001536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800153a:	e7ea      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
 800153c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001540:	e7e7      	b.n	8001512 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2000      	movs	r0, #0
 8001544:	e7c0      	b.n	80014c8 <HAL_DMA_Abort_IT+0x10>
 8001546:	bf00      	nop
 8001548:	40020008 	.word	0x40020008
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_DMA_IRQHandler>:
{
 8001550:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001552:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001554:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001556:	6804      	ldr	r4, [r0, #0]
 8001558:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800155a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800155c:	2304      	movs	r3, #4
 800155e:	408b      	lsls	r3, r1
 8001560:	4213      	tst	r3, r2
 8001562:	d035      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x80>
 8001564:	f015 0f04 	tst.w	r5, #4
 8001568:	d032      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	f013 0f20 	tst.w	r3, #32
 8001570:	d103      	bne.n	800157a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	4a43      	ldr	r2, [pc, #268]	; (800168c <HAL_DMA_IRQHandler+0x13c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d014      	beq.n	80015ac <HAL_DMA_IRQHandler+0x5c>
 8001582:	3214      	adds	r2, #20
 8001584:	4293      	cmp	r3, r2
 8001586:	d018      	beq.n	80015ba <HAL_DMA_IRQHandler+0x6a>
 8001588:	3214      	adds	r2, #20
 800158a:	4293      	cmp	r3, r2
 800158c:	d017      	beq.n	80015be <HAL_DMA_IRQHandler+0x6e>
 800158e:	3214      	adds	r2, #20
 8001590:	4293      	cmp	r3, r2
 8001592:	d017      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x74>
 8001594:	3214      	adds	r2, #20
 8001596:	4293      	cmp	r3, r2
 8001598:	d017      	beq.n	80015ca <HAL_DMA_IRQHandler+0x7a>
 800159a:	3214      	adds	r2, #20
 800159c:	4293      	cmp	r3, r2
 800159e:	d002      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x56>
 80015a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a4:	e003      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
 80015a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015aa:	e000      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
 80015ac:	2204      	movs	r2, #4
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <HAL_DMA_IRQHandler+0x140>)
 80015b0:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80015b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015b4:	b103      	cbz	r3, 80015b8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80015b6:	4798      	blx	r3
}
 80015b8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015ba:	2240      	movs	r2, #64	; 0x40
 80015bc:	e7f7      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
 80015be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c2:	e7f4      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
 80015c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c8:	e7f1      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
 80015ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015ce:	e7ee      	b.n	80015ae <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015d0:	2302      	movs	r3, #2
 80015d2:	408b      	lsls	r3, r1
 80015d4:	4213      	tst	r3, r2
 80015d6:	d03c      	beq.n	8001652 <HAL_DMA_IRQHandler+0x102>
 80015d8:	f015 0f02 	tst.w	r5, #2
 80015dc:	d039      	beq.n	8001652 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	f013 0f20 	tst.w	r3, #32
 80015e4:	d106      	bne.n	80015f4 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	f023 030a 	bic.w	r3, r3, #10
 80015ec:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_DMA_IRQHandler+0x13c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d014      	beq.n	8001626 <HAL_DMA_IRQHandler+0xd6>
 80015fc:	3214      	adds	r2, #20
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01c      	beq.n	800163c <HAL_DMA_IRQHandler+0xec>
 8001602:	3214      	adds	r2, #20
 8001604:	4293      	cmp	r3, r2
 8001606:	d01b      	beq.n	8001640 <HAL_DMA_IRQHandler+0xf0>
 8001608:	3214      	adds	r2, #20
 800160a:	4293      	cmp	r3, r2
 800160c:	d01b      	beq.n	8001646 <HAL_DMA_IRQHandler+0xf6>
 800160e:	3214      	adds	r2, #20
 8001610:	4293      	cmp	r3, r2
 8001612:	d01b      	beq.n	800164c <HAL_DMA_IRQHandler+0xfc>
 8001614:	3214      	adds	r2, #20
 8001616:	4293      	cmp	r3, r2
 8001618:	d002      	beq.n	8001620 <HAL_DMA_IRQHandler+0xd0>
 800161a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800161e:	e003      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
 8001620:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001624:	e000      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
 8001626:	2202      	movs	r2, #2
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_DMA_IRQHandler+0x140>)
 800162a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800162c:	2300      	movs	r3, #0
 800162e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001632:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0bf      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001638:	4798      	blx	r3
 800163a:	e7bd      	b.n	80015b8 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800163c:	2220      	movs	r2, #32
 800163e:	e7f3      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	e7f0      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
 8001646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164a:	e7ed      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
 800164c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001650:	e7ea      	b.n	8001628 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001652:	2308      	movs	r3, #8
 8001654:	fa03 f101 	lsl.w	r1, r3, r1
 8001658:	4211      	tst	r1, r2
 800165a:	d0ad      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x68>
 800165c:	f015 0f08 	tst.w	r5, #8
 8001660:	d0aa      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f023 030e 	bic.w	r3, r3, #14
 8001668:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800166a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800166c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800166e:	2301      	movs	r3, #1
 8001670:	fa03 f202 	lsl.w	r2, r3, r2
 8001674:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001676:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800167c:	2300      	movs	r3, #0
 800167e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001682:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001684:	2b00      	cmp	r3, #0
 8001686:	d097      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001688:	4798      	blx	r3
  return;
 800168a:	e795      	b.n	80015b8 <HAL_DMA_IRQHandler+0x68>
 800168c:	40020008 	.word	0x40020008
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001698:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800169a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	e0a6      	b.n	80017ec <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	4d80      	ldr	r5, [pc, #512]	; (80018a0 <HAL_GPIO_Init+0x20c>)
 80016a0:	42aa      	cmp	r2, r5
 80016a2:	d010      	beq.n	80016c6 <HAL_GPIO_Init+0x32>
 80016a4:	d907      	bls.n	80016b6 <HAL_GPIO_Init+0x22>
 80016a6:	4d7f      	ldr	r5, [pc, #508]	; (80018a4 <HAL_GPIO_Init+0x210>)
 80016a8:	42aa      	cmp	r2, r5
 80016aa:	d00c      	beq.n	80016c6 <HAL_GPIO_Init+0x32>
 80016ac:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80016b0:	42aa      	cmp	r2, r5
 80016b2:	d008      	beq.n	80016c6 <HAL_GPIO_Init+0x32>
 80016b4:	e013      	b.n	80016de <HAL_GPIO_Init+0x4a>
 80016b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80016ba:	42aa      	cmp	r2, r5
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x32>
 80016be:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	d107      	bne.n	80016d6 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c6:	688a      	ldr	r2, [r1, #8]
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d051      	beq.n	8001774 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80016d0:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d2:	2408      	movs	r4, #8
 80016d4:	e003      	b.n	80016de <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80016d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80016da:	42aa      	cmp	r2, r5
 80016dc:	d0f3      	beq.n	80016c6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80016e2:	d84e      	bhi.n	8001782 <HAL_GPIO_Init+0xee>
 80016e4:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80016ea:	d84c      	bhi.n	8001786 <HAL_GPIO_Init+0xf2>
 80016ec:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f0:	6833      	ldr	r3, [r6, #0]
 80016f2:	250f      	movs	r5, #15
 80016f4:	4095      	lsls	r5, r2
 80016f6:	ea23 0305 	bic.w	r3, r3, r5
 80016fa:	fa04 f202 	lsl.w	r2, r4, r2
 80016fe:	4313      	orrs	r3, r2
 8001700:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001702:	684b      	ldr	r3, [r1, #4]
 8001704:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001708:	d06e      	beq.n	80017e8 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_GPIO_Init+0x214>)
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800171e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001722:	1c95      	adds	r5, r2, #2
 8001724:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_GPIO_Init+0x218>)
 8001726:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800172a:	f00c 0303 	and.w	r3, ip, #3
 800172e:	009d      	lsls	r5, r3, #2
 8001730:	230f      	movs	r3, #15
 8001732:	40ab      	lsls	r3, r5
 8001734:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_GPIO_Init+0x21c>)
 800173a:	4298      	cmp	r0, r3
 800173c:	d029      	beq.n	8001792 <HAL_GPIO_Init+0xfe>
 800173e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001742:	4298      	cmp	r0, r3
 8001744:	f000 808e 	beq.w	8001864 <HAL_GPIO_Init+0x1d0>
 8001748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800174c:	4298      	cmp	r0, r3
 800174e:	f000 808b 	beq.w	8001868 <HAL_GPIO_Init+0x1d4>
 8001752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001756:	4298      	cmp	r0, r3
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 800175a:	2304      	movs	r3, #4
 800175c:	e01a      	b.n	8001794 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800175e:	68cc      	ldr	r4, [r1, #12]
          break;
 8001760:	e7bd      	b.n	80016de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001762:	68cc      	ldr	r4, [r1, #12]
 8001764:	3404      	adds	r4, #4
          break;
 8001766:	e7ba      	b.n	80016de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001768:	68cc      	ldr	r4, [r1, #12]
 800176a:	3408      	adds	r4, #8
          break;
 800176c:	e7b7      	b.n	80016de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176e:	68cc      	ldr	r4, [r1, #12]
 8001770:	340c      	adds	r4, #12
          break;
 8001772:	e7b4      	b.n	80016de <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001774:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001776:	2408      	movs	r4, #8
 8001778:	e7b1      	b.n	80016de <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177a:	2400      	movs	r4, #0
 800177c:	e7af      	b.n	80016de <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2404      	movs	r4, #4
 8001780:	e7ad      	b.n	80016de <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001782:	1d06      	adds	r6, r0, #4
 8001784:	e7af      	b.n	80016e6 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001786:	f1ac 0208 	sub.w	r2, ip, #8
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	e7b0      	b.n	80016f0 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800178e:	2303      	movs	r3, #3
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x100>
 8001792:	2300      	movs	r3, #0
 8001794:	40ab      	lsls	r3, r5
 8001796:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001798:	3202      	adds	r2, #2
 800179a:	4d44      	ldr	r5, [pc, #272]	; (80018ac <HAL_GPIO_Init+0x218>)
 800179c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a0:	684b      	ldr	r3, [r1, #4]
 80017a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017a6:	d061      	beq.n	800186c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_GPIO_Init+0x220>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	ea43 030e 	orr.w	r3, r3, lr
 80017b0:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b2:	684b      	ldr	r3, [r1, #4]
 80017b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017b8:	d05e      	beq.n	8001878 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ba:	4a3e      	ldr	r2, [pc, #248]	; (80018b4 <HAL_GPIO_Init+0x220>)
 80017bc:	6853      	ldr	r3, [r2, #4]
 80017be:	ea43 030e 	orr.w	r3, r3, lr
 80017c2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c4:	684b      	ldr	r3, [r1, #4]
 80017c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80017ca:	d05b      	beq.n	8001884 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <HAL_GPIO_Init+0x220>)
 80017ce:	6893      	ldr	r3, [r2, #8]
 80017d0:	ea43 030e 	orr.w	r3, r3, lr
 80017d4:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d6:	684b      	ldr	r3, [r1, #4]
 80017d8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80017dc:	d058      	beq.n	8001890 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017de:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <HAL_GPIO_Init+0x220>)
 80017e0:	68d3      	ldr	r3, [r2, #12]
 80017e2:	ea43 030e 	orr.w	r3, r3, lr
 80017e6:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80017e8:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	680a      	ldr	r2, [r1, #0]
 80017ee:	fa32 f30c 	lsrs.w	r3, r2, ip
 80017f2:	d053      	beq.n	800189c <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 80017f4:	2301      	movs	r3, #1
 80017f6:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 80017fe:	ea33 0202 	bics.w	r2, r3, r2
 8001802:	d1f1      	bne.n	80017e8 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8001804:	684a      	ldr	r2, [r1, #4]
 8001806:	2a12      	cmp	r2, #18
 8001808:	f63f af49 	bhi.w	800169e <HAL_GPIO_Init+0xa>
 800180c:	2a12      	cmp	r2, #18
 800180e:	f63f af66 	bhi.w	80016de <HAL_GPIO_Init+0x4a>
 8001812:	a501      	add	r5, pc, #4	; (adr r5, 8001818 <HAL_GPIO_Init+0x184>)
 8001814:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8001818:	080016c7 	.word	0x080016c7
 800181c:	0800175f 	.word	0x0800175f
 8001820:	08001769 	.word	0x08001769
 8001824:	0800177b 	.word	0x0800177b
 8001828:	080016df 	.word	0x080016df
 800182c:	080016df 	.word	0x080016df
 8001830:	080016df 	.word	0x080016df
 8001834:	080016df 	.word	0x080016df
 8001838:	080016df 	.word	0x080016df
 800183c:	080016df 	.word	0x080016df
 8001840:	080016df 	.word	0x080016df
 8001844:	080016df 	.word	0x080016df
 8001848:	080016df 	.word	0x080016df
 800184c:	080016df 	.word	0x080016df
 8001850:	080016df 	.word	0x080016df
 8001854:	080016df 	.word	0x080016df
 8001858:	080016df 	.word	0x080016df
 800185c:	08001763 	.word	0x08001763
 8001860:	0800176f 	.word	0x0800176f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001864:	2301      	movs	r3, #1
 8001866:	e795      	b.n	8001794 <HAL_GPIO_Init+0x100>
 8001868:	2302      	movs	r3, #2
 800186a:	e793      	b.n	8001794 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800186c:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_GPIO_Init+0x220>)
 800186e:	6813      	ldr	r3, [r2, #0]
 8001870:	ea23 030e 	bic.w	r3, r3, lr
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e79c      	b.n	80017b2 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_GPIO_Init+0x220>)
 800187a:	6853      	ldr	r3, [r2, #4]
 800187c:	ea23 030e 	bic.w	r3, r3, lr
 8001880:	6053      	str	r3, [r2, #4]
 8001882:	e79f      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_GPIO_Init+0x220>)
 8001886:	6893      	ldr	r3, [r2, #8]
 8001888:	ea23 030e 	bic.w	r3, r3, lr
 800188c:	6093      	str	r3, [r2, #8]
 800188e:	e7a2      	b.n	80017d6 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_GPIO_Init+0x220>)
 8001892:	68d3      	ldr	r3, [r2, #12]
 8001894:	ea23 030e 	bic.w	r3, r3, lr
 8001898:	60d3      	str	r3, [r2, #12]
 800189a:	e7a5      	b.n	80017e8 <HAL_GPIO_Init+0x154>
  }
}
 800189c:	b002      	add	sp, #8
 800189e:	bd70      	pop	{r4, r5, r6, pc}
 80018a0:	10220000 	.word	0x10220000
 80018a4:	10310000 	.word	0x10310000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b8:	6883      	ldr	r3, [r0, #8]
 80018ba:	4219      	tst	r1, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80018be:	2001      	movs	r0, #1
 80018c0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80018c4:	4770      	bx	lr

080018c6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c6:	b10a      	cbz	r2, 80018cc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c8:	6101      	str	r1, [r0, #16]
 80018ca:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	6101      	str	r1, [r0, #16]
  }
}
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018d2:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d4:	ea01 0203 	and.w	r2, r1, r3
 80018d8:	ea21 0103 	bic.w	r1, r1, r3
 80018dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80018e0:	6101      	str	r1, [r0, #16]
}
 80018e2:	4770      	bx	lr

080018e4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80018e4:	b340      	cbz	r0, 8001938 <HAL_IWDG_Init+0x54>
{
 80018e6:	b538      	push	{r3, r4, r5, lr}
 80018e8:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80018ea:	6803      	ldr	r3, [r0, #0]
 80018ec:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80018f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80018f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80018fa:	6803      	ldr	r3, [r0, #0]
 80018fc:	6842      	ldr	r2, [r0, #4]
 80018fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001900:	6803      	ldr	r3, [r0, #0]
 8001902:	6882      	ldr	r2, [r0, #8]
 8001904:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001906:	f7ff f95f 	bl	8000bc8 <HAL_GetTick>
 800190a:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	f012 0f03 	tst.w	r2, #3
 8001914:	d00b      	beq.n	800192e <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001916:	f7ff f957 	bl	8000bc8 <HAL_GetTick>
 800191a:	1b40      	subs	r0, r0, r5
 800191c:	2827      	cmp	r0, #39	; 0x27
 800191e:	d9f5      	bls.n	800190c <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f013 0f03 	tst.w	r3, #3
 8001928:	d0f0      	beq.n	800190c <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 800192a:	2003      	movs	r0, #3
 800192c:	e003      	b.n	8001936 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800192e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001932:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001934:	2000      	movs	r0, #0
}
 8001936:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
}
 800193a:	4770      	bx	lr

0800193c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001942:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr

08001948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001948:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <RCC_Delay+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <RCC_Delay+0x28>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0a5b      	lsrs	r3, r3, #9
 8001956:	fb00 f303 	mul.w	r3, r0, r3
 800195a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800195c:	bf00      	nop
  }
  while (Delay --);
 800195e:	9b01      	ldr	r3, [sp, #4]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f9      	bne.n	800195c <RCC_Delay+0x14>
}
 8001968:	b002      	add	sp, #8
 800196a:	4770      	bx	lr
 800196c:	20000014 	.word	0x20000014
 8001970:	10624dd3 	.word	0x10624dd3

08001974 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001974:	2800      	cmp	r0, #0
 8001976:	f000 81f1 	beq.w	8001d5c <HAL_RCC_OscConfig+0x3e8>
{
 800197a:	b570      	push	{r4, r5, r6, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001980:	6803      	ldr	r3, [r0, #0]
 8001982:	f013 0f01 	tst.w	r3, #1
 8001986:	d02c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b04      	cmp	r3, #4
 8001992:	d01d      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001994:	4b96      	ldr	r3, [pc, #600]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b08      	cmp	r3, #8
 800199e:	d012      	beq.n	80019c6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d041      	beq.n	8001a2c <HAL_RCC_OscConfig+0xb8>
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d155      	bne.n	8001a58 <HAL_RCC_OscConfig+0xe4>
 80019ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e037      	b.n	8001a36 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019ce:	d0e7      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_OscConfig+0x6e>
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 81bf 	beq.w	8001d60 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	f013 0f02 	tst.w	r3, #2
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f013 0f0c 	tst.w	r3, #12
 80019f2:	d05f      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d054      	beq.n	8001aaa <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	6923      	ldr	r3, [r4, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 808a 	beq.w	8001b1c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b7a      	ldr	r3, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8db 	bl	8000bc8 <HAL_GetTick>
 8001a12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f013 0f02 	tst.w	r3, #2
 8001a1c:	d175      	bne.n	8001b0a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f8d3 	bl	8000bc8 <HAL_GetTick>
 8001a22:	1b40      	subs	r0, r0, r5
 8001a24:	2802      	cmp	r0, #2
 8001a26:	d9f5      	bls.n	8001a14 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001a28:	2003      	movs	r0, #3
 8001a2a:	e19e      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2c:	4a70      	ldr	r2, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	b343      	cbz	r3, 8001a8c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f8c5 	bl	8000bc8 <HAL_GetTick>
 8001a3e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a48:	d1cb      	bne.n	80019e2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f8bd 	bl	8000bc8 <HAL_GetTick>
 8001a4e:	1b40      	subs	r0, r0, r5
 8001a50:	2864      	cmp	r0, #100	; 0x64
 8001a52:	d9f5      	bls.n	8001a40 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001a54:	2003      	movs	r0, #3
 8001a56:	e188      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_OscConfig+0xfe>
 8001a5e:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e7e1      	b.n	8001a36 <HAL_RCC_OscConfig+0xc2>
 8001a72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a76:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e7d4      	b.n	8001a36 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f89c 	bl	8000bc8 <HAL_GetTick>
 8001a90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a9a:	d0a2      	beq.n	80019e2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f894 	bl	8000bc8 <HAL_GetTick>
 8001aa0:	1b40      	subs	r0, r0, r5
 8001aa2:	2864      	cmp	r0, #100	; 0x64
 8001aa4:	d9f5      	bls.n	8001a92 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	e15f      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ab2:	d1a5      	bne.n	8001a00 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f013 0f02 	tst.w	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x152>
 8001abe:	6923      	ldr	r3, [r4, #16]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	f040 814f 	bne.w	8001d64 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ace:	6961      	ldr	r1, [r4, #20]
 8001ad0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ad4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f013 0f08 	tst.w	r3, #8
 8001adc:	d033      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ade:	69a3      	ldr	r3, [r4, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d05c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001aec:	f7ff f86c 	bl	8000bc8 <HAL_GetTick>
 8001af0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f013 0f02 	tst.w	r3, #2
 8001afa:	d121      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f864 	bl	8000bc8 <HAL_GetTick>
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	2802      	cmp	r0, #2
 8001b04:	d9f5      	bls.n	8001af2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001b06:	2003      	movs	r0, #3
 8001b08:	e12f      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b12:	6961      	ldr	r1, [r4, #20]
 8001b14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e7dc      	b.n	8001ad6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b22:	f7ff f851 	bl	8000bc8 <HAL_GetTick>
 8001b26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f013 0f02 	tst.w	r3, #2
 8001b30:	d0d1      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f849 	bl	8000bc8 <HAL_GetTick>
 8001b36:	1b40      	subs	r0, r0, r5
 8001b38:	2802      	cmp	r0, #2
 8001b3a:	d9f5      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	e114      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff ff01 	bl	8001948 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	f013 0f04 	tst.w	r3, #4
 8001b4c:	f000 8096 	beq.w	8001c7c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b58:	d134      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b6e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_RCC_OscConfig+0x284>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b78:	d026      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	68e3      	ldr	r3, [r4, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d03d      	beq.n	8001bfc <HAL_RCC_OscConfig+0x288>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d153      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2b8>
 8001b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b88:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	621a      	str	r2, [r3, #32]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	621a      	str	r2, [r3, #32]
 8001b9c:	e033      	b.n	8001c06 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f80f 	bl	8000bc8 <HAL_GetTick>
 8001baa:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x27c>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f013 0f02 	tst.w	r3, #2
 8001bb4:	d0c7      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f807 	bl	8000bc8 <HAL_GetTick>
 8001bba:	1b40      	subs	r0, r0, r5
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d9f5      	bls.n	8001bac <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	e0d2      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e7d3      	b.n	8001b70 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x284>)
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fff9 	bl	8000bc8 <HAL_GetTick>
 8001bd6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_RCC_OscConfig+0x284>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001be0:	d1cb      	bne.n	8001b7a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7fe fff1 	bl	8000bc8 <HAL_GetTick>
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	2864      	cmp	r0, #100	; 0x64
 8001bea:	d9f5      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001bec:	2003      	movs	r0, #3
 8001bee:	e0bc      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	42420000 	.word	0x42420000
 8001bf8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001bfe:	6a13      	ldr	r3, [r2, #32]
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c06:	68e3      	ldr	r3, [r4, #12]
 8001c08:	b333      	cbz	r3, 8001c58 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ffdd 	bl	8000bc8 <HAL_GetTick>
 8001c0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f013 0f02 	tst.w	r3, #2
 8001c18:	d12f      	bne.n	8001c7a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7fe ffd5 	bl	8000bc8 <HAL_GetTick>
 8001c1e:	1b80      	subs	r0, r0, r6
 8001c20:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c24:	4298      	cmp	r0, r3
 8001c26:	d9f3      	bls.n	8001c10 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001c28:	2003      	movs	r0, #3
 8001c2a:	e09e      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2d0>
 8001c30:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	621a      	str	r2, [r3, #32]
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	f022 0204 	bic.w	r2, r2, #4
 8001c40:	621a      	str	r2, [r3, #32]
 8001c42:	e7e0      	b.n	8001c06 <HAL_RCC_OscConfig+0x292>
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	f042 0204 	orr.w	r2, r2, #4
 8001c4c:	621a      	str	r2, [r3, #32]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	621a      	str	r2, [r3, #32]
 8001c56:	e7d6      	b.n	8001c06 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffb6 	bl	8000bc8 <HAL_GetTick>
 8001c5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f013 0f02 	tst.w	r3, #2
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe ffae 	bl	8000bc8 <HAL_GetTick>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c72:	4298      	cmp	r0, r3
 8001c74:	d9f3      	bls.n	8001c5e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001c76:	2003      	movs	r0, #3
 8001c78:	e077      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001c7a:	b9e5      	cbnz	r5, 8001cb6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	69e3      	ldr	r3, [r4, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d072      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c82:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001c84:	6852      	ldr	r2, [r2, #4]
 8001c86:	f002 020c 	and.w	r2, r2, #12
 8001c8a:	2a08      	cmp	r2, #8
 8001c8c:	d056      	beq.n	8001d3c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d017      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_RCC_OscConfig+0x40c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff96 	bl	8000bc8 <HAL_GetTick>
 8001c9c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ca6:	d047      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe ff8e 	bl	8000bc8 <HAL_GetTick>
 8001cac:	1b00      	subs	r0, r0, r4
 8001cae:	2802      	cmp	r0, #2
 8001cb0:	d9f5      	bls.n	8001c9e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	e059      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001cb8:	69d3      	ldr	r3, [r2, #28]
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	e7dc      	b.n	8001c7c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x40c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ff7e 	bl	8000bc8 <HAL_GetTick>
 8001ccc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cd6:	d006      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe ff76 	bl	8000bc8 <HAL_GetTick>
 8001cdc:	1b40      	subs	r0, r0, r5
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9f5      	bls.n	8001cce <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	e041      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce6:	6a23      	ldr	r3, [r4, #32]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d01a      	beq.n	8001d24 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cee:	4923      	ldr	r1, [pc, #140]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001cf0:	684b      	ldr	r3, [r1, #4]
 8001cf2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001cf6:	6a22      	ldr	r2, [r4, #32]
 8001cf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cfa:	4302      	orrs	r2, r0
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_RCC_OscConfig+0x40c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d06:	f7fe ff5f 	bl	8000bc8 <HAL_GetTick>
 8001d0a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ff57 	bl	8000bc8 <HAL_GetTick>
 8001d1a:	1b00      	subs	r0, r0, r4
 8001d1c:	2802      	cmp	r0, #2
 8001d1e:	d9f5      	bls.n	8001d0c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001d20:	2003      	movs	r0, #3
 8001d22:	e022      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001d26:	6853      	ldr	r3, [r2, #4]
 8001d28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d2c:	68a1      	ldr	r1, [r4, #8]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	6053      	str	r3, [r2, #4]
 8001d32:	e7dc      	b.n	8001cee <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001d34:	2000      	movs	r0, #0
 8001d36:	e018      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e016      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d016      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_RCC_OscConfig+0x408>)
 8001d42:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d44:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001d48:	6a22      	ldr	r2, [r4, #32]
 8001d4a:	4291      	cmp	r1, r2
 8001d4c:	d111      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d52:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d10e      	bne.n	8001d76 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e006      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	4770      	bx	lr
        return HAL_ERROR;
 8001d60:	2001      	movs	r0, #1
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001d68:	2000      	movs	r0, #0
}
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
 8001d70:	e7fb      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
 8001d74:	e7f9      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
 8001d76:	2001      	movs	r0, #1
 8001d78:	e7f7      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f6>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	42420000 	.word	0x42420000

08001d84 <HAL_RCC_GetSysClockFreq>:
{
 8001d84:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d8a:	f10d 0c18 	add.w	ip, sp, #24
 8001d8e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d92:	f240 2301 	movw	r3, #513	; 0x201
 8001d96:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	2a08      	cmp	r2, #8
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001da6:	4811      	ldr	r0, [pc, #68]	; (8001dec <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001da8:	b006      	add	sp, #24
 8001daa:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001db0:	3218      	adds	r2, #24
 8001db2:	446a      	add	r2, sp
 8001db4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001dbc:	d00d      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001dc6:	3318      	adds	r3, #24
 8001dc8:	446b      	add	r3, sp
 8001dca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_RCC_GetSysClockFreq+0x68>)
 8001dd0:	fb02 f000 	mul.w	r0, r2, r0
 8001dd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dd8:	e7e6      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001ddc:	fb03 f000 	mul.w	r0, r3, r0
 8001de0:	e7e2      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x24>
 8001de2:	bf00      	nop
 8001de4:	08004f64 	.word	0x08004f64
 8001de8:	40021000 	.word	0x40021000
 8001dec:	007a1200 	.word	0x007a1200
 8001df0:	003d0900 	.word	0x003d0900

08001df4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f000 80a0 	beq.w	8001f3a <HAL_RCC_ClockConfig+0x146>
{
 8001dfa:	b570      	push	{r4, r5, r6, lr}
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_RCC_ClockConfig+0x158>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d20b      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0c:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_RCC_ClockConfig+0x158>)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f023 0307 	bic.w	r3, r3, #7
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	428b      	cmp	r3, r1
 8001e20:	f040 808d 	bne.w	8001f3e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	f013 0f02 	tst.w	r3, #2
 8001e2a:	d017      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	f013 0f04 	tst.w	r3, #4
 8001e30:	d004      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e32:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f013 0f08 	tst.w	r3, #8
 8001e42:	d004      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e44:	4a42      	ldr	r2, [pc, #264]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e50:	6853      	ldr	r3, [r2, #4]
 8001e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e56:	68a1      	ldr	r1, [r4, #8]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f013 0f01 	tst.w	r3, #1
 8001e62:	d031      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e64:	6863      	ldr	r3, [r4, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d020      	beq.n	8001eac <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d025      	beq.n	8001eba <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f012 0f02 	tst.w	r2, #2
 8001e76:	d064      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e7a:	684a      	ldr	r2, [r1, #4]
 8001e7c:	f022 0203 	bic.w	r2, r2, #3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001e84:	f7fe fea0 	bl	8000bc8 <HAL_GetTick>
 8001e88:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	6862      	ldr	r2, [r4, #4]
 8001e94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e98:	d016      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9a:	f7fe fe95 	bl	8000bc8 <HAL_GetTick>
 8001e9e:	1b80      	subs	r0, r0, r6
 8001ea0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ea4:	4298      	cmp	r0, r3
 8001ea6:	d9f0      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	e045      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001eb4:	d1e0      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	e03e      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ec2:	d1d9      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	e037      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x158>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	42ab      	cmp	r3, r5
 8001ed2:	d90a      	bls.n	8001eea <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_RCC_ClockConfig+0x158>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f023 0307 	bic.w	r3, r3, #7
 8001edc:	432b      	orrs	r3, r5
 8001ede:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	42ab      	cmp	r3, r5
 8001ee8:	d12d      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f013 0f04 	tst.w	r3, #4
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001ef4:	6853      	ldr	r3, [r2, #4]
 8001ef6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001efa:	68e1      	ldr	r1, [r4, #12]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	f013 0f08 	tst.w	r3, #8
 8001f06:	d007      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001f0a:	6853      	ldr	r3, [r2, #4]
 8001f0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f10:	6921      	ldr	r1, [r4, #16]
 8001f12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f16:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f18:	f7ff ff34 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_RCC_ClockConfig+0x15c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x160>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	40d8      	lsrs	r0, r3
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x164>)
 8001f2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x168>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f7fe fe07 	bl	8000b44 <HAL_InitTick>
  return HAL_OK;
 8001f36:	2000      	movs	r0, #0
}
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
}
 8001f3c:	4770      	bx	lr
    return HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e7fa      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	e7f8      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
 8001f48:	e7f6      	b.n	8001f38 <HAL_RCC_ClockConfig+0x144>
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08004f3c 	.word	0x08004f3c
 8001f58:	20000014 	.word	0x20000014
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetHCLKFreq>:
}
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000014 	.word	0x20000014

08001f6c <HAL_RCC_GetPCLK1Freq>:
{
 8001f6c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6e:	f7ff fff7 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f7a:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f7e:	40d8      	lsrs	r0, r3
 8001f80:	bd08      	pop	{r3, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08004f4c 	.word	0x08004f4c

08001f8c <HAL_RCC_GetPCLK2Freq>:
{
 8001f8c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f8e:	f7ff ffe7 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f9a:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f9e:	40d8      	lsrs	r0, r3
 8001fa0:	bd08      	pop	{r3, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08004f4c 	.word	0x08004f4c

08001fac <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d056      	beq.n	800205e <HAL_SPI_Init+0xb2>
{
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4604      	mov	r4, r0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fb6:	b933      	cbnz	r3, 8001fc6 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fb8:	6843      	ldr	r3, [r0, #4]
 8001fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fbe:	d005      	beq.n	8001fcc <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61c3      	str	r3, [r0, #28]
 8001fc4:	e002      	b.n	8001fcc <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fca:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fd0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03c      	beq.n	8002052 <HAL_SPI_Init+0xa6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fde:	6822      	ldr	r2, [r4, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe8:	6863      	ldr	r3, [r4, #4]
 8001fea:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001fee:	68a2      	ldr	r2, [r4, #8]
 8001ff0:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	68e2      	ldr	r2, [r4, #12]
 8001ff8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	6922      	ldr	r2, [r4, #16]
 8002000:	f002 0202 	and.w	r2, r2, #2
 8002004:	4313      	orrs	r3, r2
 8002006:	6962      	ldr	r2, [r4, #20]
 8002008:	f002 0201 	and.w	r2, r2, #1
 800200c:	4313      	orrs	r3, r2
 800200e:	69a2      	ldr	r2, [r4, #24]
 8002010:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002014:	4313      	orrs	r3, r2
 8002016:	69e2      	ldr	r2, [r4, #28]
 8002018:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800201c:	4313      	orrs	r3, r2
 800201e:	6a22      	ldr	r2, [r4, #32]
 8002020:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002024:	4313      	orrs	r3, r2
 8002026:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002028:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800202c:	6821      	ldr	r1, [r4, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002032:	8b63      	ldrh	r3, [r4, #26]
 8002034:	6822      	ldr	r2, [r4, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	69d3      	ldr	r3, [r2, #28]
 8002040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002044:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002046:	2000      	movs	r0, #0
 8002048:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800204a:	2301      	movs	r3, #1
 800204c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002050:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002052:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002056:	4620      	mov	r0, r4
 8002058:	f001 fd3c 	bl	8003ad4 <HAL_SPI_MspInit>
 800205c:	e7bc      	b.n	8001fd8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
}
 8002060:	4770      	bx	lr

08002062 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002062:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002064:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002066:	6a04      	ldr	r4, [r0, #32]
 8002068:	f024 0401 	bic.w	r4, r4, #1
 800206c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800206e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002070:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002074:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002078:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800207c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800207e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002080:	6203      	str	r3, [r0, #32]
}
 8002082:	bc10      	pop	{r4}
 8002084:	4770      	bx	lr

08002086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002086:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002088:	6a04      	ldr	r4, [r0, #32]
 800208a:	f024 0410 	bic.w	r4, r4, #16
 800208e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002090:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002092:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002094:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002098:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800209c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020a4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80020a6:	6203      	str	r3, [r0, #32]
}
 80020a8:	bc10      	pop	{r4}
 80020aa:	4770      	bx	lr

080020ac <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020ac:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020b2:	430b      	orrs	r3, r1
 80020b4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b8:	6083      	str	r3, [r0, #8]
}
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80020bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020be:	4a1b      	ldr	r2, [pc, #108]	; (800212c <TIM_Base_SetConfig+0x70>)
 80020c0:	4290      	cmp	r0, r2
 80020c2:	d00a      	beq.n	80020da <TIM_Base_SetConfig+0x1e>
 80020c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0x1e>
 80020ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020ce:	4290      	cmp	r0, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0x1e>
 80020d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d6:	4290      	cmp	r0, r2
 80020d8:	d103      	bne.n	80020e2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020de:	684a      	ldr	r2, [r1, #4]
 80020e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <TIM_Base_SetConfig+0x70>)
 80020e4:	4290      	cmp	r0, r2
 80020e6:	d00a      	beq.n	80020fe <TIM_Base_SetConfig+0x42>
 80020e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x42>
 80020ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020f2:	4290      	cmp	r0, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x42>
 80020f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fa:	4290      	cmp	r0, r2
 80020fc:	d103      	bne.n	8002106 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	68ca      	ldr	r2, [r1, #12]
 8002104:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800210a:	694a      	ldr	r2, [r1, #20]
 800210c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800210e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002110:	688b      	ldr	r3, [r1, #8]
 8002112:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002114:	680b      	ldr	r3, [r1, #0]
 8002116:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <TIM_Base_SetConfig+0x70>)
 800211a:	4298      	cmp	r0, r3
 800211c:	d002      	beq.n	8002124 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800211e:	2301      	movs	r3, #1
 8002120:	6143      	str	r3, [r0, #20]
}
 8002122:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002124:	690b      	ldr	r3, [r1, #16]
 8002126:	6303      	str	r3, [r0, #48]	; 0x30
 8002128:	e7f9      	b.n	800211e <TIM_Base_SetConfig+0x62>
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00

08002130 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002130:	b340      	cbz	r0, 8002184 <HAL_TIM_Base_Init+0x54>
{
 8002132:	b510      	push	{r4, lr}
 8002134:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800213a:	b1f3      	cbz	r3, 800217a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002142:	4621      	mov	r1, r4
 8002144:	f851 0b04 	ldr.w	r0, [r1], #4
 8002148:	f7ff ffb8 	bl	80020bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	2301      	movs	r3, #1
 800214e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002152:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002156:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800215a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800215e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800216a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800216e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
}
 8002178:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800217a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800217e:	f001 ff8d 	bl	800409c <HAL_TIM_Base_MspInit>
 8002182:	e7db      	b.n	800213c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
}
 8002186:	4770      	bx	lr

08002188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002188:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800218a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800218c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002190:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002194:	430a      	orrs	r2, r1
 8002196:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800219a:	6082      	str	r2, [r0, #8]
}
 800219c:	bc10      	pop	{r4}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d066      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xd6>
{
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021ac:	2301      	movs	r3, #1
 80021ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021c4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80021c6:	680b      	ldr	r3, [r1, #0]
 80021c8:	2b60      	cmp	r3, #96	; 0x60
 80021ca:	d040      	beq.n	800224e <HAL_TIM_ConfigClockSource+0xae>
 80021cc:	d822      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x74>
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d047      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xc2>
 80021d2:	d90b      	bls.n	80021ec <HAL_TIM_ConfigClockSource+0x4c>
 80021d4:	2b50      	cmp	r3, #80	; 0x50
 80021d6:	d10e      	bne.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d8:	68ca      	ldr	r2, [r1, #12]
 80021da:	6849      	ldr	r1, [r1, #4]
 80021dc:	6800      	ldr	r0, [r0, #0]
 80021de:	f7ff ff40 	bl	8002062 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e2:	2150      	movs	r1, #80	; 0x50
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	f7ff ff61 	bl	80020ac <TIM_ITRx_SetConfig>
      break;
 80021ea:	e004      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d00c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x6a>
 80021f0:	d908      	bls.n	8002204 <HAL_TIM_ConfigClockSource+0x64>
 80021f2:	2b30      	cmp	r3, #48	; 0x30
 80021f4:	d009      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002202:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002204:	b10b      	cbz	r3, 800220a <HAL_TIM_ConfigClockSource+0x6a>
 8002206:	2b10      	cmp	r3, #16
 8002208:	d1f5      	bne.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800220a:	4619      	mov	r1, r3
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f7ff ff4d 	bl	80020ac <TIM_ITRx_SetConfig>
        break;
 8002212:	e7f0      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d00e      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0x96>
 8002218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800221c:	d1eb      	bne.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800221e:	68cb      	ldr	r3, [r1, #12]
 8002220:	684a      	ldr	r2, [r1, #4]
 8002222:	6889      	ldr	r1, [r1, #8]
 8002224:	6800      	ldr	r0, [r0, #0]
 8002226:	f7ff ffaf 	bl	8002188 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	6093      	str	r3, [r2, #8]
      break;
 8002234:	e7df      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	68cb      	ldr	r3, [r1, #12]
 8002238:	684a      	ldr	r2, [r1, #4]
 800223a:	6889      	ldr	r1, [r1, #8]
 800223c:	6800      	ldr	r0, [r0, #0]
 800223e:	f7ff ffa3 	bl	8002188 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002246:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800224a:	6093      	str	r3, [r2, #8]
      break;
 800224c:	e7d3      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800224e:	68ca      	ldr	r2, [r1, #12]
 8002250:	6849      	ldr	r1, [r1, #4]
 8002252:	6800      	ldr	r0, [r0, #0]
 8002254:	f7ff ff17 	bl	8002086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002258:	2160      	movs	r1, #96	; 0x60
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	f7ff ff26 	bl	80020ac <TIM_ITRx_SetConfig>
      break;
 8002260:	e7c9      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002262:	68ca      	ldr	r2, [r1, #12]
 8002264:	6849      	ldr	r1, [r1, #4]
 8002266:	6800      	ldr	r0, [r0, #0]
 8002268:	f7ff fefb 	bl	8002062 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226c:	2140      	movs	r1, #64	; 0x40
 800226e:	6820      	ldr	r0, [r4, #0]
 8002270:	f7ff ff1c 	bl	80020ac <TIM_ITRx_SetConfig>
      break;
 8002274:	e7bf      	b.n	80021f6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002276:	2002      	movs	r0, #2
}
 8002278:	4770      	bx	lr
	...

0800227c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d02c      	beq.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8002284:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8002286:	2301      	movs	r3, #1
 8002288:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	2302      	movs	r3, #2
 800228e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002292:	6803      	ldr	r3, [r0, #0]
 8002294:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002296:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002298:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800229c:	680a      	ldr	r2, [r1, #0]
 800229e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a4:	6803      	ldr	r3, [r0, #0]
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00a      	beq.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d007      	beq.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80022b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80022ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022be:	4293      	cmp	r3, r2
 80022c0:	d104      	bne.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022c2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022c6:	684a      	ldr	r2, [r1, #4]
 80022c8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022ca:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d2:	2300      	movs	r3, #0
 80022d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80022d8:	4618      	mov	r0, r3
}
 80022da:	bc10      	pop	{r4}
 80022dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022de:	2002      	movs	r0, #2
}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80022e8:	6802      	ldr	r2, [r0, #0]
 80022ea:	68d3      	ldr	r3, [r2, #12]
 80022ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80022f0:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022f2:	2320      	movs	r3, #32
 80022f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80022f8:	4770      	bx	lr

080022fa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fa:	6802      	ldr	r2, [r0, #0]
 80022fc:	68d3      	ldr	r3, [r2, #12]
 80022fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002302:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002304:	6802      	ldr	r2, [r0, #0]
 8002306:	6953      	ldr	r3, [r2, #20]
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800230e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002310:	2b01      	cmp	r3, #1
 8002312:	d005      	beq.n	8002320 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002314:	2320      	movs	r3, #32
 8002316:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231a:	2300      	movs	r3, #0
 800231c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800231e:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002320:	6802      	ldr	r2, [r0, #0]
 8002322:	68d3      	ldr	r3, [r2, #12]
 8002324:	f023 0310 	bic.w	r3, r3, #16
 8002328:	60d3      	str	r3, [r2, #12]
 800232a:	e7f3      	b.n	8002314 <UART_EndRxTransfer+0x1a>

0800232c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800232c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b21      	cmp	r3, #33	; 0x21
 8002334:	d001      	beq.n	800233a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002336:	2002      	movs	r0, #2
  }
}
 8002338:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233a:	6883      	ldr	r3, [r0, #8]
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	d017      	beq.n	8002372 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002342:	6a03      	ldr	r3, [r0, #32]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	6202      	str	r2, [r0, #32]
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	6803      	ldr	r3, [r0, #0]
 800234c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800234e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002358:	b94b      	cbnz	r3, 800236e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800235a:	6802      	ldr	r2, [r0, #0]
 800235c:	68d3      	ldr	r3, [r2, #12]
 800235e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002362:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002364:	6802      	ldr	r2, [r0, #0]
 8002366:	68d3      	ldr	r3, [r2, #12]
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800236e:	2000      	movs	r0, #0
 8002370:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002372:	6903      	ldr	r3, [r0, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e4      	bne.n	8002342 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002378:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002382:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002384:	6a03      	ldr	r3, [r0, #32]
 8002386:	3302      	adds	r3, #2
 8002388:	6203      	str	r3, [r0, #32]
 800238a:	e7e0      	b.n	800234e <UART_Transmit_IT+0x22>

0800238c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800238c:	b510      	push	{r4, lr}
 800238e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6913      	ldr	r3, [r2, #16]
 8002394:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002398:	68c1      	ldr	r1, [r0, #12]
 800239a:	430b      	orrs	r3, r1
 800239c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800239e:	6883      	ldr	r3, [r0, #8]
 80023a0:	6902      	ldr	r2, [r0, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6942      	ldr	r2, [r0, #20]
 80023a6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80023a8:	6801      	ldr	r1, [r0, #0]
 80023aa:	68cb      	ldr	r3, [r1, #12]
 80023ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023b0:	f023 030c 	bic.w	r3, r3, #12
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b8:	6802      	ldr	r2, [r0, #0]
 80023ba:	6953      	ldr	r3, [r2, #20]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	6981      	ldr	r1, [r0, #24]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80023c6:	6802      	ldr	r2, [r0, #0]
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <UART_SetConfig+0x8c>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d020      	beq.n	8002410 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023ce:	f7ff fdcd 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 80023d2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e4:	480d      	ldr	r0, [pc, #52]	; (800241c <UART_SetConfig+0x90>)
 80023e6:	fba0 3102 	umull	r3, r1, r0, r2
 80023ea:	0949      	lsrs	r1, r1, #5
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	fb03 2311 	mls	r3, r3, r1, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	fba0 2303 	umull	r2, r3, r0, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002400:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	6821      	ldr	r1, [r4, #0]
 800240a:	4413      	add	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800240e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002410:	f7ff fdbc 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8002414:	4602      	mov	r2, r0
 8002416:	e7dd      	b.n	80023d4 <UART_SetConfig+0x48>
 8002418:	40013800 	.word	0x40013800
 800241c:	51eb851f 	.word	0x51eb851f

08002420 <UART_WaitOnFlagUntilTimeout>:
{
 8002420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002424:	4605      	mov	r5, r0
 8002426:	460f      	mov	r7, r1
 8002428:	4616      	mov	r6, r2
 800242a:	4699      	mov	r9, r3
 800242c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002430:	682c      	ldr	r4, [r5, #0]
 8002432:	6824      	ldr	r4, [r4, #0]
 8002434:	ea37 0304 	bics.w	r3, r7, r4
 8002438:	bf0c      	ite	eq
 800243a:	f04f 0c01 	moveq.w	ip, #1
 800243e:	f04f 0c00 	movne.w	ip, #0
 8002442:	45b4      	cmp	ip, r6
 8002444:	d11f      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8002446:	f1b8 3fff 	cmp.w	r8, #4294967295
 800244a:	d0f1      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800244c:	f1b8 0f00 	cmp.w	r8, #0
 8002450:	d005      	beq.n	800245e <UART_WaitOnFlagUntilTimeout+0x3e>
 8002452:	f7fe fbb9 	bl	8000bc8 <HAL_GetTick>
 8002456:	eba0 0009 	sub.w	r0, r0, r9
 800245a:	4540      	cmp	r0, r8
 800245c:	d9e8      	bls.n	8002430 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800245e:	682a      	ldr	r2, [r5, #0]
 8002460:	68d3      	ldr	r3, [r2, #12]
 8002462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002466:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	682a      	ldr	r2, [r5, #0]
 800246a:	6953      	ldr	r3, [r2, #20]
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002472:	2320      	movs	r3, #32
 8002474:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002478:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800247c:	2300      	movs	r3, #0
 800247e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002482:	2003      	movs	r0, #3
 8002484:	e000      	b.n	8002488 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8002486:	2000      	movs	r0, #0
}
 8002488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800248c <HAL_UART_Init>:
  if (huart == NULL)
 800248c:	b358      	cbz	r0, 80024e6 <HAL_UART_Init+0x5a>
{
 800248e:	b510      	push	{r4, lr}
 8002490:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002492:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002496:	b30b      	cbz	r3, 80024dc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002498:	2324      	movs	r3, #36	; 0x24
 800249a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	68d3      	ldr	r3, [r2, #12]
 80024a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff ff6f 	bl	800238c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6913      	ldr	r3, [r2, #16]
 80024b2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024b6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b8:	6822      	ldr	r2, [r4, #0]
 80024ba:	6953      	ldr	r3, [r2, #20]
 80024bc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80024c0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80024c2:	6822      	ldr	r2, [r4, #0]
 80024c4:	68d3      	ldr	r3, [r2, #12]
 80024c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ca:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	2000      	movs	r0, #0
 80024ce:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024d0:	2320      	movs	r3, #32
 80024d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80024da:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80024dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80024e0:	f001 fe28 	bl	8004134 <HAL_UART_MspInit>
 80024e4:	e7d8      	b.n	8002498 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
}
 80024e8:	4770      	bx	lr

080024ea <HAL_UART_Transmit>:
{
 80024ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d154      	bne.n	80025a6 <HAL_UART_Transmit+0xbc>
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
 8002500:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002502:	2900      	cmp	r1, #0
 8002504:	d053      	beq.n	80025ae <HAL_UART_Transmit+0xc4>
 8002506:	2a00      	cmp	r2, #0
 8002508:	d053      	beq.n	80025b2 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800250a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d051      	beq.n	80025b6 <HAL_UART_Transmit+0xcc>
 8002512:	2301      	movs	r3, #1
 8002514:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	2300      	movs	r3, #0
 800251a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251c:	2321      	movs	r3, #33	; 0x21
 800251e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002522:	f7fe fb51 	bl	8000bc8 <HAL_GetTick>
 8002526:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002528:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800252c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002536:	d005      	beq.n	8002544 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8002538:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 800253c:	2300      	movs	r3, #0
 800253e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002542:	e012      	b.n	800256a <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002544:	6923      	ldr	r3, [r4, #16]
 8002546:	b113      	cbz	r3, 800254e <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8002548:	f04f 0800 	mov.w	r8, #0
 800254c:	e7f6      	b.n	800253c <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 800254e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002550:	2500      	movs	r5, #0
 8002552:	e7f3      	b.n	800253c <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002554:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002560:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002562:	b292      	uxth	r2, r2
 8002564:	3a01      	subs	r2, #1
 8002566:	b292      	uxth	r2, r2
 8002568:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800256a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800256c:	b29b      	uxth	r3, r3
 800256e:	b173      	cbz	r3, 800258e <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002570:	9600      	str	r6, [sp, #0]
 8002572:	463b      	mov	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff51 	bl	8002420 <UART_WaitOnFlagUntilTimeout>
 800257e:	b9e0      	cbnz	r0, 80025ba <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8002580:	2d00      	cmp	r5, #0
 8002582:	d0e7      	beq.n	8002554 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002584:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800258c:	e7e8      	b.n	8002560 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	9600      	str	r6, [sp, #0]
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff ff42 	bl	8002420 <UART_WaitOnFlagUntilTimeout>
 800259c:	b978      	cbnz	r0, 80025be <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800259e:	2320      	movs	r3, #32
 80025a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80025a4:	e000      	b.n	80025a8 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80025a6:	2002      	movs	r0, #2
}
 80025a8:	b002      	add	sp, #8
 80025aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80025ae:	2001      	movs	r0, #1
 80025b0:	e7fa      	b.n	80025a8 <HAL_UART_Transmit+0xbe>
 80025b2:	2001      	movs	r0, #1
 80025b4:	e7f8      	b.n	80025a8 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80025b6:	2002      	movs	r0, #2
 80025b8:	e7f6      	b.n	80025a8 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80025ba:	2003      	movs	r0, #3
 80025bc:	e7f4      	b.n	80025a8 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 80025be:	2003      	movs	r0, #3
 80025c0:	e7f2      	b.n	80025a8 <HAL_UART_Transmit+0xbe>

080025c2 <HAL_UART_TxCpltCallback>:
}
 80025c2:	4770      	bx	lr

080025c4 <UART_EndTransmit_IT>:
{
 80025c4:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025c6:	6801      	ldr	r1, [r0, #0]
 80025c8:	68ca      	ldr	r2, [r1, #12]
 80025ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ce:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025d0:	2220      	movs	r2, #32
 80025d2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80025d6:	f7ff fff4 	bl	80025c2 <HAL_UART_TxCpltCallback>
}
 80025da:	2000      	movs	r0, #0
 80025dc:	bd08      	pop	{r3, pc}

080025de <HAL_UART_RxCpltCallback>:
}
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_RxHalfCpltCallback>:
}
 80025e0:	4770      	bx	lr

080025e2 <HAL_UART_ErrorCallback>:
}
 80025e2:	4770      	bx	lr

080025e4 <UART_DMAError>:
{
 80025e4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b21      	cmp	r3, #33	; 0x21
 80025f4:	d010      	beq.n	8002618 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b22      	cmp	r3, #34	; 0x22
 8002606:	d011      	beq.n	800262c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ffe6 	bl	80025e2 <HAL_UART_ErrorCallback>
}
 8002616:	bd10      	pop	{r4, pc}
 8002618:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800261c:	2a00      	cmp	r2, #0
 800261e:	d0ea      	beq.n	80025f6 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002620:	2300      	movs	r3, #0
 8002622:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff fe5f 	bl	80022e8 <UART_EndTxTransfer>
 800262a:	e7e4      	b.n	80025f6 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800262c:	2a00      	cmp	r2, #0
 800262e:	d0eb      	beq.n	8002608 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fe60 	bl	80022fa <UART_EndRxTransfer>
 800263a:	e7e5      	b.n	8002608 <UART_DMAError+0x24>

0800263c <UART_DMAAbortOnError>:
{
 800263c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002644:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002646:	f7ff ffcc 	bl	80025e2 <HAL_UART_ErrorCallback>
}
 800264a:	bd08      	pop	{r3, pc}

0800264c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800264c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b22      	cmp	r3, #34	; 0x22
 8002654:	d160      	bne.n	8002718 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002656:	6883      	ldr	r3, [r0, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d046      	beq.n	80026ec <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800265e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d004      	beq.n	8002670 <UART_Receive_IT+0x24>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14d      	bne.n	8002706 <UART_Receive_IT+0xba>
 800266a:	6903      	ldr	r3, [r0, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d14a      	bne.n	8002706 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002670:	6803      	ldr	r3, [r0, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002676:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002678:	3301      	adds	r3, #1
 800267a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800267c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29b      	uxth	r3, r3
 8002684:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002686:	2b00      	cmp	r3, #0
 8002688:	d148      	bne.n	800271c <UART_Receive_IT+0xd0>
{
 800268a:	b500      	push	{lr}
 800268c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800268e:	6802      	ldr	r2, [r0, #0]
 8002690:	68d3      	ldr	r3, [r2, #12]
 8002692:	f023 0320 	bic.w	r3, r3, #32
 8002696:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002698:	6802      	ldr	r2, [r0, #0]
 800269a:	68d3      	ldr	r3, [r2, #12]
 800269c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	6953      	ldr	r3, [r2, #20]
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026ac:	2320      	movs	r3, #32
 80026ae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d12c      	bne.n	8002712 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b8:	2300      	movs	r3, #0
 80026ba:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026bc:	6802      	ldr	r2, [r0, #0]
 80026be:	68d3      	ldr	r3, [r2, #12]
 80026c0:	f023 0310 	bic.w	r3, r3, #16
 80026c4:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026c6:	6803      	ldr	r3, [r0, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f012 0f10 	tst.w	r2, #16
 80026ce:	d006      	beq.n	80026de <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026d0:	2200      	movs	r2, #0
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026de:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80026e0:	f000 f9c8 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80026e4:	2000      	movs	r0, #0
}
 80026e6:	b003      	add	sp, #12
 80026e8:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ec:	6902      	ldr	r2, [r0, #16]
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d1b5      	bne.n	800265e <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80026fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002700:	3302      	adds	r3, #2
 8002702:	6283      	str	r3, [r0, #40]	; 0x28
 8002704:	e7ba      	b.n	800267c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270e:	7013      	strb	r3, [r2, #0]
 8002710:	e7b1      	b.n	8002676 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8002712:	f7ff ff64 	bl	80025de <HAL_UART_RxCpltCallback>
 8002716:	e7e5      	b.n	80026e4 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8002718:	2002      	movs	r0, #2
 800271a:	4770      	bx	lr
    return HAL_OK;
 800271c:	2000      	movs	r0, #0
}
 800271e:	4770      	bx	lr

08002720 <HAL_UART_IRQHandler>:
{
 8002720:	b530      	push	{r4, r5, lr}
 8002722:	b083      	sub	sp, #12
 8002724:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002726:	6802      	ldr	r2, [r0, #0]
 8002728:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800272a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800272c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800272e:	f013 050f 	ands.w	r5, r3, #15
 8002732:	d105      	bne.n	8002740 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002734:	f013 0f20 	tst.w	r3, #32
 8002738:	d002      	beq.n	8002740 <HAL_UART_IRQHandler+0x20>
 800273a:	f010 0f20 	tst.w	r0, #32
 800273e:	d119      	bne.n	8002774 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002740:	b12d      	cbz	r5, 800274e <HAL_UART_IRQHandler+0x2e>
 8002742:	f011 0101 	ands.w	r1, r1, #1
 8002746:	d119      	bne.n	800277c <HAL_UART_IRQHandler+0x5c>
 8002748:	f410 7f90 	tst.w	r0, #288	; 0x120
 800274c:	d116      	bne.n	800277c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002750:	2901      	cmp	r1, #1
 8002752:	d075      	beq.n	8002840 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002754:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002758:	d003      	beq.n	8002762 <HAL_UART_IRQHandler+0x42>
 800275a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800275e:	f040 80d7 	bne.w	8002910 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002762:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002766:	d003      	beq.n	8002770 <HAL_UART_IRQHandler+0x50>
 8002768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800276c:	f040 80d4 	bne.w	8002918 <HAL_UART_IRQHandler+0x1f8>
}
 8002770:	b003      	add	sp, #12
 8002772:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff ff69 	bl	800264c <UART_Receive_IT>
      return;
 800277a:	e7f9      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800277c:	f013 0f01 	tst.w	r3, #1
 8002780:	d006      	beq.n	8002790 <HAL_UART_IRQHandler+0x70>
 8002782:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002786:	d003      	beq.n	8002790 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002788:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002790:	f013 0f04 	tst.w	r3, #4
 8002794:	d004      	beq.n	80027a0 <HAL_UART_IRQHandler+0x80>
 8002796:	b119      	cbz	r1, 80027a0 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002798:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800279a:	f042 0202 	orr.w	r2, r2, #2
 800279e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a0:	f013 0f02 	tst.w	r3, #2
 80027a4:	d004      	beq.n	80027b0 <HAL_UART_IRQHandler+0x90>
 80027a6:	b119      	cbz	r1, 80027b0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027aa:	f042 0204 	orr.w	r2, r2, #4
 80027ae:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027b0:	f013 0f08 	tst.w	r3, #8
 80027b4:	d007      	beq.n	80027c6 <HAL_UART_IRQHandler+0xa6>
 80027b6:	f010 0f20 	tst.w	r0, #32
 80027ba:	d100      	bne.n	80027be <HAL_UART_IRQHandler+0x9e>
 80027bc:	b119      	cbz	r1, 80027c6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027c0:	f042 0208 	orr.w	r2, r2, #8
 80027c4:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d0d1      	beq.n	8002770 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027cc:	f013 0f20 	tst.w	r3, #32
 80027d0:	d002      	beq.n	80027d8 <HAL_UART_IRQHandler+0xb8>
 80027d2:	f010 0f20 	tst.w	r0, #32
 80027d6:	d121      	bne.n	800281c <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027e2:	f012 0f08 	tst.w	r2, #8
 80027e6:	d100      	bne.n	80027ea <HAL_UART_IRQHandler+0xca>
 80027e8:	b323      	cbz	r3, 8002834 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff fd85 	bl	80022fa <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027f8:	d018      	beq.n	800282c <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002800:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002802:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002804:	b173      	cbz	r3, 8002824 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002806:	4a46      	ldr	r2, [pc, #280]	; (8002920 <HAL_UART_IRQHandler+0x200>)
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800280a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800280c:	f7fe fe54 	bl	80014b8 <HAL_DMA_Abort_IT>
 8002810:	2800      	cmp	r0, #0
 8002812:	d0ad      	beq.n	8002770 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002814:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002816:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002818:	4798      	blx	r3
 800281a:	e7a9      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff15 	bl	800264c <UART_Receive_IT>
 8002822:	e7d9      	b.n	80027d8 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff fedc 	bl	80025e2 <HAL_UART_ErrorCallback>
 800282a:	e7a1      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff fed8 	bl	80025e2 <HAL_UART_ErrorCallback>
 8002832:	e79d      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff fed4 	bl	80025e2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	2300      	movs	r3, #0
 800283c:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 800283e:	e797      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002840:	f013 0f10 	tst.w	r3, #16
 8002844:	d086      	beq.n	8002754 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002846:	f010 0f10 	tst.w	r0, #16
 800284a:	d083      	beq.n	8002754 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284c:	2300      	movs	r3, #0
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6853      	ldr	r3, [r2, #4]
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285a:	6953      	ldr	r3, [r2, #20]
 800285c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002860:	d032      	beq.n	80028c8 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002864:	680b      	ldr	r3, [r1, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800286a:	2b00      	cmp	r3, #0
 800286c:	d080      	beq.n	8002770 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800286e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002870:	4298      	cmp	r0, r3
 8002872:	f67f af7d 	bls.w	8002770 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002876:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002878:	698b      	ldr	r3, [r1, #24]
 800287a:	2b20      	cmp	r3, #32
 800287c:	d108      	bne.n	8002890 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800287e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002880:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002882:	b29b      	uxth	r3, r3
 8002884:	1ac9      	subs	r1, r1, r3
 8002886:	b289      	uxth	r1, r1
 8002888:	4620      	mov	r0, r4
 800288a:	f000 f8f3 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
      return;
 800288e:	e76f      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002890:	68d3      	ldr	r3, [r2, #12]
 8002892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002896:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002898:	6822      	ldr	r2, [r4, #0]
 800289a:	6953      	ldr	r3, [r2, #20]
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a2:	6822      	ldr	r2, [r4, #0]
 80028a4:	6953      	ldr	r3, [r2, #20]
 80028a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028aa:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80028ac:	2320      	movs	r3, #32
 80028ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b2:	2300      	movs	r3, #0
 80028b4:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	68d3      	ldr	r3, [r2, #12]
 80028ba:	f023 0310 	bic.w	r3, r3, #16
 80028be:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028c2:	f7fe fdd7 	bl	8001474 <HAL_DMA_Abort>
 80028c6:	e7da      	b.n	800287e <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80028ca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80028d2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f43f af4a 	beq.w	8002770 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 80028dc:	2900      	cmp	r1, #0
 80028de:	f43f af47 	beq.w	8002770 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e2:	68d3      	ldr	r3, [r2, #12]
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	6953      	ldr	r3, [r2, #20]
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80028f4:	2320      	movs	r3, #32
 80028f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fa:	2300      	movs	r3, #0
 80028fc:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	68d3      	ldr	r3, [r2, #12]
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002908:	4620      	mov	r0, r4
 800290a:	f000 f8b3 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
      return;
 800290e:	e72f      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff fd0b 	bl	800232c <UART_Transmit_IT>
    return;
 8002916:	e72b      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff fe53 	bl	80025c4 <UART_EndTransmit_IT>
    return;
 800291e:	e727      	b.n	8002770 <HAL_UART_IRQHandler+0x50>
 8002920:	0800263d 	.word	0x0800263d

08002924 <UART_DMARxHalfCplt>:
{
 8002924:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002928:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800292e:	f7ff fe57 	bl	80025e0 <HAL_UART_RxHalfCpltCallback>
}
 8002932:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002934:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002936:	0849      	lsrs	r1, r1, #1
 8002938:	f000 f89c 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
 800293c:	e7f9      	b.n	8002932 <UART_DMARxHalfCplt+0xe>

0800293e <UART_DMAReceiveCplt>:
{
 800293e:	b508      	push	{r3, lr}
 8002940:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002942:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f013 0f20 	tst.w	r3, #32
 800294c:	d116      	bne.n	800297c <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	68d3      	ldr	r3, [r2, #12]
 8002956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295a:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295c:	6802      	ldr	r2, [r0, #0]
 800295e:	6953      	ldr	r3, [r2, #20]
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002966:	6802      	ldr	r2, [r0, #0]
 8002968:	6953      	ldr	r3, [r2, #20]
 800296a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002970:	2320      	movs	r3, #32
 8002972:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002976:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800297e:	2b01      	cmp	r3, #1
 8002980:	d008      	beq.n	8002994 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8002982:	f7ff fe2c 	bl	80025de <HAL_UART_RxCpltCallback>
}
 8002986:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	6802      	ldr	r2, [r0, #0]
 800298a:	68d3      	ldr	r3, [r2, #12]
 800298c:	f023 0310 	bic.w	r3, r3, #16
 8002990:	60d3      	str	r3, [r2, #12]
 8002992:	e7f3      	b.n	800297c <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002994:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002996:	f000 f86d 	bl	8002a74 <HAL_UARTEx_RxEventCallback>
 800299a:	e7f4      	b.n	8002986 <UART_DMAReceiveCplt+0x48>

0800299c <UART_Start_Receive_DMA>:
{
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	b083      	sub	sp, #12
 80029a0:	4604      	mov	r4, r0
 80029a2:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80029a4:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80029a6:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	2500      	movs	r5, #0
 80029aa:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ac:	2222      	movs	r2, #34	; 0x22
 80029ae:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80029b4:	4814      	ldr	r0, [pc, #80]	; (8002a08 <UART_Start_Receive_DMA+0x6c>)
 80029b6:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029ba:	4814      	ldr	r0, [pc, #80]	; (8002a0c <UART_Start_Receive_DMA+0x70>)
 80029bc:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80029be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029c0:	4813      	ldr	r0, [pc, #76]	; (8002a10 <UART_Start_Receive_DMA+0x74>)
 80029c2:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 80029c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029c6:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	460a      	mov	r2, r1
 80029cc:	1d01      	adds	r1, r0, #4
 80029ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029d0:	f7fe fd16 	bl	8001400 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80029d4:	9501      	str	r5, [sp, #4]
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	9201      	str	r2, [sp, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	9201      	str	r2, [sp, #4]
 80029e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 80029e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ec:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	6953      	ldr	r3, [r2, #20]
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	6953      	ldr	r3, [r2, #20]
 80029fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a00:	6153      	str	r3, [r2, #20]
}
 8002a02:	4628      	mov	r0, r5
 8002a04:	b003      	add	sp, #12
 8002a06:	bd30      	pop	{r4, r5, pc}
 8002a08:	0800293f 	.word	0x0800293f
 8002a0c:	08002925 	.word	0x08002925
 8002a10:	080025e5 	.word	0x080025e5

08002a14 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a14:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d121      	bne.n	8002a62 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002a24:	b1f9      	cbz	r1, 8002a66 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
 8002a26:	b302      	cbz	r2, 8002a6a <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
    __HAL_LOCK(huart);
 8002a28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d01f      	beq.n	8002a70 <HAL_UARTEx_ReceiveToIdle_DMA+0x5c>
 8002a30:	2301      	movs	r3, #1
 8002a32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002a36:	6303      	str	r3, [r0, #48]	; 0x30
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002a38:	f7ff ffb0 	bl	800299c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8002a3c:	b9b0      	cbnz	r0, 8002a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
    return status;
 8002a46:	e011      	b.n	8002a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	9201      	str	r2, [sp, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	9201      	str	r2, [sp, #4]
 8002a56:	9a01      	ldr	r2, [sp, #4]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	f042 0210 	orr.w	r2, r2, #16
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	e004      	b.n	8002a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
    return HAL_BUSY;
 8002a62:	2002      	movs	r0, #2
}
 8002a64:	4770      	bx	lr
      return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
 8002a68:	e000      	b.n	8002a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
 8002a6a:	2001      	movs	r0, #1
}
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 8002a70:	2002      	movs	r0, #2
 8002a72:	e7fb      	b.n	8002a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x58>

08002a74 <HAL_UARTEx_RxEventCallback>:
 * @param
 * @param
 * @retval ***NONE***
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002a74:	b510      	push	{r4, lr}
 8002a76:	4604      	mov	r4, r0
	/* Prevent unused argument(s) compilation warning */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002a78:	2110      	movs	r1, #16
 8002a7a:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <HAL_UARTEx_RxEventCallback+0x40>)
 8002a7c:	f7fe ff29 	bl	80018d2 <HAL_GPIO_TogglePin>
	if (huart->Instance == USART3) {
 8002a80:	6822      	ldr	r2, [r4, #0]
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_UARTEx_RxEventCallback+0x44>)
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d004      	beq.n	8002a92 <HAL_UARTEx_RxEventCallback+0x1e>
		USART3_Message_Received();
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
				DMA_RX_BUFFER_SIZE);
	}
	if (huart->Instance == USART2) {
 8002a88:	6822      	ldr	r2, [r4, #0]
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_UARTEx_RxEventCallback+0x48>)
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d008      	beq.n	8002aa2 <HAL_UARTEx_RxEventCallback+0x2e>
		uart2MessageReceived();
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2,
				DMA_RX_BUFFER_SIZE);
	}
}
 8002a90:	bd10      	pop	{r4, pc}
		USART3_Message_Received();
 8002a92:	f000 fc7f 	bl	8003394 <USART3_Message_Received>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3,
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002a9a:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <HAL_UARTEx_RxEventCallback+0x50>)
 8002a9c:	f7ff ffba 	bl	8002a14 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002aa0:	e7f2      	b.n	8002a88 <HAL_UARTEx_RxEventCallback+0x14>
		uart2MessageReceived();
 8002aa2:	f001 f925 	bl	8003cf0 <uart2MessageReceived>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2,
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <HAL_UARTEx_RxEventCallback+0x54>)
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <HAL_UARTEx_RxEventCallback+0x58>)
 8002aac:	f7ff ffb2 	bl	8002a14 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002ab0:	e7ee      	b.n	8002a90 <HAL_UARTEx_RxEventCallback+0x1c>
 8002ab2:	bf00      	nop
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	40004400 	.word	0x40004400
 8002ac0:	200000a0 	.word	0x200000a0
 8002ac4:	20000fb8 	.word	0x20000fb8
 8002ac8:	20000120 	.word	0x20000120
 8002acc:	20000f74 	.word	0x20000f74

08002ad0 <USART_Init>:
 * @brief
 * @param
 * @param
 * @retval ***NONE***
 */
void USART_Init(void) {
 8002ad0:	b510      	push	{r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DMA_RX_Buffer_3, DMA_RX_BUFFER_SIZE);
 8002ad2:	4c06      	ldr	r4, [pc, #24]	; (8002aec <USART_Init+0x1c>)
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <USART_Init+0x20>)
 8002ada:	f7ff ff9b 	bl	8002a14 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, DMA_RX_Buffer_2, DMA_RX_BUFFER_SIZE);
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	18a1      	adds	r1, r4, r2
 8002ae2:	4804      	ldr	r0, [pc, #16]	; (8002af4 <USART_Init+0x24>)
 8002ae4:	f7ff ff96 	bl	8002a14 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	bf00      	nop
 8002aec:	200000a0 	.word	0x200000a0
 8002af0:	20000fb8 	.word	0x20000fb8
 8002af4:	20000f74 	.word	0x20000f74

08002af8 <ECU_erro_bin_to_int>:

extern CanIdData_t can_vector[CAN_IDS_NUMBER];
extern int8_t FLAG_MSG;

uint8_t ECU_erro_bin_to_int() {
	for (int8_t i = 15; i >= 0; i--) {
 8002af8:	230f      	movs	r3, #15
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <ECU_erro_bin_to_int+0x1e>
		if ((can_vector[ID_control_torque_motor].word_0 >> i) == 1) {
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <ECU_erro_bin_to_int+0x24>)
 8002b00:	f8b2 2270 	ldrh.w	r2, [r2, #624]	; 0x270
 8002b04:	411a      	asrs	r2, r3
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d002      	beq.n	8002b10 <ECU_erro_bin_to_int+0x18>
	for (int8_t i = 15; i >= 0; i--) {
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	e7f4      	b.n	8002afa <ECU_erro_bin_to_int+0x2>
			return i + 1;
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2d8      	uxtb	r0, r3
 8002b14:	4770      	bx	lr
		}
	}
	return 0;
 8002b16:	2000      	movs	r0, #0
}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200001b4 	.word	0x200001b4

08002b20 <BMS_erro_bin_to_int>:

uint8_t BMS_erro_bin_to_int() {
	for (int8_t i = 8; i >= 0; i--)
 8002b20:	2308      	movs	r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <BMS_erro_bin_to_int+0x1e>
		if ((can_vector[ID_safety_bms].word_1) >> i == 1)
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <BMS_erro_bin_to_int+0x24>)
 8002b28:	f8b2 271a 	ldrh.w	r2, [r2, #1818]	; 0x71a
 8002b2c:	411a      	asrs	r2, r3
 8002b2e:	2a01      	cmp	r2, #1
 8002b30:	d002      	beq.n	8002b38 <BMS_erro_bin_to_int+0x18>
	for (int8_t i = 8; i >= 0; i--)
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	e7f4      	b.n	8002b22 <BMS_erro_bin_to_int+0x2>
			return i + 1;
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2d8      	uxtb	r0, r3
 8002b3c:	4770      	bx	lr
	return 0;
 8002b3e:	2000      	movs	r0, #0
}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200001b4 	.word	0x200001b4

08002b48 <INVERSOR_flag>:

uint16_t INVERSOR_flag() {
	uint16_t FALHA = 0;
	uint16_t ALARME = 0;

	if (can_vector[ID_control_state_l_inv].word_1
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <INVERSOR_flag+0x28>)
 8002b4a:	f8b3 22c2 	ldrh.w	r2, [r3, #706]	; 0x2c2
			> can_vector[ID_control_state_r_inv].word_1)
 8002b4e:	f8b3 0312 	ldrh.w	r0, [r3, #786]	; 0x312
	if (can_vector[ID_control_state_l_inv].word_1
 8002b52:	4282      	cmp	r2, r0
 8002b54:	d900      	bls.n	8002b58 <INVERSOR_flag+0x10>
		FALHA = can_vector[ID_control_state_l_inv].word_1;
 8002b56:	4610      	mov	r0, r2
	else
		FALHA = can_vector[ID_control_state_r_inv].word_1;

	if (can_vector[ID_control_state_l_inv].word_2
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <INVERSOR_flag+0x28>)
 8002b5a:	f8b3 22c4 	ldrh.w	r2, [r3, #708]	; 0x2c4
			> can_vector[ID_control_state_r_inv].word_2)
 8002b5e:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
	if (can_vector[ID_control_state_l_inv].word_2
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d900      	bls.n	8002b68 <INVERSOR_flag+0x20>
		ALARME = can_vector[ID_control_state_l_inv].word_2;
 8002b66:	4613      	mov	r3, r2
	else
		ALARME = can_vector[ID_control_state_r_inv].word_2;

	if (FALHA != 0)
 8002b68:	b900      	cbnz	r0, 8002b6c <INVERSOR_flag+0x24>
		return FALHA;
	else if (ALARME != 0)
		return ALARME;
 8002b6a:	4618      	mov	r0, r3
	return 0;
}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200001b4 	.word	0x200001b4

08002b74 <FAILURE_IT>:

void FAILURE_IT() {
 8002b74:	b510      	push	{r4, lr}
	/*Verify if have an control flag error during 1s*/
	ERRO_CONTROLE = _ERRO_CONTROLE;
 8002b76:	f7ff ffbf 	bl	8002af8 <ECU_erro_bin_to_int>
 8002b7a:	4c1f      	ldr	r4, [pc, #124]	; (8002bf8 <FAILURE_IT+0x84>)
 8002b7c:	8020      	strh	r0, [r4, #0]
	ERRO_INVERSOR = _ERRO_INVERSOR;
 8002b7e:	f7ff ffe3 	bl	8002b48 <INVERSOR_flag>
 8002b82:	8060      	strh	r0, [r4, #2]
	ERRO_SEGURANCA = _ERRO_SEGURANCA;
 8002b84:	f7ff ffcc 	bl	8002b20 <BMS_erro_bin_to_int>
 8002b88:	80a0      	strh	r0, [r4, #4]

	switch (actual_erro) {
 8002b8a:	79a3      	ldrb	r3, [r4, #6]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	f200 822c 	bhi.w	8002fea <FAILURE_IT+0x476>
 8002b92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b96:	0004      	.short	0x0004
 8002b98:	01f40039 	.word	0x01f40039
 8002b9c:	020f      	.short	0x020f
	case CONTROLE:
		ERRO = _ERRO_CONTROLE;
 8002b9e:	f7ff ffab 	bl	8002af8 <ECU_erro_bin_to_int>
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <FAILURE_IT+0x84>)
 8002ba4:	8118      	strh	r0, [r3, #8]

		if (timer_wait_ms(flagsTimeout, CONTROLE_flags_timer))
 8002ba6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002baa:	68d8      	ldr	r0, [r3, #12]
 8002bac:	f000 fa5c 	bl	8003068 <timer_wait_ms>
 8002bb0:	b110      	cbz	r0, 8002bb8 <FAILURE_IT+0x44>
			ERRO = 0;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	811a      	strh	r2, [r3, #8]

		switch (ERRO) {
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bba:	891b      	ldrh	r3, [r3, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	d81c      	bhi.n	8002bfc <FAILURE_IT+0x88>
 8002bc2:	e8df f003 	tbb	[pc, r3]
 8002bc6:	0905      	.short	0x0905
 8002bc8:	1b1b1b1b 	.word	0x1b1b1b1b
 8002bcc:	15110d1b 	.word	0x15110d1b
		case 1:
			FLAG_POP_UP = 1;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	741a      	strb	r2, [r3, #16]
			return;
 8002bd6:	e208      	b.n	8002fea <FAILURE_IT+0x476>
		case 2:
			FLAG_POP_UP = 2;
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bda:	2202      	movs	r2, #2
 8002bdc:	741a      	strb	r2, [r3, #16]
			return;
 8002bde:	e204      	b.n	8002fea <FAILURE_IT+0x476>
		case 8:
			FLAG_POP_UP = 46;
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <FAILURE_IT+0x84>)
 8002be2:	222e      	movs	r2, #46	; 0x2e
 8002be4:	741a      	strb	r2, [r3, #16]
			return;
 8002be6:	e200      	b.n	8002fea <FAILURE_IT+0x476>
		case 9:
			FLAG_POP_UP = 47;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bea:	222f      	movs	r2, #47	; 0x2f
 8002bec:	741a      	strb	r2, [r3, #16]
			return;
 8002bee:	e1fc      	b.n	8002fea <FAILURE_IT+0x476>
		case 10:
			FLAG_POP_UP = 48;
 8002bf0:	4b01      	ldr	r3, [pc, #4]	; (8002bf8 <FAILURE_IT+0x84>)
 8002bf2:	2230      	movs	r2, #48	; 0x30
 8002bf4:	741a      	strb	r2, [r3, #16]
			return;
 8002bf6:	e1f8      	b.n	8002fea <FAILURE_IT+0x476>
 8002bf8:	200001a0 	.word	0x200001a0
		default:
			actual_erro = INVERSOR;
 8002bfc:	487b      	ldr	r0, [pc, #492]	; (8002dec <FAILURE_IT+0x278>)
 8002bfe:	2301      	movs	r3, #1
 8002c00:	7183      	strb	r3, [r0, #6]
			timer_restart(&flagsTimeout);
 8002c02:	300c      	adds	r0, #12
 8002c04:	f000 fa3c 	bl	8003080 <timer_restart>
		}
	case INVERSOR:
		/*Verify if have an control flag status during 1s*/
		ERRO = _ERRO_INVERSOR;
 8002c08:	f7ff ff9e 	bl	8002b48 <INVERSOR_flag>
 8002c0c:	4b77      	ldr	r3, [pc, #476]	; (8002dec <FAILURE_IT+0x278>)
 8002c0e:	8118      	strh	r0, [r3, #8]

		if (timer_wait_ms(flagsTimeout, CONTROLE_flags_timer))
 8002c10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c14:	68d8      	ldr	r0, [r3, #12]
 8002c16:	f000 fa27 	bl	8003068 <timer_wait_ms>
 8002c1a:	b110      	cbz	r0, 8002c22 <FAILURE_IT+0xae>
			ERRO = 0;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <FAILURE_IT+0x278>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	811a      	strh	r2, [r3, #8]

		switch (ERRO) {
 8002c22:	4b72      	ldr	r3, [pc, #456]	; (8002dec <FAILURE_IT+0x278>)
 8002c24:	891b      	ldrh	r3, [r3, #8]
 8002c26:	2beb      	cmp	r3, #235	; 0xeb
 8002c28:	f200 80e2 	bhi.w	8002df0 <FAILURE_IT+0x27c>
 8002c2c:	2b15      	cmp	r3, #21
 8002c2e:	f0c0 81a0 	bcc.w	8002f72 <FAILURE_IT+0x3fe>
 8002c32:	3b15      	subs	r3, #21
 8002c34:	2bd6      	cmp	r3, #214	; 0xd6
 8002c36:	f200 819c 	bhi.w	8002f72 <FAILURE_IT+0x3fe>
 8002c3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c3e:	012a      	.short	0x012a
 8002c40:	019a012e 	.word	0x019a012e
 8002c44:	019a019a 	.word	0x019a019a
 8002c48:	019a019a 	.word	0x019a019a
 8002c4c:	019a019a 	.word	0x019a019a
 8002c50:	019a0132 	.word	0x019a0132
 8002c54:	019a019a 	.word	0x019a019a
 8002c58:	019a0136 	.word	0x019a0136
 8002c5c:	019a019a 	.word	0x019a019a
 8002c60:	019a013a 	.word	0x019a013a
 8002c64:	019a019a 	.word	0x019a019a
 8002c68:	019a019a 	.word	0x019a019a
 8002c6c:	019a019a 	.word	0x019a019a
 8002c70:	00f200ee 	.word	0x00f200ee
 8002c74:	019a013e 	.word	0x019a013e
 8002c78:	014200f6 	.word	0x014200f6
 8002c7c:	019a019a 	.word	0x019a019a
 8002c80:	019a019a 	.word	0x019a019a
 8002c84:	019a019a 	.word	0x019a019a
 8002c88:	019a019a 	.word	0x019a019a
 8002c8c:	019a019a 	.word	0x019a019a
 8002c90:	019a019a 	.word	0x019a019a
 8002c94:	019a019a 	.word	0x019a019a
 8002c98:	0146019a 	.word	0x0146019a
 8002c9c:	019a019a 	.word	0x019a019a
 8002ca0:	014a019a 	.word	0x014a019a
 8002ca4:	019a014e 	.word	0x019a014e
 8002ca8:	019a019a 	.word	0x019a019a
 8002cac:	019a019a 	.word	0x019a019a
 8002cb0:	01560152 	.word	0x01560152
 8002cb4:	019a015a 	.word	0x019a015a
 8002cb8:	019a019a 	.word	0x019a019a
 8002cbc:	019a015e 	.word	0x019a015e
 8002cc0:	019a019a 	.word	0x019a019a
 8002cc4:	019a019a 	.word	0x019a019a
 8002cc8:	016200fa 	.word	0x016200fa
 8002ccc:	019a019a 	.word	0x019a019a
 8002cd0:	019a019a 	.word	0x019a019a
 8002cd4:	019a019a 	.word	0x019a019a
 8002cd8:	016600fe 	.word	0x016600fe
 8002cdc:	019a019a 	.word	0x019a019a
 8002ce0:	019a019a 	.word	0x019a019a
 8002ce4:	019a019a 	.word	0x019a019a
 8002ce8:	019a019a 	.word	0x019a019a
 8002cec:	019a019a 	.word	0x019a019a
 8002cf0:	019a0102 	.word	0x019a0102
 8002cf4:	019a019a 	.word	0x019a019a
 8002cf8:	019a019a 	.word	0x019a019a
 8002cfc:	019a019a 	.word	0x019a019a
 8002d00:	019a019a 	.word	0x019a019a
 8002d04:	019a019a 	.word	0x019a019a
 8002d08:	019a019a 	.word	0x019a019a
 8002d0c:	019a019a 	.word	0x019a019a
 8002d10:	019a019a 	.word	0x019a019a
 8002d14:	019a0106 	.word	0x019a0106
 8002d18:	019a019a 	.word	0x019a019a
 8002d1c:	010a019a 	.word	0x010a019a
 8002d20:	0112010e 	.word	0x0112010e
 8002d24:	019a0116 	.word	0x019a0116
 8002d28:	019a019a 	.word	0x019a019a
 8002d2c:	019a019a 	.word	0x019a019a
 8002d30:	019a019a 	.word	0x019a019a
 8002d34:	019a019a 	.word	0x019a019a
 8002d38:	019a019a 	.word	0x019a019a
 8002d3c:	019a019a 	.word	0x019a019a
 8002d40:	019a016a 	.word	0x019a016a
 8002d44:	016e011a 	.word	0x016e011a
 8002d48:	019a019a 	.word	0x019a019a
 8002d4c:	01760172 	.word	0x01760172
 8002d50:	019a017a 	.word	0x019a017a
 8002d54:	019a019a 	.word	0x019a019a
 8002d58:	019a019a 	.word	0x019a019a
 8002d5c:	019a019a 	.word	0x019a019a
 8002d60:	019a019a 	.word	0x019a019a
 8002d64:	019a019a 	.word	0x019a019a
 8002d68:	019a019a 	.word	0x019a019a
 8002d6c:	019a019a 	.word	0x019a019a
 8002d70:	019a019a 	.word	0x019a019a
 8002d74:	019a019a 	.word	0x019a019a
 8002d78:	019a019a 	.word	0x019a019a
 8002d7c:	019a019a 	.word	0x019a019a
 8002d80:	0182017e 	.word	0x0182017e
 8002d84:	0186019a 	.word	0x0186019a
 8002d88:	019a019a 	.word	0x019a019a
 8002d8c:	019a019a 	.word	0x019a019a
 8002d90:	019a019a 	.word	0x019a019a
 8002d94:	019a019a 	.word	0x019a019a
 8002d98:	019a019a 	.word	0x019a019a
 8002d9c:	019a019a 	.word	0x019a019a
 8002da0:	019a019a 	.word	0x019a019a
 8002da4:	019a019a 	.word	0x019a019a
 8002da8:	019a019a 	.word	0x019a019a
 8002dac:	019a019a 	.word	0x019a019a
 8002db0:	019a019a 	.word	0x019a019a
 8002db4:	019a019a 	.word	0x019a019a
 8002db8:	019a019a 	.word	0x019a019a
 8002dbc:	019a019a 	.word	0x019a019a
 8002dc0:	019a019a 	.word	0x019a019a
 8002dc4:	019a019a 	.word	0x019a019a
 8002dc8:	019a019a 	.word	0x019a019a
 8002dcc:	019a019a 	.word	0x019a019a
 8002dd0:	019a019a 	.word	0x019a019a
 8002dd4:	019a019a 	.word	0x019a019a
 8002dd8:	019a019a 	.word	0x019a019a
 8002ddc:	019a018a 	.word	0x019a018a
 8002de0:	019a019a 	.word	0x019a019a
 8002de4:	019a019a 	.word	0x019a019a
 8002de8:	0192018e 	.word	0x0192018e
 8002dec:	200001a0 	.word	0x200001a0
 8002df0:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 8002df4:	f080 80bd 	bcs.w	8002f72 <FAILURE_IT+0x3fe>
 8002df8:	f240 22be 	movw	r2, #702	; 0x2be
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f0c0 80b8 	bcc.w	8002f72 <FAILURE_IT+0x3fe>
 8002e02:	f2a3 23be 	subw	r3, r3, #702	; 0x2be
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	f200 80b3 	bhi.w	8002f72 <FAILURE_IT+0x3fe>
 8002e0c:	e8df f003 	tbb	[pc, r3]
 8002e10:	b139b135 	.word	0xb139b135
 8002e14:	b1b1b13d 	.word	0xb1b1b13d
 8002e18:	adb1      	.short	0xadb1
		case 46:
			FLAG_POP_UP = 3;
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <FAILURE_IT+0x490>)
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	741a      	strb	r2, [r3, #16]
			return;
 8002e20:	e0e3      	b.n	8002fea <FAILURE_IT+0x476>
		case 47:
			FLAG_POP_UP = 4;
 8002e22:	4b78      	ldr	r3, [pc, #480]	; (8003004 <FAILURE_IT+0x490>)
 8002e24:	2204      	movs	r2, #4
 8002e26:	741a      	strb	r2, [r3, #16]
			return;
 8002e28:	e0df      	b.n	8002fea <FAILURE_IT+0x476>
		case 50:
			FLAG_POP_UP = 5;
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <FAILURE_IT+0x490>)
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	741a      	strb	r2, [r3, #16]
			return;
 8002e30:	e0db      	b.n	8002fea <FAILURE_IT+0x476>
		case 90:
			FLAG_POP_UP = 6;
 8002e32:	4b74      	ldr	r3, [pc, #464]	; (8003004 <FAILURE_IT+0x490>)
 8002e34:	2206      	movs	r2, #6
 8002e36:	741a      	strb	r2, [r3, #16]
			return;
 8002e38:	e0d7      	b.n	8002fea <FAILURE_IT+0x476>
		case 98:
			FLAG_POP_UP = 7;
 8002e3a:	4b72      	ldr	r3, [pc, #456]	; (8003004 <FAILURE_IT+0x490>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	741a      	strb	r2, [r3, #16]
			return;
 8002e40:	e0d3      	b.n	8002fea <FAILURE_IT+0x476>
		case 110:
			FLAG_POP_UP = 8;
 8002e42:	4b70      	ldr	r3, [pc, #448]	; (8003004 <FAILURE_IT+0x490>)
 8002e44:	2208      	movs	r2, #8
 8002e46:	741a      	strb	r2, [r3, #16]
			return;
 8002e48:	e0cf      	b.n	8002fea <FAILURE_IT+0x476>
		case 128:
			FLAG_POP_UP = 9;
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <FAILURE_IT+0x490>)
 8002e4c:	2209      	movs	r2, #9
 8002e4e:	741a      	strb	r2, [r3, #16]
			return;
 8002e50:	e0cb      	b.n	8002fea <FAILURE_IT+0x476>
		case 133:
			FLAG_POP_UP = 10;
 8002e52:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <FAILURE_IT+0x490>)
 8002e54:	220a      	movs	r2, #10
 8002e56:	741a      	strb	r2, [r3, #16]
			return;
 8002e58:	e0c7      	b.n	8002fea <FAILURE_IT+0x476>
		case 134:
			FLAG_POP_UP = 11;
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <FAILURE_IT+0x490>)
 8002e5c:	220b      	movs	r2, #11
 8002e5e:	741a      	strb	r2, [r3, #16]
			return;
 8002e60:	e0c3      	b.n	8002fea <FAILURE_IT+0x476>
		case 135:
			FLAG_POP_UP = 12;
 8002e62:	4b68      	ldr	r3, [pc, #416]	; (8003004 <FAILURE_IT+0x490>)
 8002e64:	220c      	movs	r2, #12
 8002e66:	741a      	strb	r2, [r3, #16]
			return;
 8002e68:	e0bf      	b.n	8002fea <FAILURE_IT+0x476>
		case 136:
			FLAG_POP_UP = 13;
 8002e6a:	4b66      	ldr	r3, [pc, #408]	; (8003004 <FAILURE_IT+0x490>)
 8002e6c:	220d      	movs	r2, #13
 8002e6e:	741a      	strb	r2, [r3, #16]
			return;
 8002e70:	e0bb      	b.n	8002fea <FAILURE_IT+0x476>
		case 152:
			FLAG_POP_UP = 14;
 8002e72:	4b64      	ldr	r3, [pc, #400]	; (8003004 <FAILURE_IT+0x490>)
 8002e74:	220e      	movs	r2, #14
 8002e76:	741a      	strb	r2, [r3, #16]
			return;
 8002e78:	e0b7      	b.n	8002fea <FAILURE_IT+0x476>
		case 702:
			FLAG_POP_UP = 15;
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <FAILURE_IT+0x490>)
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	741a      	strb	r2, [r3, #16]
			return;
 8002e80:	e0b3      	b.n	8002fea <FAILURE_IT+0x476>
		case 704:
			FLAG_POP_UP = 16;
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <FAILURE_IT+0x490>)
 8002e84:	2210      	movs	r2, #16
 8002e86:	741a      	strb	r2, [r3, #16]
			return;
 8002e88:	e0af      	b.n	8002fea <FAILURE_IT+0x476>
		case 706:
			FLAG_POP_UP = 17;
 8002e8a:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <FAILURE_IT+0x490>)
 8002e8c:	2211      	movs	r2, #17
 8002e8e:	741a      	strb	r2, [r3, #16]
			return;
 8002e90:	e0ab      	b.n	8002fea <FAILURE_IT+0x476>
		case 21:
			FLAG_POP_UP = 18;
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <FAILURE_IT+0x490>)
 8002e94:	2212      	movs	r2, #18
 8002e96:	741a      	strb	r2, [r3, #16]
			return;
 8002e98:	e0a7      	b.n	8002fea <FAILURE_IT+0x476>
		case 22:
			FLAG_POP_UP = 19;
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <FAILURE_IT+0x490>)
 8002e9c:	2213      	movs	r2, #19
 8002e9e:	741a      	strb	r2, [r3, #16]
			return;
 8002ea0:	e0a3      	b.n	8002fea <FAILURE_IT+0x476>
		case 30:
			FLAG_POP_UP = 20;
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <FAILURE_IT+0x490>)
 8002ea4:	2214      	movs	r2, #20
 8002ea6:	741a      	strb	r2, [r3, #16]
			return;
 8002ea8:	e09f      	b.n	8002fea <FAILURE_IT+0x476>
		case 34:
			FLAG_POP_UP = 21;
 8002eaa:	4b56      	ldr	r3, [pc, #344]	; (8003004 <FAILURE_IT+0x490>)
 8002eac:	2215      	movs	r2, #21
 8002eae:	741a      	strb	r2, [r3, #16]
			return;
 8002eb0:	e09b      	b.n	8002fea <FAILURE_IT+0x476>
		case 38:
			FLAG_POP_UP = 22;
 8002eb2:	4b54      	ldr	r3, [pc, #336]	; (8003004 <FAILURE_IT+0x490>)
 8002eb4:	2216      	movs	r2, #22
 8002eb6:	741a      	strb	r2, [r3, #16]
			return;
 8002eb8:	e097      	b.n	8002fea <FAILURE_IT+0x476>
		case 48:
			FLAG_POP_UP = 23;
 8002eba:	4b52      	ldr	r3, [pc, #328]	; (8003004 <FAILURE_IT+0x490>)
 8002ebc:	2217      	movs	r2, #23
 8002ebe:	741a      	strb	r2, [r3, #16]
			return;
 8002ec0:	e093      	b.n	8002fea <FAILURE_IT+0x476>
		case 51:
			FLAG_POP_UP = 24;
 8002ec2:	4b50      	ldr	r3, [pc, #320]	; (8003004 <FAILURE_IT+0x490>)
 8002ec4:	2218      	movs	r2, #24
 8002ec6:	741a      	strb	r2, [r3, #16]
			return;
 8002ec8:	e08f      	b.n	8002fea <FAILURE_IT+0x476>
		case 67:
			FLAG_POP_UP = 25;
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <FAILURE_IT+0x490>)
 8002ecc:	2219      	movs	r2, #25
 8002ece:	741a      	strb	r2, [r3, #16]
			return;
 8002ed0:	e08b      	b.n	8002fea <FAILURE_IT+0x476>
		case 71:
			FLAG_POP_UP = 26;
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <FAILURE_IT+0x490>)
 8002ed4:	221a      	movs	r2, #26
 8002ed6:	741a      	strb	r2, [r3, #16]
			return;
 8002ed8:	e087      	b.n	8002fea <FAILURE_IT+0x476>
		case 72:
			FLAG_POP_UP = 27;
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <FAILURE_IT+0x490>)
 8002edc:	221b      	movs	r2, #27
 8002ede:	741a      	strb	r2, [r3, #16]
			return;
 8002ee0:	e083      	b.n	8002fea <FAILURE_IT+0x476>
		case 78:
			FLAG_POP_UP = 28;
 8002ee2:	4b48      	ldr	r3, [pc, #288]	; (8003004 <FAILURE_IT+0x490>)
 8002ee4:	221c      	movs	r2, #28
 8002ee6:	741a      	strb	r2, [r3, #16]
			return;
 8002ee8:	e07f      	b.n	8002fea <FAILURE_IT+0x476>
		case 79:
			FLAG_POP_UP = 29;
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <FAILURE_IT+0x490>)
 8002eec:	221d      	movs	r2, #29
 8002eee:	741a      	strb	r2, [r3, #16]
			return;
 8002ef0:	e07b      	b.n	8002fea <FAILURE_IT+0x476>
		case 80:
			FLAG_POP_UP = 30;
 8002ef2:	4b44      	ldr	r3, [pc, #272]	; (8003004 <FAILURE_IT+0x490>)
 8002ef4:	221e      	movs	r2, #30
 8002ef6:	741a      	strb	r2, [r3, #16]
			return;
 8002ef8:	e077      	b.n	8002fea <FAILURE_IT+0x476>
		case 84:
			FLAG_POP_UP = 31;
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <FAILURE_IT+0x490>)
 8002efc:	221f      	movs	r2, #31
 8002efe:	741a      	strb	r2, [r3, #16]
			return;
 8002f00:	e073      	b.n	8002fea <FAILURE_IT+0x476>
		case 91:
			FLAG_POP_UP = 32;
 8002f02:	4b40      	ldr	r3, [pc, #256]	; (8003004 <FAILURE_IT+0x490>)
 8002f04:	2220      	movs	r2, #32
 8002f06:	741a      	strb	r2, [r3, #16]
			return;
 8002f08:	e06f      	b.n	8002fea <FAILURE_IT+0x476>
		case 99:
			FLAG_POP_UP = 33;
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <FAILURE_IT+0x490>)
 8002f0c:	2221      	movs	r2, #33	; 0x21
 8002f0e:	741a      	strb	r2, [r3, #16]
			return;
 8002f10:	e06b      	b.n	8002fea <FAILURE_IT+0x476>
		case 150:
			FLAG_POP_UP = 34;
 8002f12:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <FAILURE_IT+0x490>)
 8002f14:	2222      	movs	r2, #34	; 0x22
 8002f16:	741a      	strb	r2, [r3, #16]
			return;
 8002f18:	e067      	b.n	8002fea <FAILURE_IT+0x476>
		case 153:
			FLAG_POP_UP = 35;
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <FAILURE_IT+0x490>)
 8002f1c:	2223      	movs	r2, #35	; 0x23
 8002f1e:	741a      	strb	r2, [r3, #16]
			return;
 8002f20:	e063      	b.n	8002fea <FAILURE_IT+0x476>
		case 156:
			FLAG_POP_UP = 36;
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <FAILURE_IT+0x490>)
 8002f24:	2224      	movs	r2, #36	; 0x24
 8002f26:	741a      	strb	r2, [r3, #16]
			return;
 8002f28:	e05f      	b.n	8002fea <FAILURE_IT+0x476>
		case 157:
			FLAG_POP_UP = 37;
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <FAILURE_IT+0x490>)
 8002f2c:	2225      	movs	r2, #37	; 0x25
 8002f2e:	741a      	strb	r2, [r3, #16]
			return;
 8002f30:	e05b      	b.n	8002fea <FAILURE_IT+0x476>
		case 158:
			FLAG_POP_UP = 38;
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <FAILURE_IT+0x490>)
 8002f34:	2226      	movs	r2, #38	; 0x26
 8002f36:	741a      	strb	r2, [r3, #16]
			return;
 8002f38:	e057      	b.n	8002fea <FAILURE_IT+0x476>
		case 182:
			FLAG_POP_UP = 39;
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <FAILURE_IT+0x490>)
 8002f3c:	2227      	movs	r2, #39	; 0x27
 8002f3e:	741a      	strb	r2, [r3, #16]
			return;
 8002f40:	e053      	b.n	8002fea <FAILURE_IT+0x476>
		case 183:
			FLAG_POP_UP = 40;
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <FAILURE_IT+0x490>)
 8002f44:	2228      	movs	r2, #40	; 0x28
 8002f46:	741a      	strb	r2, [r3, #16]
			return;
 8002f48:	e04f      	b.n	8002fea <FAILURE_IT+0x476>
		case 185:
			FLAG_POP_UP = 41;
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <FAILURE_IT+0x490>)
 8002f4c:	2229      	movs	r2, #41	; 0x29
 8002f4e:	741a      	strb	r2, [r3, #16]
			return;
 8002f50:	e04b      	b.n	8002fea <FAILURE_IT+0x476>
		case 228:
			FLAG_POP_UP = 42;
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <FAILURE_IT+0x490>)
 8002f54:	222a      	movs	r2, #42	; 0x2a
 8002f56:	741a      	strb	r2, [r3, #16]
			return;
 8002f58:	e047      	b.n	8002fea <FAILURE_IT+0x476>
		case 234:
			FLAG_POP_UP = 43;
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <FAILURE_IT+0x490>)
 8002f5c:	222b      	movs	r2, #43	; 0x2b
 8002f5e:	741a      	strb	r2, [r3, #16]
			return;
 8002f60:	e043      	b.n	8002fea <FAILURE_IT+0x476>
		case 235:
			FLAG_POP_UP = 44;
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <FAILURE_IT+0x490>)
 8002f64:	222c      	movs	r2, #44	; 0x2c
 8002f66:	741a      	strb	r2, [r3, #16]
			return;
 8002f68:	e03f      	b.n	8002fea <FAILURE_IT+0x476>
		case 711:
			FLAG_POP_UP = 45;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <FAILURE_IT+0x490>)
 8002f6c:	222d      	movs	r2, #45	; 0x2d
 8002f6e:	741a      	strb	r2, [r3, #16]
			return;
 8002f70:	e03b      	b.n	8002fea <FAILURE_IT+0x476>
		default:
			actual_erro = SEGURANCA;
 8002f72:	4824      	ldr	r0, [pc, #144]	; (8003004 <FAILURE_IT+0x490>)
 8002f74:	2302      	movs	r3, #2
 8002f76:	7183      	strb	r3, [r0, #6]
			timer_restart(&flagsTimeout);
 8002f78:	300c      	adds	r0, #12
 8002f7a:	f000 f881 	bl	8003080 <timer_restart>
		}
	case SEGURANCA:
		/*Verify if have an security flag error during 1s after control*/
		ERRO = _ERRO_SEGURANCA;
 8002f7e:	f7ff fdcf 	bl	8002b20 <BMS_erro_bin_to_int>
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <FAILURE_IT+0x490>)
 8002f84:	8118      	strh	r0, [r3, #8]

		if (timer_wait_ms(flagsTimeout, CONTROLE_flags_timer))
 8002f86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002f8a:	68d8      	ldr	r0, [r3, #12]
 8002f8c:	f000 f86c 	bl	8003068 <timer_wait_ms>
 8002f90:	b110      	cbz	r0, 8002f98 <FAILURE_IT+0x424>
			ERRO = 0;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <FAILURE_IT+0x490>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	811a      	strh	r2, [r3, #8]

		switch (ERRO) {
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <FAILURE_IT+0x490>)
 8002f9a:	891b      	ldrh	r3, [r3, #8]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d029      	beq.n	8002ff4 <FAILURE_IT+0x480>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d02b      	beq.n	8002ffc <FAILURE_IT+0x488>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d021      	beq.n	8002fec <FAILURE_IT+0x478>
			return;
		case 3:
			FLAG_POP_UP = 51;
			return;
		default:
			actual_erro = DEFAULT;
 8002fa8:	4816      	ldr	r0, [pc, #88]	; (8003004 <FAILURE_IT+0x490>)
 8002faa:	2303      	movs	r3, #3
 8002fac:	7183      	strb	r3, [r0, #6]
			timer_restart(&flagsTimeout);
 8002fae:	300c      	adds	r0, #12
 8002fb0:	f000 f866 	bl	8003080 <timer_restart>
		}
	case DEFAULT:
		/*If don't have error, flags error return to 0 */
		if (_ERRO_CONTROLE == 0 && _ERRO_INVERSOR == 0 && _ERRO_SEGURANCA == 0)
 8002fb4:	f7ff fda0 	bl	8002af8 <ECU_erro_bin_to_int>
 8002fb8:	b940      	cbnz	r0, 8002fcc <FAILURE_IT+0x458>
 8002fba:	f7ff fdc5 	bl	8002b48 <INVERSOR_flag>
 8002fbe:	b928      	cbnz	r0, 8002fcc <FAILURE_IT+0x458>
 8002fc0:	f7ff fdae 	bl	8002b20 <BMS_erro_bin_to_int>
 8002fc4:	b910      	cbnz	r0, 8002fcc <FAILURE_IT+0x458>
			FLAG_POP_UP = 0;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <FAILURE_IT+0x490>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	741a      	strb	r2, [r3, #16]

		/*If don't have error, displays message flags*/
		if (FLAG_POP_UP == 0)
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <FAILURE_IT+0x490>)
 8002fce:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002fd2:	b923      	cbnz	r3, 8002fde <FAILURE_IT+0x46a>
			FLAG_POP_UP = -FLAG_MSG; //massages are negative because of the organization of IDS in Nextion
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <FAILURE_IT+0x494>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	425b      	negs	r3, r3
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <FAILURE_IT+0x490>)
 8002fdc:	7413      	strb	r3, [r2, #16]

		actual_erro = CONTROLE;
 8002fde:	4809      	ldr	r0, [pc, #36]	; (8003004 <FAILURE_IT+0x490>)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	7183      	strb	r3, [r0, #6]
		timer_restart(&flagsTimeout);
 8002fe4:	300c      	adds	r0, #12
 8002fe6:	f000 f84b 	bl	8003080 <timer_restart>
	}
}
 8002fea:	bd10      	pop	{r4, pc}
			FLAG_POP_UP = 49;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <FAILURE_IT+0x490>)
 8002fee:	2231      	movs	r2, #49	; 0x31
 8002ff0:	741a      	strb	r2, [r3, #16]
			return;
 8002ff2:	e7fa      	b.n	8002fea <FAILURE_IT+0x476>
			FLAG_POP_UP = 50;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <FAILURE_IT+0x490>)
 8002ff6:	2232      	movs	r2, #50	; 0x32
 8002ff8:	741a      	strb	r2, [r3, #16]
			return;
 8002ffa:	e7f6      	b.n	8002fea <FAILURE_IT+0x476>
			FLAG_POP_UP = 51;
 8002ffc:	4b01      	ldr	r3, [pc, #4]	; (8003004 <FAILURE_IT+0x490>)
 8002ffe:	2233      	movs	r2, #51	; 0x33
 8003000:	741a      	strb	r2, [r3, #16]
			return;
 8003002:	e7f2      	b.n	8002fea <FAILURE_IT+0x476>
 8003004:	200001a0 	.word	0x200001a0
 8003008:	20000f22 	.word	0x20000f22

0800300c <interfaceInit>:
/* Auxiliar Variables */
int auxiliar = 0;
uint8_t vet_aux[128];
/* Functions */

void interfaceInit(void) {
 800300c:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800300e:	2064      	movs	r0, #100	; 0x64
 8003010:	f7fd fde0 	bl	8000bd4 <HAL_Delay>

	USART_Init();
 8003014:	f7ff fd5c 	bl	8002ad0 <USART_Init>

	nexInit();
 8003018:	f000 fc6e 	bl	80038f8 <nexInit>

//	NEXTION_Init();

	/* Global timer variables init */
}
 800301c:	bd08      	pop	{r3, pc}
	...

08003020 <canMessageReceived>:

	va_end(argList);
}

void canMessageReceived(uint16_t id, uint8_t *data) {
	if (id > CAN_IDS_NUMBER - 1)
 8003020:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8003024:	d20b      	bcs.n	800303e <canMessageReceived+0x1e>
		return;
	uint16_t *data_word = (uint16_t*) data;
	can_vector[id].word_0 = data_word[0];
 8003026:	880a      	ldrh	r2, [r1, #0]
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <canMessageReceived+0x20>)
 800302a:	f823 2030 	strh.w	r2, [r3, r0, lsl #3]
	can_vector[id].word_1 = data_word[1];
 800302e:	884a      	ldrh	r2, [r1, #2]
 8003030:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003034:	8042      	strh	r2, [r0, #2]
	can_vector[id].word_2 = data_word[2];
 8003036:	888b      	ldrh	r3, [r1, #4]
 8003038:	8083      	strh	r3, [r0, #4]
	can_vector[id].word_3 = data_word[3];
 800303a:	88cb      	ldrh	r3, [r1, #6]
 800303c:	80c3      	strh	r3, [r0, #6]
}
 800303e:	4770      	bx	lr
 8003040:	200001b4 	.word	0x200001b4

08003044 <blinkLed3>:

void blinkLed2(void) {
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
} /* Debug Led 2 */

void blinkLed3(void) {
 8003044:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8003046:	2110      	movs	r1, #16
 8003048:	4801      	ldr	r0, [pc, #4]	; (8003050 <blinkLed3+0xc>)
 800304a:	f7fe fc42 	bl	80018d2 <HAL_GPIO_TogglePin>
} /* Debug Led 3 */
 800304e:	bd08      	pop	{r3, pc}
 8003050:	40010800 	.word	0x40010800

08003054 <timerAtualization>:

void timerAtualization(void) {
 8003054:	b508      	push	{r3, lr}
	actualTimer = HAL_GetTick();
 8003056:	f7fd fdb7 	bl	8000bc8 <HAL_GetTick>
 800305a:	4b02      	ldr	r3, [pc, #8]	; (8003064 <timerAtualization+0x10>)
 800305c:	f8c3 0b40 	str.w	r0, [r3, #2880]	; 0xb40
}
 8003060:	bd08      	pop	{r3, pc}
 8003062:	bf00      	nop
 8003064:	200001b4 	.word	0x200001b4

08003068 <timer_wait_ms>:
	// if(auxiliar == 100) auxiliar = 0;
}

//timer_handler - BMS

uint8_t timer_wait_ms(uint32_t timer_start, uint32_t delay) {
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4605      	mov	r5, r0
 800306c:	460c      	mov	r4, r1
	const uint32_t current_time = HAL_GetTick();
 800306e:	f7fd fdab 	bl	8000bc8 <HAL_GetTick>
	if ((current_time - timer_start) >= delay) {
 8003072:	1b40      	subs	r0, r0, r5
 8003074:	42a0      	cmp	r0, r4
 8003076:	d201      	bcs.n	800307c <timer_wait_ms+0x14>
		return 1;
	}
	return 0;
 8003078:	2000      	movs	r0, #0
}
 800307a:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
 800307c:	2001      	movs	r0, #1
 800307e:	e7fc      	b.n	800307a <timer_wait_ms+0x12>

08003080 <timer_restart>:
void timer_restart(uint32_t *timer_to_restart) {
 8003080:	b510      	push	{r4, lr}
 8003082:	4604      	mov	r4, r0
	*timer_to_restart = HAL_GetTick();
 8003084:	f7fd fda0 	bl	8000bc8 <HAL_GetTick>
 8003088:	6020      	str	r0, [r4, #0]
}
 800308a:	bd10      	pop	{r4, pc}

0800308c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800308c:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800308e:	4824      	ldr	r0, [pc, #144]	; (8003120 <MX_CAN_Init+0x94>)
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <MX_CAN_Init+0x98>)
 8003092:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8003094:	2309      	movs	r3, #9
 8003096:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003098:	2300      	movs	r3, #0
 800309a:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800309c:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800309e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80030a2:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80030a4:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80030a6:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80030a8:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80030aa:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80030ac:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80030ae:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80030b0:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80030b2:	f7fd fda3 	bl	8000bfc <HAL_CAN_Init>
 80030b6:	bb30      	cbnz	r0, 8003106 <MX_CAN_Init+0x7a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80030b8:	4819      	ldr	r0, [pc, #100]	; (8003120 <MX_CAN_Init+0x94>)
 80030ba:	2300      	movs	r3, #0
 80030bc:	63c3      	str	r3, [r0, #60]	; 0x3c
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80030be:	6403      	str	r3, [r0, #64]	; 0x40
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80030c0:	2201      	movs	r2, #1
 80030c2:	6442      	str	r2, [r0, #68]	; 0x44
	sFilterConfig.FilterIdHigh = 0x0000;
 80030c4:	6283      	str	r3, [r0, #40]	; 0x28
	sFilterConfig.FilterIdLow = 0x0000;
 80030c6:	62c3      	str	r3, [r0, #44]	; 0x2c
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80030c8:	6303      	str	r3, [r0, #48]	; 0x30
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80030ca:	6343      	str	r3, [r0, #52]	; 0x34
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80030cc:	6383      	str	r3, [r0, #56]	; 0x38
	sFilterConfig.FilterActivation = ENABLE;
 80030ce:	6482      	str	r2, [r0, #72]	; 0x48
	sFilterConfig.SlaveStartFilterBank = 14;
 80030d0:	230e      	movs	r3, #14
 80030d2:	64c3      	str	r3, [r0, #76]	; 0x4c
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80030d4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80030d8:	f7fd fe36 	bl	8000d48 <HAL_CAN_ConfigFilter>
 80030dc:	b9b0      	cbnz	r0, 800310c <MX_CAN_Init+0x80>
		/* Filter configuration Error */
		Error_Handler();
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80030de:	4810      	ldr	r0, [pc, #64]	; (8003120 <MX_CAN_Init+0x94>)
 80030e0:	f7fd feb8 	bl	8000e54 <HAL_CAN_Start>
 80030e4:	b9a8      	cbnz	r0, 8003112 <MX_CAN_Init+0x86>
		/* Start Error */
		Error_Handler();
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80030e6:	2102      	movs	r1, #2
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <MX_CAN_Init+0x94>)
 80030ea:	f7fd ff8c 	bl	8001006 <HAL_CAN_ActivateNotification>
 80030ee:	b998      	cbnz	r0, 8003118 <MX_CAN_Init+0x8c>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
	}

	TxHeader.ExtId = 0x01;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <MX_CAN_Init+0x94>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
	TxHeader.RTR = CAN_RTR_DATA;
 80030f6:	2200      	movs	r2, #0
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c
	TxHeader.IDE = CAN_ID_STD;
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
	TxHeader.DLC = 8;
 80030fc:	2108      	movs	r1, #8
 80030fe:	6619      	str	r1, [r3, #96]	; 0x60
	TxHeader.TransmitGlobalTime = DISABLE;
 8003100:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

  /* USER CODE END CAN_Init 2 */

}
 8003104:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003106:	f000 fbd9 	bl	80038bc <Error_Handler>
 800310a:	e7d5      	b.n	80030b8 <MX_CAN_Init+0x2c>
		Error_Handler();
 800310c:	f000 fbd6 	bl	80038bc <Error_Handler>
 8003110:	e7e5      	b.n	80030de <MX_CAN_Init+0x52>
		Error_Handler();
 8003112:	f000 fbd3 	bl	80038bc <Error_Handler>
 8003116:	e7e6      	b.n	80030e6 <MX_CAN_Init+0x5a>
		Error_Handler();
 8003118:	f000 fbd0 	bl	80038bc <Error_Handler>
 800311c:	e7e8      	b.n	80030f0 <MX_CAN_Init+0x64>
 800311e:	bf00      	nop
 8003120:	20000d7c 	.word	0x20000d7c
 8003124:	40006400 	.word	0x40006400

08003128 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003128:	b510      	push	{r4, lr}
 800312a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	2300      	movs	r3, #0
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	9303      	str	r3, [sp, #12]
 8003132:	9304      	str	r3, [sp, #16]
 8003134:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 8003136:	6802      	ldr	r2, [r0, #0]
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_CAN_MspInit+0x9c>)
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800313e:	b006      	add	sp, #24
 8003140:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003142:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800314c:	61da      	str	r2, [r3, #28]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003154:	9200      	str	r2, [sp, #0]
 8003156:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	f042 0208 	orr.w	r2, r2, #8
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	4c15      	ldr	r4, [pc, #84]	; (80031c8 <HAL_CAN_MspInit+0xa0>)
 8003172:	a902      	add	r1, sp, #8
 8003174:	4620      	mov	r0, r4
 8003176:	f7fe fa8d 	bl	8001694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800317a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	a902      	add	r1, sp, #8
 800318a:	4620      	mov	r0, r4
 800318c:	f7fe fa82 	bl	8001694 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_CAN_MspInit+0xa4>)
 8003192:	6853      	ldr	r3, [r2, #4]
 8003194:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003198:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800319c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	4611      	mov	r1, r2
 80031a6:	2014      	movs	r0, #20
 80031a8:	f7fe f884 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80031ac:	2014      	movs	r0, #20
 80031ae:	f7fe f8b9 	bl	8001324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	4611      	mov	r1, r2
 80031b6:	2015      	movs	r0, #21
 80031b8:	f7fe f87c 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80031bc:	2015      	movs	r0, #21
 80031be:	f7fe f8b1 	bl	8001324 <HAL_NVIC_EnableIRQ>
}
 80031c2:	e7bc      	b.n	800313e <HAL_CAN_MspInit+0x16>
 80031c4:	40006400 	.word	0x40006400
 80031c8:	40010c00 	.word	0x40010c00
 80031cc:	40010000 	.word	0x40010000

080031d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031d0:	b500      	push	{lr}
 80031d2:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <MX_DMA_Init+0x50>)
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	615a      	str	r2, [r3, #20]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	4611      	mov	r1, r2
 80031ec:	200c      	movs	r0, #12
 80031ee:	f7fe f861 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80031f2:	200c      	movs	r0, #12
 80031f4:	f7fe f896 	bl	8001324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	4611      	mov	r1, r2
 80031fc:	200d      	movs	r0, #13
 80031fe:	f7fe f859 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003202:	200d      	movs	r0, #13
 8003204:	f7fe f88e 	bl	8001324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003208:	2200      	movs	r2, #0
 800320a:	4611      	mov	r1, r2
 800320c:	2010      	movs	r0, #16
 800320e:	f7fe f851 	bl	80012b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003212:	2010      	movs	r0, #16
 8003214:	f7fe f886 	bl	8001324 <HAL_NVIC_EnableIRQ>

}
 8003218:	b003      	add	sp, #12
 800321a:	f85d fb04 	ldr.w	pc, [sp], #4
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003228:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322a:	2400      	movs	r4, #0
 800322c:	9404      	str	r4, [sp, #16]
 800322e:	9405      	str	r4, [sp, #20]
 8003230:	9406      	str	r4, [sp, #24]
 8003232:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <MX_GPIO_Init+0xd4>)
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	f042 0210 	orr.w	r2, r2, #16
 800323c:	619a      	str	r2, [r3, #24]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	f002 0210 	and.w	r2, r2, #16
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	619a      	str	r2, [r3, #24]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	f002 0220 	and.w	r2, r2, #32
 8003256:	9201      	str	r2, [sp, #4]
 8003258:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	f042 0204 	orr.w	r2, r2, #4
 8003260:	619a      	str	r2, [r3, #24]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	f002 0204 	and.w	r2, r2, #4
 8003268:	9202      	str	r2, [sp, #8]
 800326a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	619a      	str	r2, [r3, #24]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	9303      	str	r3, [sp, #12]
 800327c:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800327e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80032fc <MX_GPIO_Init+0xd8>
 8003282:	4622      	mov	r2, r4
 8003284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003288:	4648      	mov	r0, r9
 800328a:	f7fe fb1c 	bl	80018c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 800328e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003300 <MX_GPIO_Init+0xdc>
 8003292:	4622      	mov	r2, r4
 8003294:	2113      	movs	r1, #19
 8003296:	4640      	mov	r0, r8
 8003298:	f7fe fb15 	bl	80018c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSEL_XBee_GPIO_Port, SSEL_XBee_Pin, GPIO_PIN_RESET);
 800329c:	4e19      	ldr	r6, [pc, #100]	; (8003304 <MX_GPIO_Init+0xe0>)
 800329e:	4622      	mov	r2, r4
 80032a0:	2101      	movs	r1, #1
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7fe fb0f 	bl	80018c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80032a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2501      	movs	r5, #1
 80032b0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	2702      	movs	r7, #2
 80032b6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80032b8:	a904      	add	r1, sp, #16
 80032ba:	4648      	mov	r0, r9
 80032bc:	f7fe f9ea 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80032c0:	2313      	movs	r3, #19
 80032c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	a904      	add	r1, sp, #16
 80032cc:	4640      	mov	r0, r8
 80032ce:	f7fe f9e1 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSEL_XBee_Pin;
 80032d2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(SSEL_XBee_GPIO_Port, &GPIO_InitStruct);
 80032da:	a904      	add	r1, sp, #16
 80032dc:	4630      	mov	r0, r6
 80032de:	f7fe f9d9 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032e2:	2340      	movs	r3, #64	; 0x40
 80032e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e8:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ea:	a904      	add	r1, sp, #16
 80032ec:	4630      	mov	r0, r6
 80032ee:	f7fe f9d1 	bl	8001694 <HAL_GPIO_Init>

}
 80032f2:	b009      	add	sp, #36	; 0x24
 80032f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40011000 	.word	0x40011000
 8003300:	40010800 	.word	0x40010800
 8003304:	40010c00 	.word	0x40010c00

08003308 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003308:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800330a:	4807      	ldr	r0, [pc, #28]	; (8003328 <MX_IWDG_Init+0x20>)
 800330c:	4b07      	ldr	r3, [pc, #28]	; (800332c <MX_IWDG_Init+0x24>)
 800330e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8003310:	2303      	movs	r3, #3
 8003312:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 150;
 8003314:	2396      	movs	r3, #150	; 0x96
 8003316:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003318:	f7fe fae4 	bl	80018e4 <HAL_IWDG_Init>
 800331c:	b900      	cbnz	r0, 8003320 <MX_IWDG_Init+0x18>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800331e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003320:	f000 facc 	bl	80038bc <Error_Handler>
}
 8003324:	e7fb      	b.n	800331e <MX_IWDG_Init+0x16>
 8003326:	bf00      	nop
 8003328:	20000e14 	.word	0x20000e14
 800332c:	40003000 	.word	0x40003000

08003330 <RPM_To_KMH_speed>:
 Page 4: Alert area
 */

/* Dash Functions: */

uint8_t RPM_To_KMH_speed() {
 8003330:	b508      	push	{r3, lr}
	float speed = (can_vector[ID_control_speed_l_motor].word_0
 8003332:	4b17      	ldr	r3, [pc, #92]	; (8003390 <RPM_To_KMH_speed+0x60>)
 8003334:	f8b3 02a8 	ldrh.w	r0, [r3, #680]	; 0x2a8
			+ can_vector[ID_control_speed_r_motor].word_0) / 8.89;
 8003338:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800333c:	4418      	add	r0, r3
 800333e:	f7fd f915 	bl	800056c <__aeabi_i2d>
 8003342:	a30d      	add	r3, pc, #52	; (adr r3, 8003378 <RPM_To_KMH_speed+0x48>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd faa4 	bl	8000894 <__aeabi_ddiv>
	float speed = (can_vector[ID_control_speed_l_motor].word_0
 800334c:	f7fd fbaa 	bl	8000aa4 <__aeabi_d2f>
	speed = speed / 2;
 8003350:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003354:	f7fc ff04 	bl	8000160 <__aeabi_fmul>
	return 0.1885 * speed * 0.52;
 8003358:	f7fd f91a 	bl	8000590 <__aeabi_f2d>
 800335c:	a308      	add	r3, pc, #32	; (adr r3, 8003380 <RPM_To_KMH_speed+0x50>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fd f96d 	bl	8000640 <__aeabi_dmul>
 8003366:	a308      	add	r3, pc, #32	; (adr r3, 8003388 <RPM_To_KMH_speed+0x58>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fd f968 	bl	8000640 <__aeabi_dmul>
 8003370:	f7fd fb78 	bl	8000a64 <__aeabi_d2uiz>
}
 8003374:	b2c0      	uxtb	r0, r0
 8003376:	bd08      	pop	{r3, pc}
 8003378:	147ae148 	.word	0x147ae148
 800337c:	4021c7ae 	.word	0x4021c7ae
 8003380:	9ba5e354 	.word	0x9ba5e354
 8003384:	3fc820c4 	.word	0x3fc820c4
 8003388:	0a3d70a4 	.word	0x0a3d70a4
 800338c:	3fe0a3d7 	.word	0x3fe0a3d7
 8003390:	200001b4 	.word	0x200001b4

08003394 <USART3_Message_Received>:

void USART3_Message_Received(void) {
 8003394:	b538      	push	{r3, r4, r5, lr}

	/*Verify if the message is to change the nextion page */
	memcpy(NEXTION_UART_BUFFER, DMA_RX_Buffer_3, DMA_RX_BUFFER_SIZE_NEXTION);
 8003396:	4d16      	ldr	r5, [pc, #88]	; (80033f0 <USART3_Message_Received+0x5c>)
 8003398:	4c16      	ldr	r4, [pc, #88]	; (80033f4 <USART3_Message_Received+0x60>)
 800339a:	46ac      	mov	ip, r5
 800339c:	6820      	ldr	r0, [r4, #0]
 800339e:	6861      	ldr	r1, [r4, #4]
 80033a0:	68a2      	ldr	r2, [r4, #8]
 80033a2:	68e3      	ldr	r3, [r4, #12]
 80033a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80033a8:	6920      	ldr	r0, [r4, #16]
 80033aa:	6961      	ldr	r1, [r4, #20]
 80033ac:	69a2      	ldr	r2, [r4, #24]
 80033ae:	69e3      	ldr	r3, [r4, #28]
 80033b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

	if (NEXTION_UART_BUFFER[0] == DISPLAY_CURRENT_PAGE_COMMAND) {
 80033b4:	782b      	ldrb	r3, [r5, #0]
 80033b6:	2b66      	cmp	r3, #102	; 0x66
 80033b8:	d00f      	beq.n	80033da <USART3_Message_Received+0x46>
		pageMessageReceived = 1;
		actual_page = (NextionPage_e) NEXTION_UART_BUFFER[1];
	}
	if (PAGE != actual_page && NEXTION_STATE != 0)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <USART3_Message_Received+0x5c>)
 80033bc:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 80033c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033c4:	4298      	cmp	r0, r3
 80033c6:	d003      	beq.n	80033d0 <USART3_Message_Received+0x3c>
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <USART3_Message_Received+0x5c>)
 80033ca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80033ce:	b95b      	cbnz	r3, 80033e8 <USART3_Message_Received+0x54>
		NexPageShow(PAGE);
	timer_actual_nextion = HAL_GetTick();
 80033d0:	f7fd fbfa 	bl	8000bc8 <HAL_GetTick>
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <USART3_Message_Received+0x5c>)
 80033d6:	6258      	str	r0, [r3, #36]	; 0x24
}
 80033d8:	bd38      	pop	{r3, r4, r5, pc}
		pageMessageReceived = 1;
 80033da:	2201      	movs	r2, #1
 80033dc:	f885 2020 	strb.w	r2, [r5, #32]
		actual_page = (NextionPage_e) NEXTION_UART_BUFFER[1];
 80033e0:	786a      	ldrb	r2, [r5, #1]
 80033e2:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 80033e6:	e7e8      	b.n	80033ba <USART3_Message_Received+0x26>
		NexPageShow(PAGE);
 80033e8:	f000 fa94 	bl	8003914 <NexPageShow>
 80033ec:	e7f0      	b.n	80033d0 <USART3_Message_Received+0x3c>
 80033ee:	bf00      	nop
 80033f0:	20000e20 	.word	0x20000e20
 80033f4:	200000a0 	.word	0x200000a0

080033f8 <AIR_IT>:
		previus_page = PAGE;
	return 0;
}

void AIR_IT() {
	switch (AIR_FLAG) {
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <AIR_IT+0x3c>)
 80033fa:	f8b3 371c 	ldrh.w	r3, [r3, #1820]	; 0x71c
 80033fe:	b143      	cbz	r3, 8003412 <AIR_IT+0x1a>
 8003400:	2b01      	cmp	r3, #1
 8003402:	d00d      	beq.n	8003420 <AIR_IT+0x28>
		break;
		case 1:
		strcpy(AIR, "ABERTO");
		break;
		default:
		strcpy(AIR, "FALHA");
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <AIR_IT+0x40>)
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <AIR_IT+0x44>)
 8003408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800340c:	6358      	str	r0, [r3, #52]	; 0x34
 800340e:	8719      	strh	r1, [r3, #56]	; 0x38
		break;
	}
}
 8003410:	4770      	bx	lr
		strcpy(AIR, "FECHADO");
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <AIR_IT+0x48>)
 8003414:	4a0b      	ldr	r2, [pc, #44]	; (8003444 <AIR_IT+0x4c>)
 8003416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341a:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 800341e:	4770      	bx	lr
		strcpy(AIR, "ABERTO");
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <AIR_IT+0x40>)
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <AIR_IT+0x50>)
 8003424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003428:	6358      	str	r0, [r3, #52]	; 0x34
 800342a:	8719      	strh	r1, [r3, #56]	; 0x38
 800342c:	0c09      	lsrs	r1, r1, #16
 800342e:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
		break;
 8003432:	4770      	bx	lr
 8003434:	200001b4 	.word	0x200001b4
 8003438:	20000e20 	.word	0x20000e20
 800343c:	08004f90 	.word	0x08004f90
 8003440:	20000e54 	.word	0x20000e54
 8003444:	08004f80 	.word	0x08004f80
 8003448:	08004f88 	.word	0x08004f88

0800344c <PAGE_IT>:

/*Get and modify actual page*/
void PAGE_IT() {
 800344c:	b508      	push	{r3, lr}
	pageMessageReceived = 0;
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <PAGE_IT+0x40>)
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2020 	strb.w	r2, [r3, #32]
	//initializes a timer to count response time

	if (previus_page > PAGE2)
 8003456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800345a:	2b02      	cmp	r3, #2
 800345c:	d903      	bls.n	8003466 <PAGE_IT+0x1a>
		PAGE = PAGE1;
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <PAGE_IT+0x40>)
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	if (actual_page != PAGE) { //if the page does not match, it will send a command to switch the page
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <PAGE_IT+0x40>)
 8003468:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800346c:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
 8003470:	4282      	cmp	r2, r0
 8003472:	d103      	bne.n	800347c <PAGE_IT+0x30>
		NexPageShow(PAGE);
		actual_page = PAGE;
	}

	sendCommand("sendme"); // send command to get the page
 8003474:	4806      	ldr	r0, [pc, #24]	; (8003490 <PAGE_IT+0x44>)
 8003476:	f000 fa23 	bl	80038c0 <sendCommand>
	//		if (timer_wait_ms(pageTimeout, 50)) { //if the page does not match, it will send a command to switch the page
	//			pageMessageReceived = 0;
	//			return;
	//		}
	//	}
}
 800347a:	bd08      	pop	{r3, pc}
		NexPageShow(PAGE);
 800347c:	f000 fa4a 	bl	8003914 <NexPageShow>
		actual_page = PAGE;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <PAGE_IT+0x40>)
 8003482:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800348a:	e7f3      	b.n	8003474 <PAGE_IT+0x28>
 800348c:	20000e20 	.word	0x20000e20
 8003490:	08004f78 	.word	0x08004f78

08003494 <MODO_IT>:
uint8_t MODO_IT() {
 8003494:	b510      	push	{r4, lr}
	switch (MODO_FLAG) {
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <MODO_IT+0xe8>)
 8003498:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	2a03      	cmp	r2, #3
 80034a0:	d82f      	bhi.n	8003502 <MODO_IT+0x6e>
 80034a2:	e8df f002 	tbb	[pc, r2]
 80034a6:	1902      	.short	0x1902
 80034a8:	2822      	.short	0x2822
		strcpy(MODO, "Enduro");
 80034aa:	4a35      	ldr	r2, [pc, #212]	; (8003580 <MODO_IT+0xec>)
 80034ac:	4935      	ldr	r1, [pc, #212]	; (8003584 <MODO_IT+0xf0>)
 80034ae:	c903      	ldmia	r1, {r0, r1}
 80034b0:	6410      	str	r0, [r2, #64]	; 0x40
 80034b2:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
 80034b6:	0c09      	lsrs	r1, r1, #16
 80034b8:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
	if (previus_MODO_FLAG != MODO_FLAG && previus_MODO_FLAG != 0)
 80034bc:	4a30      	ldr	r2, [pc, #192]	; (8003580 <MODO_IT+0xec>)
 80034be:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 80034c2:	b291      	uxth	r1, r2
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d000      	beq.n	80034ca <MODO_IT+0x36>
 80034c8:	bb0a      	cbnz	r2, 800350e <MODO_IT+0x7a>
		previus_page = PAGE;
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <MODO_IT+0xec>)
 80034cc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80034d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return 0;
 80034d4:	2000      	movs	r0, #0
}
 80034d6:	bd10      	pop	{r4, pc}
		strcpy(MODO, "Aceleracao");
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <MODO_IT+0xf4>)
 80034da:	4c2c      	ldr	r4, [pc, #176]	; (800358c <MODO_IT+0xf8>)
 80034dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80034de:	c403      	stmia	r4!, {r0, r1}
 80034e0:	f824 2b02 	strh.w	r2, [r4], #2
 80034e4:	0c12      	lsrs	r2, r2, #16
 80034e6:	7022      	strb	r2, [r4, #0]
		break;
 80034e8:	e7e8      	b.n	80034bc <MODO_IT+0x28>
		strcpy(MODO, "Skidpad");
 80034ea:	4a28      	ldr	r2, [pc, #160]	; (800358c <MODO_IT+0xf8>)
 80034ec:	4928      	ldr	r1, [pc, #160]	; (8003590 <MODO_IT+0xfc>)
 80034ee:	c903      	ldmia	r1, {r0, r1}
 80034f0:	e882 0003 	stmia.w	r2, {r0, r1}
		break;
 80034f4:	e7e2      	b.n	80034bc <MODO_IT+0x28>
		strcpy(MODO, "Autocross");
 80034f6:	4a27      	ldr	r2, [pc, #156]	; (8003594 <MODO_IT+0x100>)
 80034f8:	4c24      	ldr	r4, [pc, #144]	; (800358c <MODO_IT+0xf8>)
 80034fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80034fc:	c403      	stmia	r4!, {r0, r1}
 80034fe:	8022      	strh	r2, [r4, #0]
		break;
 8003500:	e7dc      	b.n	80034bc <MODO_IT+0x28>
		strcpy(MODO, "FAILURE");
 8003502:	4a22      	ldr	r2, [pc, #136]	; (800358c <MODO_IT+0xf8>)
 8003504:	4924      	ldr	r1, [pc, #144]	; (8003598 <MODO_IT+0x104>)
 8003506:	c903      	ldmia	r1, {r0, r1}
 8003508:	e882 0003 	stmia.w	r2, {r0, r1}
		break;
 800350c:	e7d6      	b.n	80034bc <MODO_IT+0x28>
		if (previus_page_saved == 0) {
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <MODO_IT+0xec>)
 8003510:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003514:	b1a3      	cbz	r3, 8003540 <MODO_IT+0xac>
		PAGE = PAGE4;
 8003516:	4c1a      	ldr	r4, [pc, #104]	; (8003580 <MODO_IT+0xec>)
 8003518:	2304      	movs	r3, #4
 800351a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		PAGE_IT();
 800351e:	f7ff ff95 	bl	800344c <PAGE_IT>
		NexPictureSetPic(0, 106 + MODO_FLAG);
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <MODO_IT+0xe8>)
 8003524:	f8b3 1268 	ldrh.w	r1, [r3, #616]	; 0x268
 8003528:	316a      	adds	r1, #106	; 0x6a
 800352a:	2000      	movs	r0, #0
 800352c:	f000 fa80 	bl	8003a30 <NexPictureSetPic>
		if(timer_wait_ms(modoTimeout, 2000))
 8003530:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003534:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003536:	f7ff fd97 	bl	8003068 <timer_wait_ms>
 800353a:	b980      	cbnz	r0, 800355e <MODO_IT+0xca>
		return 1;
 800353c:	2001      	movs	r0, #1
 800353e:	e7ca      	b.n	80034d6 <MODO_IT+0x42>
			timer_restart(&modoTimeout);
 8003540:	4c0f      	ldr	r4, [pc, #60]	; (8003580 <MODO_IT+0xec>)
 8003542:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8003546:	f7ff fd9b 	bl	8003080 <timer_restart>
			previus_page = PAGE;
 800354a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800354e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			previus_page_saved++;
 8003552:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8003556:	3301      	adds	r3, #1
 8003558:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800355c:	e7db      	b.n	8003516 <MODO_IT+0x82>
			previus_MODO_FLAG = MODO_FLAG;
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <MODO_IT+0xe8>)
 8003560:	f8b3 2268 	ldrh.w	r2, [r3, #616]	; 0x268
 8003564:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
			PAGE = previus_page;
 8003568:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800356c:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
			previus_page_saved = 0;
 8003570:	2200      	movs	r2, #0
 8003572:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
			PAGE_IT();
 8003576:	f7ff ff69 	bl	800344c <PAGE_IT>
 800357a:	e7df      	b.n	800353c <MODO_IT+0xa8>
 800357c:	200001b4 	.word	0x200001b4
 8003580:	20000e20 	.word	0x20000e20
 8003584:	08004f98 	.word	0x08004f98
 8003588:	08004fbc 	.word	0x08004fbc
 800358c:	20000e60 	.word	0x20000e60
 8003590:	08004fa0 	.word	0x08004fa0
 8003594:	08004fa8 	.word	0x08004fa8
 8003598:	08004fb4 	.word	0x08004fb4

0800359c <BOTAO_IT>:
//		PAGE = PAGE1;
//	else
//		PAGE++;
//	return;
//}
void BOTAO_IT() {
 800359c:	b510      	push	{r4, lr}

	if (BOTAO_STATE == 0 && last_state == 0) {
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	481f      	ldr	r0, [pc, #124]	; (8003620 <BOTAO_IT+0x84>)
 80035a2:	f7fe f989 	bl	80018b8 <HAL_GPIO_ReadPin>
 80035a6:	b918      	cbnz	r0, 80035b0 <BOTAO_IT+0x14>
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <BOTAO_IT+0x88>)
 80035aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ae:	b14b      	cbz	r3, 80035c4 <BOTAO_IT+0x28>
			if (PAGE == PAGE2)
				PAGE = PAGE1;
			else
				PAGE++;
		}
	} else if (BOTAO_STATE != 0 && last_state != 0) {
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	481b      	ldr	r0, [pc, #108]	; (8003620 <BOTAO_IT+0x84>)
 80035b4:	f7fe f980 	bl	80018b8 <HAL_GPIO_ReadPin>
 80035b8:	b118      	cbz	r0, 80035c2 <BOTAO_IT+0x26>
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <BOTAO_IT+0x88>)
 80035bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c0:	bb23      	cbnz	r3, 800360c <BOTAO_IT+0x70>
		timer_restart(&botaoTimeout);
		last_state = 0;
	}
}
 80035c2:	bd10      	pop	{r4, pc}
		if (timer_wait_ms(botaoTimeout, 50)) {
 80035c4:	2132      	movs	r1, #50	; 0x32
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <BOTAO_IT+0x88>)
 80035c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80035ca:	f7ff fd4d 	bl	8003068 <timer_wait_ms>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d0f7      	beq.n	80035c2 <BOTAO_IT+0x26>
			last_state++;
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <BOTAO_IT+0x88>)
 80035d4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80035d8:	3301      	adds	r3, #1
 80035da:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
			if (FLAG_MSG != 0) {
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <BOTAO_IT+0x8c>)
 80035e0:	f993 3000 	ldrsb.w	r3, [r3]
 80035e4:	b94b      	cbnz	r3, 80035fa <BOTAO_IT+0x5e>
			if (PAGE == PAGE2)
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <BOTAO_IT+0x88>)
 80035e8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d008      	beq.n	8003602 <BOTAO_IT+0x66>
				PAGE++;
 80035f0:	3301      	adds	r3, #1
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <BOTAO_IT+0x88>)
 80035f4:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 80035f8:	e7e3      	b.n	80035c2 <BOTAO_IT+0x26>
				FLAG_MSG = 0;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <BOTAO_IT+0x8c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
				return;
 8003600:	e7df      	b.n	80035c2 <BOTAO_IT+0x26>
				PAGE = PAGE1;
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <BOTAO_IT+0x88>)
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800360a:	e7da      	b.n	80035c2 <BOTAO_IT+0x26>
		timer_restart(&botaoTimeout);
 800360c:	4c05      	ldr	r4, [pc, #20]	; (8003624 <BOTAO_IT+0x88>)
 800360e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8003612:	f7ff fd35 	bl	8003080 <timer_restart>
		last_state = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800361c:	e7d1      	b.n	80035c2 <BOTAO_IT+0x26>
 800361e:	bf00      	nop
 8003620:	40010c00 	.word	0x40010c00
 8003624:	20000e20 	.word	0x20000e20
 8003628:	20000f22 	.word	0x20000f22

0800362c <NEXTION>:
void NEXTION(void) {
 800362c:	b510      	push	{r4, lr}
	if (timer_wait_ms(updateTimer, 0)) {
 800362e:	2100      	movs	r1, #0
 8003630:	4b74      	ldr	r3, [pc, #464]	; (8003804 <NEXTION+0x1d8>)
 8003632:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003634:	f7ff fd18 	bl	8003068 <timer_wait_ms>
 8003638:	b1c8      	cbz	r0, 800366e <NEXTION+0x42>
		if (can_vector[ID_control_torque_motor].word_1 == 0) {
 800363a:	4b73      	ldr	r3, [pc, #460]	; (8003808 <NEXTION+0x1dc>)
 800363c:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 8003640:	b1b3      	cbz	r3, 8003670 <NEXTION+0x44>
			PAGE = PAGE1;
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <NEXTION+0x1d8>)
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FAILURE_IT();
 800364a:	f7ff fa93 	bl	8002b74 <FAILURE_IT>
		if (can_vector[ID_control_torque_motor].word_1 == 0) {
 800364e:	4b6e      	ldr	r3, [pc, #440]	; (8003808 <NEXTION+0x1dc>)
 8003650:	f8b3 3272 	ldrh.w	r3, [r3, #626]	; 0x272
 8003654:	b1ab      	cbz	r3, 8003682 <NEXTION+0x56>
		PAGE_IT();
 8003656:	f7ff fef9 	bl	800344c <PAGE_IT>
		switch (actual_page) {
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <NEXTION+0x1d8>)
 800365c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003660:	2b01      	cmp	r3, #1
 8003662:	d013      	beq.n	800368c <NEXTION+0x60>
 8003664:	2b02      	cmp	r3, #2
 8003666:	d07f      	beq.n	8003768 <NEXTION+0x13c>
		timer_restart(&updateTimer);
 8003668:	4868      	ldr	r0, [pc, #416]	; (800380c <NEXTION+0x1e0>)
 800366a:	f7ff fd09 	bl	8003080 <timer_restart>
}
 800366e:	bd10      	pop	{r4, pc}
			if (MODO_IT() == 1) {
 8003670:	f7ff ff10 	bl	8003494 <MODO_IT>
 8003674:	2801      	cmp	r0, #1
 8003676:	d1e8      	bne.n	800364a <NEXTION+0x1e>
				timer_actual_nextion = HAL_GetTick();
 8003678:	f7fd faa6 	bl	8000bc8 <HAL_GetTick>
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <NEXTION+0x1d8>)
 800367e:	6258      	str	r0, [r3, #36]	; 0x24
				return;
 8003680:	e7f5      	b.n	800366e <NEXTION+0x42>
			AIR_IT();
 8003682:	f7ff feb9 	bl	80033f8 <AIR_IT>
			BOTAO_IT();
 8003686:	f7ff ff89 	bl	800359c <BOTAO_IT>
 800368a:	e7e4      	b.n	8003656 <NEXTION+0x2a>
			if (CAN_STATE) {
 800368c:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <NEXTION+0x1d8>)
 800368e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003692:	b94b      	cbnz	r3, 80036a8 <NEXTION+0x7c>
			NexVariableSetValue(1, !CAN_STATE);
 8003694:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <NEXTION+0x1d8>)
 8003696:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800369a:	fab1 f181 	clz	r1, r1
 800369e:	0949      	lsrs	r1, r1, #5
 80036a0:	2001      	movs	r0, #1
 80036a2:	f000 f9dd 	bl	8003a60 <NexVariableSetValue>
			break;
 80036a6:	e7df      	b.n	8003668 <NEXTION+0x3c>
				NexPictureSetPic(1, 54 + FLAG_POP_UP);
 80036a8:	4b59      	ldr	r3, [pc, #356]	; (8003810 <NEXTION+0x1e4>)
 80036aa:	f993 1000 	ldrsb.w	r1, [r3]
 80036ae:	3136      	adds	r1, #54	; 0x36
 80036b0:	2001      	movs	r0, #1
 80036b2:	f000 f9bd 	bl	8003a30 <NexPictureSetPic>
				NexNumberSetValue(0, VELOCIDADE);
 80036b6:	f7ff fe3b 	bl	8003330 <RPM_To_KMH_speed>
 80036ba:	4601      	mov	r1, r0
 80036bc:	2000      	movs	r0, #0
 80036be:	f000 f987 	bl	80039d0 <NexNumberSetValue>
				NexNumberSetValue(1, TORQUE*10);
 80036c2:	4c51      	ldr	r4, [pc, #324]	; (8003808 <NEXTION+0x1dc>)
 80036c4:	f8b4 126a 	ldrh.w	r1, [r4, #618]	; 0x26a
 80036c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036cc:	0049      	lsls	r1, r1, #1
 80036ce:	2001      	movs	r0, #1
 80036d0:	f000 f97e 	bl	80039d0 <NexNumberSetValue>
				NexNumberSetValue(2, CARGA);
 80036d4:	f8b4 1730 	ldrh.w	r1, [r4, #1840]	; 0x730
 80036d8:	2002      	movs	r0, #2
 80036da:	f000 f979 	bl	80039d0 <NexNumberSetValue>
				NexXfloatSetValue(0, TENSAO/100);
 80036de:	f8b4 1712 	ldrh.w	r1, [r4, #1810]	; 0x712
 80036e2:	4b4c      	ldr	r3, [pc, #304]	; (8003814 <NEXTION+0x1e8>)
 80036e4:	fba3 3101 	umull	r3, r1, r3, r1
 80036e8:	0949      	lsrs	r1, r1, #5
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f988 	bl	8003a00 <NexXfloatSetValue>
				NexXfloatSetValue(1, HODOM/10);
 80036f0:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
 80036f4:	4b48      	ldr	r3, [pc, #288]	; (8003818 <NEXTION+0x1ec>)
 80036f6:	fba3 3101 	umull	r3, r1, r3, r1
 80036fa:	08c9      	lsrs	r1, r1, #3
 80036fc:	2001      	movs	r0, #1
 80036fe:	f000 f97f 	bl	8003a00 <NexXfloatSetValue>
				NexXfloatSetValue(2, TEMPERATURA);
 8003702:	f8b4 1716 	ldrh.w	r1, [r4, #1814]	; 0x716
 8003706:	2002      	movs	r0, #2
 8003708:	f000 f97a 	bl	8003a00 <NexXfloatSetValue>
				NexTextSetText(0, MODO);
 800370c:	4943      	ldr	r1, [pc, #268]	; (800381c <NEXTION+0x1f0>)
 800370e:	2000      	movs	r0, #0
 8003710:	f000 f916 	bl	8003940 <NexTextSetText>
				switch (MODO_FLAG) {
 8003714:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8003718:	3b01      	subs	r3, #1
 800371a:	2b03      	cmp	r3, #3
 800371c:	d81e      	bhi.n	800375c <NEXTION+0x130>
 800371e:	e8df f003 	tbb	[pc, r3]
 8003722:	0c02      	.short	0x0c02
 8003724:	1812      	.short	0x1812
					NexTextSetColor(0, VERDE);
 8003726:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800372a:	2000      	movs	r0, #0
 800372c:	f000 f936 	bl	800399c <NexTextSetColor>
				NexTextSetText(1, BRAKE);
 8003730:	493b      	ldr	r1, [pc, #236]	; (8003820 <NEXTION+0x1f4>)
 8003732:	2001      	movs	r0, #1
 8003734:	f000 f904 	bl	8003940 <NexTextSetText>
 8003738:	e7ac      	b.n	8003694 <NEXTION+0x68>
					NexTextSetColor(0, MARGENTA);
 800373a:	f64f 0118 	movw	r1, #63512	; 0xf818
 800373e:	2000      	movs	r0, #0
 8003740:	f000 f92c 	bl	800399c <NexTextSetColor>
					break;
 8003744:	e7f4      	b.n	8003730 <NEXTION+0x104>
					NexTextSetColor(0, AZUL_CLARO);
 8003746:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800374a:	2000      	movs	r0, #0
 800374c:	f000 f926 	bl	800399c <NexTextSetColor>
					break;
 8003750:	e7ee      	b.n	8003730 <NEXTION+0x104>
					NexTextSetColor(0, AZUL_ESCURO);
 8003752:	2115      	movs	r1, #21
 8003754:	2000      	movs	r0, #0
 8003756:	f000 f921 	bl	800399c <NexTextSetColor>
					break;
 800375a:	e7e9      	b.n	8003730 <NEXTION+0x104>
					NexTextSetColor(0, VERMELHO);
 800375c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003760:	2000      	movs	r0, #0
 8003762:	f000 f91b 	bl	800399c <NexTextSetColor>
					break;
 8003766:	e7e3      	b.n	8003730 <NEXTION+0x104>
			NexXfloatSetValue(3, HODOM/10);
 8003768:	4c27      	ldr	r4, [pc, #156]	; (8003808 <NEXTION+0x1dc>)
 800376a:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <NEXTION+0x1ec>)
 8003770:	fba3 3101 	umull	r3, r1, r3, r1
 8003774:	08c9      	lsrs	r1, r1, #3
 8003776:	2003      	movs	r0, #3
 8003778:	f000 f942 	bl	8003a00 <NexXfloatSetValue>
			NexXfloatSetValue(4, TEMPERATURA);
 800377c:	f8b4 1716 	ldrh.w	r1, [r4, #1814]	; 0x716
 8003780:	2004      	movs	r0, #4
 8003782:	f000 f93d 	bl	8003a00 <NexXfloatSetValue>
			NexTextSetText(0, MODO);
 8003786:	4925      	ldr	r1, [pc, #148]	; (800381c <NEXTION+0x1f0>)
 8003788:	2000      	movs	r0, #0
 800378a:	f000 f8d9 	bl	8003940 <NexTextSetText>
			switch (MODO_FLAG) {
 800378e:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8003792:	3b01      	subs	r3, #1
 8003794:	2b03      	cmp	r3, #3
 8003796:	d828      	bhi.n	80037ea <NEXTION+0x1be>
 8003798:	e8df f003 	tbb	[pc, r3]
 800379c:	221c1602 	.word	0x221c1602
				NexTextSetColor(0, VERDE);
 80037a0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80037a4:	2000      	movs	r0, #0
 80037a6:	f000 f8f9 	bl	800399c <NexTextSetColor>
			NexTextSetText(3, AIR);
 80037aa:	491e      	ldr	r1, [pc, #120]	; (8003824 <NEXTION+0x1f8>)
 80037ac:	2003      	movs	r0, #3
 80037ae:	f000 f8c7 	bl	8003940 <NexTextSetText>
			if (AIR_FLAG != 1)
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <NEXTION+0x1dc>)
 80037b4:	f8b3 371c 	ldrh.w	r3, [r3, #1820]	; 0x71c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d01c      	beq.n	80037f6 <NEXTION+0x1ca>
			NexTextSetColor(3, VERMELHO);
 80037bc:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80037c0:	2003      	movs	r0, #3
 80037c2:	f000 f8eb 	bl	800399c <NexTextSetColor>
 80037c6:	e74f      	b.n	8003668 <NEXTION+0x3c>
				NexTextSetColor(0, MARGENTA);
 80037c8:	f64f 0118 	movw	r1, #63512	; 0xf818
 80037cc:	2000      	movs	r0, #0
 80037ce:	f000 f8e5 	bl	800399c <NexTextSetColor>
				break;
 80037d2:	e7ea      	b.n	80037aa <NEXTION+0x17e>
				NexTextSetColor(0, AZUL_CLARO);
 80037d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80037d8:	2000      	movs	r0, #0
 80037da:	f000 f8df 	bl	800399c <NexTextSetColor>
				break;
 80037de:	e7e4      	b.n	80037aa <NEXTION+0x17e>
				NexTextSetColor(0, AZUL_ESCURO);
 80037e0:	2115      	movs	r1, #21
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f8da 	bl	800399c <NexTextSetColor>
				break;
 80037e8:	e7df      	b.n	80037aa <NEXTION+0x17e>
				NexTextSetColor(0, VERMELHO);
 80037ea:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80037ee:	2000      	movs	r0, #0
 80037f0:	f000 f8d4 	bl	800399c <NexTextSetColor>
				break;
 80037f4:	e7d9      	b.n	80037aa <NEXTION+0x17e>
			NexTextSetColor(3, VERDE);
 80037f6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80037fa:	2003      	movs	r0, #3
 80037fc:	f000 f8ce 	bl	800399c <NexTextSetColor>
 8003800:	e732      	b.n	8003668 <NEXTION+0x3c>
 8003802:	bf00      	nop
 8003804:	20000e20 	.word	0x20000e20
 8003808:	200001b4 	.word	0x200001b4
 800380c:	20000e78 	.word	0x20000e78
 8003810:	200001b0 	.word	0x200001b0
 8003814:	51eb851f 	.word	0x51eb851f
 8003818:	cccccccd 	.word	0xcccccccd
 800381c:	20000e60 	.word	0x20000e60
 8003820:	20000008 	.word	0x20000008
 8003824:	20000e54 	.word	0x20000e54

08003828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003828:	b530      	push	{r4, r5, lr}
 800382a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800382c:	2228      	movs	r2, #40	; 0x28
 800382e:	2100      	movs	r1, #0
 8003830:	a806      	add	r0, sp, #24
 8003832:	f000 fee7 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003836:	2400      	movs	r4, #0
 8003838:	9401      	str	r4, [sp, #4]
 800383a:	9402      	str	r4, [sp, #8]
 800383c:	9403      	str	r4, [sp, #12]
 800383e:	9404      	str	r4, [sp, #16]
 8003840:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003842:	2309      	movs	r3, #9
 8003844:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800384a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800384c:	2201      	movs	r2, #1
 800384e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003850:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003852:	2502      	movs	r5, #2
 8003854:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003856:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003858:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800385c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800385e:	a806      	add	r0, sp, #24
 8003860:	f7fe f888 	bl	8001974 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003864:	230f      	movs	r3, #15
 8003866:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003868:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800386a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800386c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003870:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003872:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003874:	4629      	mov	r1, r5
 8003876:	a801      	add	r0, sp, #4
 8003878:	f7fe fabc 	bl	8001df4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800387c:	b011      	add	sp, #68	; 0x44
 800387e:	bd30      	pop	{r4, r5, pc}

08003880 <main>:
{
 8003880:	b508      	push	{r3, lr}
  HAL_Init();
 8003882:	f7fd f983 	bl	8000b8c <HAL_Init>
  SystemClock_Config();
 8003886:	f7ff ffcf 	bl	8003828 <SystemClock_Config>
  MX_GPIO_Init();
 800388a:	f7ff fccb 	bl	8003224 <MX_GPIO_Init>
  MX_DMA_Init();
 800388e:	f7ff fc9f 	bl	80031d0 <MX_DMA_Init>
  MX_CAN_Init();
 8003892:	f7ff fbfb 	bl	800308c <MX_CAN_Init>
  MX_SPI1_Init();
 8003896:	f000 f8fb 	bl	8003a90 <MX_SPI1_Init>
  MX_TIM3_Init();
 800389a:	f000 fbc9 	bl	8004030 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800389e:	f000 fc13 	bl	80040c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80038a2:	f000 fc2b 	bl	80040fc <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80038a6:	f7ff fd2f 	bl	8003308 <MX_IWDG_Init>
	interfaceInit();
 80038aa:	f7ff fbaf 	bl	800300c <interfaceInit>
		TELEMETRY();
 80038ae:	f000 fb6b 	bl	8003f88 <TELEMETRY>
		NEXTION();
 80038b2:	f7ff febb 	bl	800362c <NEXTION>
		timerAtualization();
 80038b6:	f7ff fbcd 	bl	8003054 <timerAtualization>
	while (1) {
 80038ba:	e7f8      	b.n	80038ae <main+0x2e>

080038bc <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80038bc:	4770      	bx	lr
	...

080038c0 <sendCommand>:
#define NEX_RET_INVALID_OPERATION            (0x1B)

char ENDTERMS[]={255,255,255};

void sendCommand(const char* cmd)
{
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4604      	mov	r4, r0
   
//   while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_RXNE))
//   {
//      huart3.Instance->DR;
//   }
   HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen (cmd), 100);
 80038c4:	f7fc fc44 	bl	8000150 <strlen>
 80038c8:	4d06      	ldr	r5, [pc, #24]	; (80038e4 <sendCommand+0x24>)
 80038ca:	2364      	movs	r3, #100	; 0x64
 80038cc:	b282      	uxth	r2, r0
 80038ce:	4621      	mov	r1, r4
 80038d0:	4628      	mov	r0, r5
 80038d2:	f7fe fe0a 	bl	80024ea <HAL_UART_Transmit>
   HAL_UART_Transmit (&huart3, (uint8_t*)&ENDTERMS, 3, 100);
 80038d6:	2364      	movs	r3, #100	; 0x64
 80038d8:	2203      	movs	r2, #3
 80038da:	4903      	ldr	r1, [pc, #12]	; (80038e8 <sendCommand+0x28>)
 80038dc:	4628      	mov	r0, r5
 80038de:	f7fe fe04 	bl	80024ea <HAL_UART_Transmit>
}
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	20000fb8 	.word	0x20000fb8
 80038e8:	20000010 	.word	0x20000010

080038ec <recvRetCommandFinished>:

int recvRetCommandFinished(void)
{
 80038ec:	b082      	sub	sp, #8
   
   int ret=0;
   uint8_t temp[4]={0};
 80038ee:	2000      	movs	r0, #0
 80038f0:	9001      	str	r0, [sp, #4]
   {
      ret=1;
   }

   return ret;
}
 80038f2:	b002      	add	sp, #8
 80038f4:	4770      	bx	lr
	...

080038f8 <nexInit>:
   strncpy (buffer, temp, pointer);
   return ret;
}

int nexInit(void)
{
 80038f8:	b508      	push	{r3, lr}
   int ret1=0;
   
   sendCommand ("");
 80038fa:	4804      	ldr	r0, [pc, #16]	; (800390c <nexInit+0x14>)
 80038fc:	f7ff ffe0 	bl	80038c0 <sendCommand>
   sendCommand ("bkcmd=1");
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <nexInit+0x18>)
 8003902:	f7ff ffdd 	bl	80038c0 <sendCommand>
   ret1=recvRetCommandFinished  ()  ;
 8003906:	f7ff fff1 	bl	80038ec <recvRetCommandFinished>
//   sendCommand ("page 0");
//   ret2=recvRetCommandFinished  ()  ;
//   return ret1&&ret2;
   return ret1;
}
 800390a:	bd08      	pop	{r3, pc}
 800390c:	08004f74 	.word	0x08004f74
 8003910:	08004fc8 	.word	0x08004fc8

08003914 <NexPageShow>:

int NexPageShow(int Page)
{
 8003914:	b500      	push	{lr}
 8003916:	b085      	sub	sp, #20
 8003918:	4602      	mov	r2, r0
   char buffer[10]={0};
 800391a:	2300      	movs	r3, #0
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	f8ad 300c 	strh.w	r3, [sp, #12]
   sprintf (buffer, "page %d", Page);
 8003924:	4905      	ldr	r1, [pc, #20]	; (800393c <NexPageShow+0x28>)
 8003926:	a801      	add	r0, sp, #4
 8003928:	f000 fe74 	bl	8004614 <siprintf>
   sendCommand (buffer);
 800392c:	a801      	add	r0, sp, #4
 800392e:	f7ff ffc7 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 8003932:	f7ff ffdb 	bl	80038ec <recvRetCommandFinished>
}
 8003936:	b005      	add	sp, #20
 8003938:	f85d fb04 	ldr.w	pc, [sp], #4
 800393c:	08004fd0 	.word	0x08004fd0

08003940 <NexTextSetText>:

int NexTextSetText(int Text,const char *buffer)
{
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	b098      	sub	sp, #96	; 0x60
 8003944:	4606      	mov	r6, r0
 8003946:	460d      	mov	r5, r1
   char cmd[50]={0}, buff[40]={0};
 8003948:	2400      	movs	r4, #0
 800394a:	940b      	str	r4, [sp, #44]	; 0x2c
 800394c:	222e      	movs	r2, #46	; 0x2e
 800394e:	4621      	mov	r1, r4
 8003950:	a80c      	add	r0, sp, #48	; 0x30
 8003952:	f000 fe57 	bl	8004604 <memset>
 8003956:	9401      	str	r4, [sp, #4]
 8003958:	2224      	movs	r2, #36	; 0x24
 800395a:	4621      	mov	r1, r4
 800395c:	a802      	add	r0, sp, #8
 800395e:	f000 fe51 	bl	8004604 <memset>
   for (int i=0; i<20; i++) buff[i]=buffer[i];
 8003962:	4623      	mov	r3, r4
 8003964:	e008      	b.n	8003978 <NexTextSetText+0x38>
 8003966:	f815 c003 	ldrb.w	ip, [r5, r3]
 800396a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800396e:	eb0d 0402 	add.w	r4, sp, r2
 8003972:	f804 cc5c 	strb.w	ip, [r4, #-92]
 8003976:	3301      	adds	r3, #1
 8003978:	2b13      	cmp	r3, #19
 800397a:	ddf4      	ble.n	8003966 <NexTextSetText+0x26>
   sprintf (cmd, "t%d.txt=\"%s\"",  Text,  buff);
 800397c:	ab01      	add	r3, sp, #4
 800397e:	4632      	mov	r2, r6
 8003980:	4905      	ldr	r1, [pc, #20]	; (8003998 <NexTextSetText+0x58>)
 8003982:	a80b      	add	r0, sp, #44	; 0x2c
 8003984:	f000 fe46 	bl	8004614 <siprintf>
   sendCommand (cmd);
 8003988:	a80b      	add	r0, sp, #44	; 0x2c
 800398a:	f7ff ff99 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 800398e:	f7ff ffad 	bl	80038ec <recvRetCommandFinished>
}
 8003992:	b018      	add	sp, #96	; 0x60
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	bf00      	nop
 8003998:	08004fd8 	.word	0x08004fd8

0800399c <NexTextSetColor>:

int NexTextSetColor(int Text,int Color)
{
 800399c:	b530      	push	{r4, r5, lr}
 800399e:	b08f      	sub	sp, #60	; 0x3c
 80039a0:	4604      	mov	r4, r0
 80039a2:	460d      	mov	r5, r1
   char cmd[50]={0};
 80039a4:	2100      	movs	r1, #0
 80039a6:	9101      	str	r1, [sp, #4]
 80039a8:	222e      	movs	r2, #46	; 0x2e
 80039aa:	a802      	add	r0, sp, #8
 80039ac:	f000 fe2a 	bl	8004604 <memset>
   sprintf (cmd, "t%d.pco=%d",  Text,  Color);
 80039b0:	462b      	mov	r3, r5
 80039b2:	4622      	mov	r2, r4
 80039b4:	4905      	ldr	r1, [pc, #20]	; (80039cc <NexTextSetColor+0x30>)
 80039b6:	a801      	add	r0, sp, #4
 80039b8:	f000 fe2c 	bl	8004614 <siprintf>
   sendCommand (cmd);
 80039bc:	a801      	add	r0, sp, #4
 80039be:	f7ff ff7f 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 80039c2:	f7ff ff93 	bl	80038ec <recvRetCommandFinished>
}
 80039c6:	b00f      	add	sp, #60	; 0x3c
 80039c8:	bd30      	pop	{r4, r5, pc}
 80039ca:	bf00      	nop
 80039cc:	08004fe8 	.word	0x08004fe8

080039d0 <NexNumberSetValue>:
   sendCommand (cmd);
   return recvRetString (buffer, len);
}

int NexNumberSetValue(int Number, int value)
{
 80039d0:	b510      	push	{r4, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
   char cmd[15]={0};
 80039d8:	2400      	movs	r4, #0
 80039da:	9400      	str	r4, [sp, #0]
 80039dc:	9401      	str	r4, [sp, #4]
 80039de:	9402      	str	r4, [sp, #8]
 80039e0:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "n%d.val=%d", Number, value) ;
 80039e4:	4905      	ldr	r1, [pc, #20]	; (80039fc <NexNumberSetValue+0x2c>)
 80039e6:	4668      	mov	r0, sp
 80039e8:	f000 fe14 	bl	8004614 <siprintf>
   sendCommand (cmd);
 80039ec:	4668      	mov	r0, sp
 80039ee:	f7ff ff67 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 80039f2:	f7ff ff7b 	bl	80038ec <recvRetCommandFinished>
}
 80039f6:	b004      	add	sp, #16
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	bf00      	nop
 80039fc:	08005000 	.word	0x08005000

08003a00 <NexXfloatSetValue>:
   sendCommand (cmd);
   return recvRetNumber ();
}

int NexXfloatSetValue(int Number, int value)
{
 8003a00:	b510      	push	{r4, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
   char cmd[15]={0};
 8003a08:	2400      	movs	r4, #0
 8003a0a:	9400      	str	r4, [sp, #0]
 8003a0c:	9401      	str	r4, [sp, #4]
 8003a0e:	9402      	str	r4, [sp, #8]
 8003a10:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "x%d.val=%d", Number, value) ;
 8003a14:	4905      	ldr	r1, [pc, #20]	; (8003a2c <NexXfloatSetValue+0x2c>)
 8003a16:	4668      	mov	r0, sp
 8003a18:	f000 fdfc 	bl	8004614 <siprintf>
   sendCommand (cmd);
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	f7ff ff4f 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 8003a22:	f7ff ff63 	bl	80038ec <recvRetCommandFinished>
}
 8003a26:	b004      	add	sp, #16
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	bf00      	nop
 8003a2c:	08005018 	.word	0x08005018

08003a30 <NexPictureSetPic>:

int NexPictureSetPic(int pic, int value)
{
 8003a30:	b510      	push	{r4, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
   char cmd[15]={0};
 8003a38:	2400      	movs	r4, #0
 8003a3a:	9400      	str	r4, [sp, #0]
 8003a3c:	9401      	str	r4, [sp, #4]
 8003a3e:	9402      	str	r4, [sp, #8]
 8003a40:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "p%d.pic=%d", pic, value);
 8003a44:	4905      	ldr	r1, [pc, #20]	; (8003a5c <NexPictureSetPic+0x2c>)
 8003a46:	4668      	mov	r0, sp
 8003a48:	f000 fde4 	bl	8004614 <siprintf>
   sendCommand (cmd);
 8003a4c:	4668      	mov	r0, sp
 8003a4e:	f7ff ff37 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 8003a52:	f7ff ff4b 	bl	80038ec <recvRetCommandFinished>
}
 8003a56:	b004      	add	sp, #16
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08005024 	.word	0x08005024

08003a60 <NexVariableSetValue>:
   sendCommand (cmd);
   return recvRetNumber ();
}

int NexVariableSetValue(int Variable,int value )
{
 8003a60:	b510      	push	{r4, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
   char cmd[15]={0};
 8003a68:	2400      	movs	r4, #0
 8003a6a:	9400      	str	r4, [sp, #0]
 8003a6c:	9401      	str	r4, [sp, #4]
 8003a6e:	9402      	str	r4, [sp, #8]
 8003a70:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd,"va%d.val=%d",Variable,value) ;
 8003a74:	4905      	ldr	r1, [pc, #20]	; (8003a8c <NexVariableSetValue+0x2c>)
 8003a76:	4668      	mov	r0, sp
 8003a78:	f000 fdcc 	bl	8004614 <siprintf>
   sendCommand (cmd);
 8003a7c:	4668      	mov	r0, sp
 8003a7e:	f7ff ff1f 	bl	80038c0 <sendCommand>
   return recvRetCommandFinished ();
 8003a82:	f7ff ff33 	bl	80038ec <recvRetCommandFinished>
}
 8003a86:	b004      	add	sp, #16
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	bf00      	nop
 8003a8c:	080050f8 	.word	0x080050f8

08003a90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a90:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a92:	480e      	ldr	r0, [pc, #56]	; (8003acc <MX_SPI1_Init+0x3c>)
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <MX_SPI1_Init+0x40>)
 8003a96:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a98:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a9c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aa6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003aae:	2208      	movs	r2, #8
 8003ab0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ab4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ab8:	230a      	movs	r3, #10
 8003aba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003abc:	f7fe fa76 	bl	8001fac <HAL_SPI_Init>
 8003ac0:	b900      	cbnz	r0, 8003ac4 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ac2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ac4:	f7ff fefa 	bl	80038bc <Error_Handler>
}
 8003ac8:	e7fb      	b.n	8003ac2 <MX_SPI1_Init+0x32>
 8003aca:	bf00      	nop
 8003acc:	20000e84 	.word	0x20000e84
 8003ad0:	40013000 	.word	0x40013000

08003ad4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	9304      	str	r3, [sp, #16]
 8003ae0:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8003ae2:	6802      	ldr	r2, [r0, #0]
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_SPI_MspInit+0x6c>)
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003aea:	b006      	add	sp, #24
 8003aec:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aee:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003af8:	619a      	str	r2, [r3, #24]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	f042 0204 	orr.w	r2, r2, #4
 8003b0a:	619a      	str	r2, [r3, #24]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_XBee_Pin|MOSI_XBee_Pin;
 8003b16:	23a0      	movs	r3, #160	; 0xa0
 8003b18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	4c08      	ldr	r4, [pc, #32]	; (8003b44 <HAL_SPI_MspInit+0x70>)
 8003b24:	a902      	add	r1, sp, #8
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7fd fdb4 	bl	8001694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_XBee_Pin;
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b30:	2300      	movs	r3, #0
 8003b32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MISO_XBee_GPIO_Port, &GPIO_InitStruct);
 8003b36:	a902      	add	r1, sp, #8
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7fd fdab 	bl	8001694 <HAL_GPIO_Init>
}
 8003b3e:	e7d4      	b.n	8003aea <HAL_SPI_MspInit+0x16>
 8003b40:	40013000 	.word	0x40013000
 8003b44:	40010800 	.word	0x40010800

08003b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <HAL_MspInit+0x3c>)
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	619a      	str	r2, [r3, #24]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	f002 0201 	and.w	r2, r2, #1
 8003b5a:	9200      	str	r2, [sp, #0]
 8003b5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b64:	61da      	str	r2, [r3, #28]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b70:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_MspInit+0x40>)
 8003b72:	6853      	ldr	r3, [r2, #4]
 8003b74:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b7e:	b002      	add	sp, #8
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000

08003b8c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b8c:	4770      	bx	lr

08003b8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <HardFault_Handler>

08003b90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <MemManage_Handler>

08003b92 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <BusFault_Handler>

08003b94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <UsageFault_Handler>

08003b96 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b96:	4770      	bx	lr

08003b98 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b98:	4770      	bx	lr

08003b9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9a:	4770      	bx	lr

08003b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b9e:	f7fd f807 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba2:	bd08      	pop	{r3, pc}

08003ba4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003ba6:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA1_Channel2_IRQHandler+0xc>)
 8003ba8:	f7fd fcd2 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003bac:	bd08      	pop	{r3, pc}
 8003bae:	bf00      	nop
 8003bb0:	20001084 	.word	0x20001084

08003bb4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003bb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <DMA1_Channel3_IRQHandler+0xc>)
 8003bb8:	f7fd fcca 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003bbc:	bd08      	pop	{r3, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20001040 	.word	0x20001040

08003bc4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bc6:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <DMA1_Channel6_IRQHandler+0xc>)
 8003bc8:	f7fd fcc2 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bcc:	bd08      	pop	{r3, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000ffc 	.word	0x20000ffc

08003bd4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003bd4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003bd6:	4816      	ldr	r0, [pc, #88]	; (8003c30 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
 8003bd8:	f7fd fa34 	bl	8001044 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	if (HAL_GetTick() - timer_actual > 30) {
 8003bdc:	f7fc fff4 	bl	8000bc8 <HAL_GetTick>
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <USB_LP_CAN1_RX0_IRQHandler+0x60>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	1ac0      	subs	r0, r0, r3
 8003be6:	281e      	cmp	r0, #30
 8003be8:	d818      	bhi.n	8003c1c <USB_LP_CAN1_RX0_IRQHandler+0x48>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		timer_actual = HAL_GetTick();
	}

	if (CAN_STATE == 0) {
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b92b      	cbnz	r3, 8003bfc <USB_LP_CAN1_RX0_IRQHandler+0x28>
		CAN_STATE = 1;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
		FLAG_POP_UP = 0;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <USB_LP_CAN1_RX0_IRQHandler+0x68>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
	}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003bfc:	4d10      	ldr	r5, [pc, #64]	; (8003c40 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 8003bfe:	4c11      	ldr	r4, [pc, #68]	; (8003c44 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8003c00:	462b      	mov	r3, r5
 8003c02:	4622      	mov	r2, r4
 8003c04:	2100      	movs	r1, #0
 8003c06:	480a      	ldr	r0, [pc, #40]	; (8003c30 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
 8003c08:	f7fd f952 	bl	8000eb0 <HAL_CAN_GetRxMessage>
	canMessageReceived(RxHeader.StdId, RxData);
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	8820      	ldrh	r0, [r4, #0]
 8003c10:	f7ff fa06 	bl	8003020 <canMessageReceived>
		HAL_IWDG_Refresh(&hiwdg);
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8003c16:	f7fd fe91 	bl	800193c <HAL_IWDG_Refresh>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	480b      	ldr	r0, [pc, #44]	; (8003c4c <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8003c20:	f7fd fe57 	bl	80018d2 <HAL_GPIO_TogglePin>
		timer_actual = HAL_GetTick();
 8003c24:	f7fc ffd0 	bl	8000bc8 <HAL_GetTick>
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <USB_LP_CAN1_RX0_IRQHandler+0x60>)
 8003c2a:	6018      	str	r0, [r3, #0]
 8003c2c:	e7dd      	b.n	8003bea <USB_LP_CAN1_RX0_IRQHandler+0x16>
 8003c2e:	bf00      	nop
 8003c30:	20000d7c 	.word	0x20000d7c
 8003c34:	20000edc 	.word	0x20000edc
 8003c38:	20000e48 	.word	0x20000e48
 8003c3c:	200001b0 	.word	0x200001b0
 8003c40:	20000de8 	.word	0x20000de8
 8003c44:	20000df8 	.word	0x20000df8
 8003c48:	20000e14 	.word	0x20000e14
 8003c4c:	40010800 	.word	0x40010800

08003c50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003c52:	4802      	ldr	r0, [pc, #8]	; (8003c5c <CAN1_RX1_IRQHandler+0xc>)
 8003c54:	f7fd f9f6 	bl	8001044 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c58:	bd08      	pop	{r3, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000d7c 	.word	0x20000d7c

08003c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c62:	4803      	ldr	r0, [pc, #12]	; (8003c70 <USART2_IRQHandler+0x10>)
 8003c64:	f7fe fd5c 	bl	8002720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//	USART_IrqHandler(&huart2, &hdma_usart2_rx);
	uart2MessageReceived();
 8003c68:	f000 f842 	bl	8003cf0 <uart2MessageReceived>

  /* USER CODE END USART2_IRQn 1 */
}
 8003c6c:	bd08      	pop	{r3, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000f74 	.word	0x20000f74

08003c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c76:	4802      	ldr	r0, [pc, #8]	; (8003c80 <USART3_IRQHandler+0xc>)
 8003c78:	f7fe fd52 	bl	8002720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c7c:	bd08      	pop	{r3, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000fb8 	.word	0x20000fb8

08003c84 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <SystemInit+0x40>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <SystemInit+0x44>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003c9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003cb2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003cb6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <SystemInit+0x48>)
 8003cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cbe:	609a      	str	r2, [r3, #8]
#endif 
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	f8ff0000 	.word	0xf8ff0000
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <compareString>:

/* Telemetry variables */
uint8_t _real_clock_received = 0;

uint8_t compareString(uint8_t *first, uint8_t *second, uint16_t len) {
	while (*first == *second) {
 8003cd0:	e001      	b.n	8003cd6 <compareString+0x6>

		len--;
		if (len == 0)
			return 1; /* Same strings */

		first++;
 8003cd2:	3001      	adds	r0, #1
		second++;
 8003cd4:	3101      	adds	r1, #1
	while (*first == *second) {
 8003cd6:	f890 c000 	ldrb.w	ip, [r0]
 8003cda:	780b      	ldrb	r3, [r1, #0]
 8003cdc:	459c      	cmp	ip, r3
 8003cde:	d105      	bne.n	8003cec <compareString+0x1c>
		len--;
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	b292      	uxth	r2, r2
		if (len == 0)
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	d1f4      	bne.n	8003cd2 <compareString+0x2>
			return 1; /* Same strings */
 8003ce8:	2001      	movs	r0, #1
	}

	return 0;
}
 8003cea:	4770      	bx	lr
	return 0;
 8003cec:	2000      	movs	r0, #0
 8003cee:	4770      	bx	lr

08003cf0 <uart2MessageReceived>:

void uart2MessageReceived(void) {
 8003cf0:	b538      	push	{r3, r4, r5, lr}
	 Receive options: 0x40
	 Receive data: 0x?? 0x?? 0x?? 0x?? ... ... maximum 255 bytes
	 Checksum: 0x??
	 */

	memcpy(XBEE_UART_BUFFER, DMA_RX_Buffer_3, DMA_RX_BUFFER_SIZE_XBEE);
 8003cf2:	4c18      	ldr	r4, [pc, #96]	; (8003d54 <uart2MessageReceived+0x64>)
 8003cf4:	4d18      	ldr	r5, [pc, #96]	; (8003d58 <uart2MessageReceived+0x68>)
 8003cf6:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8003cfa:	46ac      	mov	ip, r5
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	6861      	ldr	r1, [r4, #4]
 8003d00:	68a2      	ldr	r2, [r4, #8]
 8003d02:	68e3      	ldr	r3, [r4, #12]
 8003d04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003d08:	3410      	adds	r4, #16
 8003d0a:	4665      	mov	r5, ip
 8003d0c:	4574      	cmp	r4, lr
 8003d0e:	d1f4      	bne.n	8003cfa <uart2MessageReceived+0xa>

	if (XBEE_UART_BUFFER[3] != 0x90)
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <uart2MessageReceived+0x68>)
 8003d12:	78db      	ldrb	r3, [r3, #3]
 8003d14:	2b90      	cmp	r3, #144	; 0x90
 8003d16:	d108      	bne.n	8003d2a <uart2MessageReceived+0x3a>
		return; /* If the message received != "Receive Packet" */

	return_status = compareString(XBEE_UART_BUFFER + 15, ping_request, 4); /* Comparing if the received message is the xbee ping request */
 8003d18:	2204      	movs	r2, #4
 8003d1a:	4910      	ldr	r1, [pc, #64]	; (8003d5c <uart2MessageReceived+0x6c>)
 8003d1c:	4810      	ldr	r0, [pc, #64]	; (8003d60 <uart2MessageReceived+0x70>)
 8003d1e:	f7ff ffd7 	bl	8003cd0 <compareString>
	if (return_status)
 8003d22:	b910      	cbnz	r0, 8003d2a <uart2MessageReceived+0x3a>
		return;
	if (mode == BYTES_API) {
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <uart2MessageReceived+0x74>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b103      	cbz	r3, 8003d2c <uart2MessageReceived+0x3c>

		FLAG_MSG = XBEE_UART_BUFFER[15];
	}
//	for (uint8_t i = 0; i < DMA_RX_BUFFER_SIZE_NEXTION; i++)
//		XBEE_UART_BUFFER[i] = 0;
}
 8003d2a:	bd38      	pop	{r3, r4, r5, pc}
		blinkLed3();
 8003d2c:	f7ff f98a 	bl	8003044 <blinkLed3>
		api_length = XBEE_UART_BUFFER[1] << 8;
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <uart2MessageReceived+0x68>)
 8003d32:	7853      	ldrb	r3, [r2, #1]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		api_length += XBEE_UART_BUFFER[2];
 8003d3a:	7891      	ldrb	r1, [r2, #2]
 8003d3c:	440b      	add	r3, r1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		if (api_length > 255)
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	d8f0      	bhi.n	8003d2a <uart2MessageReceived+0x3a>
		FLAG_MSG = XBEE_UART_BUFFER[15];
 8003d48:	4613      	mov	r3, r2
 8003d4a:	f992 200f 	ldrsb.w	r2, [r2, #15]
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d52:	e7ea      	b.n	8003d2a <uart2MessageReceived+0x3a>
 8003d54:	200000a0 	.word	0x200000a0
 8003d58:	20000ee0 	.word	0x20000ee0
 8003d5c:	08005124 	.word	0x08005124
 8003d60:	20000eef 	.word	0x20000eef
 8003d64:	200010cc 	.word	0x200010cc

08003d68 <xbeePACKS_1>:

void xbeePACKS_1(void) {
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	b082      	sub	sp, #8
	/*Pack 1*/
	for (int i = ID_safety_pack1_1; i <= ID_safety_pack1_5; i++)
 8003d6c:	f240 142d 	movw	r4, #301	; 0x12d
 8003d70:	e00c      	b.n	8003d8c <xbeePACKS_1+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003d72:	4909      	ldr	r1, [pc, #36]	; (8003d98 <xbeePACKS_1+0x30>)
 8003d74:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8003d78:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	8893      	ldrh	r3, [r2, #4]
 8003d7e:	8852      	ldrh	r2, [r2, #2]
 8003d80:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 fb7b 	bl	8004480 <xbeeSend>
	for (int i = ID_safety_pack1_1; i <= ID_safety_pack1_5; i++)
 8003d8a:	3401      	adds	r4, #1
 8003d8c:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 8003d90:	dbef      	blt.n	8003d72 <xbeePACKS_1+0xa>
}
 8003d92:	b002      	add	sp, #8
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	bf00      	nop
 8003d98:	200001b4 	.word	0x200001b4

08003d9c <xbeePACKS_2>:

void xbeePACKS_2(void) {
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	b082      	sub	sp, #8
	/*Pack 2*/
	for (int i = ID_safety_pack2_1; i <= ID_safety_pack2_5; i++)
 8003da0:	f44f 7499 	mov.w	r4, #306	; 0x132
 8003da4:	e00c      	b.n	8003dc0 <xbeePACKS_2+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003da6:	4909      	ldr	r1, [pc, #36]	; (8003dcc <xbeePACKS_2+0x30>)
 8003da8:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8003dac:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	8893      	ldrh	r3, [r2, #4]
 8003db2:	8852      	ldrh	r2, [r2, #2]
 8003db4:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 fb61 	bl	8004480 <xbeeSend>
	for (int i = ID_safety_pack2_1; i <= ID_safety_pack2_5; i++)
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	f5b4 7f9b 	cmp.w	r4, #310	; 0x136
 8003dc4:	ddef      	ble.n	8003da6 <xbeePACKS_2+0xa>
}
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	bf00      	nop
 8003dcc:	200001b4 	.word	0x200001b4

08003dd0 <xbeePACKS_3>:

void xbeePACKS_3(void) {
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	b082      	sub	sp, #8
	/*Pack 3*/
	for (int i = ID_safety_pack3_1; i <= ID_safety_pack3_5; i++)
 8003dd4:	f240 1437 	movw	r4, #311	; 0x137
 8003dd8:	e00c      	b.n	8003df4 <xbeePACKS_3+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003dda:	4909      	ldr	r1, [pc, #36]	; (8003e00 <xbeePACKS_3+0x30>)
 8003ddc:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8003de0:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	8893      	ldrh	r3, [r2, #4]
 8003de6:	8852      	ldrh	r2, [r2, #2]
 8003de8:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 fb47 	bl	8004480 <xbeeSend>
	for (int i = ID_safety_pack3_1; i <= ID_safety_pack3_5; i++)
 8003df2:	3401      	adds	r4, #1
 8003df4:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 8003df8:	dbef      	blt.n	8003dda <xbeePACKS_3+0xa>
}
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop
 8003e00:	200001b4 	.word	0x200001b4

08003e04 <xbeePACKS_4>:

void xbeePACKS_4(void) {
 8003e04:	b510      	push	{r4, lr}
 8003e06:	b082      	sub	sp, #8
	/*Pack 4*/
	for (int i = ID_safety_pack4_1; i <= ID_safety_pack4_5; i++)
 8003e08:	f44f 749e 	mov.w	r4, #316	; 0x13c
 8003e0c:	e00c      	b.n	8003e28 <xbeePACKS_4+0x24>
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003e0e:	4909      	ldr	r1, [pc, #36]	; (8003e34 <xbeePACKS_4+0x30>)
 8003e10:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
				can_vector[i].word_2, can_vector[i].word_3);
 8003e14:	88d3      	ldrh	r3, [r2, #6]
		xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1,
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	8893      	ldrh	r3, [r2, #4]
 8003e1a:	8852      	ldrh	r2, [r2, #2]
 8003e1c:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 fb2d 	bl	8004480 <xbeeSend>
	for (int i = ID_safety_pack4_1; i <= ID_safety_pack4_5; i++)
 8003e26:	3401      	adds	r4, #1
 8003e28:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8003e2c:	ddef      	ble.n	8003e0e <xbeePACKS_4+0xa>
}
 8003e2e:	b002      	add	sp, #8
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	200001b4 	.word	0x200001b4

08003e38 <xbeeGERAL>:

void xbeeGERAL(void) {
 8003e38:	b530      	push	{r4, r5, lr}
 8003e3a:	b083      	sub	sp, #12
	/*GERAL*/
	xbeeSend(ID_safety_voltage, can_vector[ID_safety_voltage].word_0,
 8003e3c:	4c25      	ldr	r4, [pc, #148]	; (8003ed4 <xbeeGERAL+0x9c>)
			can_vector[ID_safety_voltage].word_1, 0,
			can_vector[ID_safety_voltage].word_3);
 8003e3e:	f8b4 3716 	ldrh.w	r3, [r4, #1814]	; 0x716
	xbeeSend(ID_safety_voltage, can_vector[ID_safety_voltage].word_0,
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8b4 2712 	ldrh.w	r2, [r4, #1810]	; 0x712
 8003e4a:	f8b4 1710 	ldrh.w	r1, [r4, #1808]	; 0x710
 8003e4e:	20e2      	movs	r0, #226	; 0xe2
 8003e50:	f000 fb16 	bl	8004480 <xbeeSend>

	xbeeSend(ID_safety_bms, can_vector[ID_safety_bms].word_0, _ERRO_SEGURANCA,
 8003e54:	f8b4 5718 	ldrh.w	r5, [r4, #1816]	; 0x718
 8003e58:	f7fe fe62 	bl	8002b20 <BMS_erro_bin_to_int>
 8003e5c:	4602      	mov	r2, r0
			can_vector[ID_safety_bms].word_2, can_vector[ID_safety_bms].word_3);
 8003e5e:	f8b4 371e 	ldrh.w	r3, [r4, #1822]	; 0x71e
	xbeeSend(ID_safety_bms, can_vector[ID_safety_bms].word_0, _ERRO_SEGURANCA,
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f8b4 371c 	ldrh.w	r3, [r4, #1820]	; 0x71c
 8003e68:	4629      	mov	r1, r5
 8003e6a:	20e3      	movs	r0, #227	; 0xe3
 8003e6c:	f000 fb08 	bl	8004480 <xbeeSend>

	xbeeSend(ID_safety_current, 0, can_vector[ID_safety_current].word_1, 0,
			can_vector[ID_safety_current].word_3);
 8003e70:	f8b4 3736 	ldrh.w	r3, [r4, #1846]	; 0x736
	xbeeSend(ID_safety_current, 0, can_vector[ID_safety_current].word_1, 0,
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8b4 2732 	ldrh.w	r2, [r4, #1842]	; 0x732
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	20e6      	movs	r0, #230	; 0xe6
 8003e80:	f000 fafe 	bl	8004480 <xbeeSend>

	xbeeSend(ID_safety_charge, can_vector[ID_safety_charge].word_0, 0, 0,
			can_vector[ID_safety_charge].word_3);
 8003e84:	f8b4 3736 	ldrh.w	r3, [r4, #1846]	; 0x736
	xbeeSend(ID_safety_charge, can_vector[ID_safety_charge].word_0, 0, 0,
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f8b4 1730 	ldrh.w	r1, [r4, #1840]	; 0x730
 8003e92:	20e6      	movs	r0, #230	; 0xe6
 8003e94:	f000 faf4 	bl	8004480 <xbeeSend>

	xbeeSend(ID_safety_soc, can_vector[ID_safety_soc].word_0, 0, 0, 0);
 8003e98:	2500      	movs	r5, #0
 8003e9a:	9500      	str	r5, [sp, #0]
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	462a      	mov	r2, r5
 8003ea0:	f8b4 1740 	ldrh.w	r1, [r4, #1856]	; 0x740
 8003ea4:	20e8      	movs	r0, #232	; 0xe8
 8003ea6:	f000 faeb 	bl	8004480 <xbeeSend>

	xbeeSend(ID_control_speed_l_motor,
 8003eaa:	9500      	str	r5, [sp, #0]
 8003eac:	462b      	mov	r3, r5
 8003eae:	f8b4 22aa 	ldrh.w	r2, [r4, #682]	; 0x2aa
 8003eb2:	f8b4 12a8 	ldrh.w	r1, [r4, #680]	; 0x2a8
 8003eb6:	2055      	movs	r0, #85	; 0x55
 8003eb8:	f000 fae2 	bl	8004480 <xbeeSend>
			can_vector[ID_control_speed_l_motor].word_0,
			can_vector[ID_control_speed_l_motor].word_1, 0, 0);

	xbeeSend(ID_control_speed_r_motor,
 8003ebc:	9500      	str	r5, [sp, #0]
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
 8003ec4:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
 8003ec8:	205f      	movs	r0, #95	; 0x5f
 8003eca:	f000 fad9 	bl	8004480 <xbeeSend>
			can_vector[ID_control_speed_r_motor].word_0,
			can_vector[ID_control_speed_r_motor].word_1, 0, 0);
}
 8003ece:	b003      	add	sp, #12
 8003ed0:	bd30      	pop	{r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200001b4 	.word	0x200001b4

08003ed8 <xbeeCONTROLE>:

void xbeeCONTROLE(void) {
 8003ed8:	b530      	push	{r4, r5, lr}
 8003eda:	b083      	sub	sp, #12
	/*CONTROLE*/
	xbeeSend(ID_control_accelerometer,
			can_vector[ID_control_accelerometer].word_0,
 8003edc:	4c29      	ldr	r4, [pc, #164]	; (8003f84 <xbeeCONTROLE+0xac>)
	xbeeSend(ID_control_accelerometer,
 8003ede:	2500      	movs	r5, #0
 8003ee0:	9500      	str	r5, [sp, #0]
 8003ee2:	f8b4 391c 	ldrh.w	r3, [r4, #2332]	; 0x91c
 8003ee6:	f8b4 291a 	ldrh.w	r2, [r4, #2330]	; 0x91a
 8003eea:	f8b4 1918 	ldrh.w	r1, [r4, #2328]	; 0x918
 8003eee:	f240 1023 	movw	r0, #291	; 0x123
 8003ef2:	f000 fac5 	bl	8004480 <xbeeSend>
			can_vector[ID_control_accelerometer].word_1,
			can_vector[ID_control_accelerometer].word_2, 0);

	xbeeSend(ID_control_gyroscopic,
 8003ef6:	9500      	str	r5, [sp, #0]
 8003ef8:	f8b4 3924 	ldrh.w	r3, [r4, #2340]	; 0x924
 8003efc:	f8b4 2922 	ldrh.w	r2, [r4, #2338]	; 0x922
 8003f00:	f8b4 1920 	ldrh.w	r1, [r4, #2336]	; 0x920
 8003f04:	f44f 7092 	mov.w	r0, #292	; 0x124
 8003f08:	f000 faba 	bl	8004480 <xbeeSend>
				can_vector[ID_control_gyroscopic].word_2, 0);

	xbeeSend(ID_control_speed_average, 0,
			can_vector[ID_control_speed_average].word_1,
			can_vector[ID_control_speed_average].word_2,
			can_vector[ID_control_speed_average].word_3);
 8003f0c:	f8b4 3266 	ldrh.w	r3, [r4, #614]	; 0x266
	xbeeSend(ID_control_speed_average, 0,
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f8b4 3264 	ldrh.w	r3, [r4, #612]	; 0x264
 8003f16:	f8b4 2262 	ldrh.w	r2, [r4, #610]	; 0x262
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	204c      	movs	r0, #76	; 0x4c
 8003f1e:	f000 faaf 	bl	8004480 <xbeeSend>

	xbeeSend(ID_control_hodometer, can_vector[ID_control_hodometer].word_0,
			can_vector[ID_control_hodometer].word_1,
			can_vector[ID_control_hodometer].word_2,
			can_vector[ID_control_hodometer].word_3);
 8003f22:	f8b4 326e 	ldrh.w	r3, [r4, #622]	; 0x26e
	xbeeSend(ID_control_hodometer, can_vector[ID_control_hodometer].word_0,
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f8b4 326c 	ldrh.w	r3, [r4, #620]	; 0x26c
 8003f2c:	f8b4 226a 	ldrh.w	r2, [r4, #618]	; 0x26a
 8003f30:	f8b4 1268 	ldrh.w	r1, [r4, #616]	; 0x268
 8003f34:	204d      	movs	r0, #77	; 0x4d
 8003f36:	f000 faa3 	bl	8004480 <xbeeSend>

	xbeeSend(ID_control_torque_motor, _ERRO_CONTROLE, _ERRO_INVERSOR, 0, 0);
 8003f3a:	f7fe fddd 	bl	8002af8 <ECU_erro_bin_to_int>
 8003f3e:	4601      	mov	r1, r0
 8003f40:	9500      	str	r5, [sp, #0]
 8003f42:	462b      	mov	r3, r5
 8003f44:	f8b4 2272 	ldrh.w	r2, [r4, #626]	; 0x272
 8003f48:	204e      	movs	r0, #78	; 0x4e
 8003f4a:	f000 fa99 	bl	8004480 <xbeeSend>

	xbeeSend(ID_control_speed_wheel, can_vector[ID_control_speed_wheel].word_0,
			can_vector[ID_control_speed_wheel].word_1,
			can_vector[ID_control_speed_wheel].word_2,
			can_vector[ID_control_speed_wheel].word_3);
 8003f4e:	f8b4 327e 	ldrh.w	r3, [r4, #638]	; 0x27e
	xbeeSend(ID_control_speed_wheel, can_vector[ID_control_speed_wheel].word_0,
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f8b4 327c 	ldrh.w	r3, [r4, #636]	; 0x27c
 8003f58:	f8b4 227a 	ldrh.w	r2, [r4, #634]	; 0x27a
 8003f5c:	f8b4 1278 	ldrh.w	r1, [r4, #632]	; 0x278
 8003f60:	204f      	movs	r0, #79	; 0x4f
 8003f62:	f000 fa8d 	bl	8004480 <xbeeSend>

	xbeeSend(ID_acquisition_brake, can_vector[ID_acquisition_brake].word_0,
				can_vector[ID_acquisition_brake].word_1,
				can_vector[ID_acquisition_brake].word_2,
				can_vector[ID_acquisition_brake].word_3);
 8003f66:	f8b4 34c6 	ldrh.w	r3, [r4, #1222]	; 0x4c6
	xbeeSend(ID_acquisition_brake, can_vector[ID_acquisition_brake].word_0,
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	f8b4 34c4 	ldrh.w	r3, [r4, #1220]	; 0x4c4
 8003f70:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
 8003f74:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
 8003f78:	2098      	movs	r0, #152	; 0x98
 8003f7a:	f000 fa81 	bl	8004480 <xbeeSend>
}
 8003f7e:	b003      	add	sp, #12
 8003f80:	bd30      	pop	{r4, r5, pc}
 8003f82:	bf00      	nop
 8003f84:	200001b4 	.word	0x200001b4

08003f88 <TELEMETRY>:

void TELEMETRY() {
 8003f88:	b508      	push	{r3, lr}
	switch (INFORMACAO) {
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <TELEMETRY+0x9c>)
 8003f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f90:	b18b      	cbz	r3, 8003fb6 <TELEMETRY+0x2e>
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d016      	beq.n	8003fc4 <TELEMETRY+0x3c>
		xbeeCONTROLE();
		INFORMACAO = PACKS;
		break;

	default:
		if (timer_wait_ms(informacaoTimeout, PACKS_Timer))
 8003f96:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <TELEMETRY+0x9c>)
 8003f9c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003f9e:	f7ff f863 	bl	8003068 <timer_wait_ms>
 8003fa2:	b1f0      	cbz	r0, 8003fe2 <TELEMETRY+0x5a>
			switch (PACK) {
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <TELEMETRY+0xa0>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	3b03      	subs	r3, #3
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d819      	bhi.n	8003fe2 <TELEMETRY+0x5a>
 8003fae:	e8df f003 	tbb	[pc, r3]
 8003fb2:	1d10      	.short	0x1d10
 8003fb4:	2f26      	.short	0x2f26
		xbeeGERAL();
 8003fb6:	f7ff ff3f 	bl	8003e38 <xbeeGERAL>
		INFORMACAO = CONTROL;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <TELEMETRY+0x9c>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
 8003fc2:	e012      	b.n	8003fea <TELEMETRY+0x62>
		xbeeCONTROLE();
 8003fc4:	f7ff ff88 	bl	8003ed8 <xbeeCONTROLE>
		INFORMACAO = PACKS;
 8003fc8:	4b16      	ldr	r3, [pc, #88]	; (8004024 <TELEMETRY+0x9c>)
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
 8003fd0:	e00b      	b.n	8003fea <TELEMETRY+0x62>
			case PACKS1:
				xbeePACKS_1();
 8003fd2:	f7ff fec9 	bl	8003d68 <xbeePACKS_1>
				PACK = PACKS2;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <TELEMETRY+0xa0>)
 8003fd8:	2204      	movs	r2, #4
 8003fda:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8003fdc:	4813      	ldr	r0, [pc, #76]	; (800402c <TELEMETRY+0xa4>)
 8003fde:	f7ff f84f 	bl	8003080 <timer_restart>
			case PACKS4:
				xbeePACKS_4();
				PACK = PACKS1;
				timer_restart(&informacaoTimeout);
			}
		INFORMACAO = GERAL;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <TELEMETRY+0x9c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		break;
	}
}
 8003fea:	bd08      	pop	{r3, pc}
				xbeePACKS_2();
 8003fec:	f7ff fed6 	bl	8003d9c <xbeePACKS_2>
				PACK = PACKS3;
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <TELEMETRY+0xa0>)
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8003ff6:	480d      	ldr	r0, [pc, #52]	; (800402c <TELEMETRY+0xa4>)
 8003ff8:	f7ff f842 	bl	8003080 <timer_restart>
				break;
 8003ffc:	e7f1      	b.n	8003fe2 <TELEMETRY+0x5a>
				xbeePACKS_3();
 8003ffe:	f7ff fee7 	bl	8003dd0 <xbeePACKS_3>
				PACK = PACKS4;
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <TELEMETRY+0xa0>)
 8004004:	2206      	movs	r2, #6
 8004006:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 8004008:	4808      	ldr	r0, [pc, #32]	; (800402c <TELEMETRY+0xa4>)
 800400a:	f7ff f839 	bl	8003080 <timer_restart>
				break;
 800400e:	e7e8      	b.n	8003fe2 <TELEMETRY+0x5a>
				xbeePACKS_4();
 8004010:	f7ff fef8 	bl	8003e04 <xbeePACKS_4>
				PACK = PACKS1;
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <TELEMETRY+0xa0>)
 8004016:	2203      	movs	r2, #3
 8004018:	701a      	strb	r2, [r3, #0]
				timer_restart(&informacaoTimeout);
 800401a:	4804      	ldr	r0, [pc, #16]	; (800402c <TELEMETRY+0xa4>)
 800401c:	f7ff f830 	bl	8003080 <timer_restart>
 8004020:	e7df      	b.n	8003fe2 <TELEMETRY+0x5a>
 8004022:	bf00      	nop
 8004024:	20000ee0 	.word	0x20000ee0
 8004028:	20000018 	.word	0x20000018
 800402c:	20000f24 	.word	0x20000f24

08004030 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004030:	b500      	push	{lr}
 8004032:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004034:	2300      	movs	r3, #0
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004042:	4814      	ldr	r0, [pc, #80]	; (8004094 <MX_TIM3_Init+0x64>)
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <MX_TIM3_Init+0x68>)
 8004046:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8004048:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 800404c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004050:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004052:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004054:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004056:	f7fe f86b 	bl	8002130 <HAL_TIM_Base_Init>
 800405a:	b990      	cbnz	r0, 8004082 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004060:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004062:	a902      	add	r1, sp, #8
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <MX_TIM3_Init+0x64>)
 8004066:	f7fe f89b 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 800406a:	b968      	cbnz	r0, 8004088 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004070:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004072:	4669      	mov	r1, sp
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <MX_TIM3_Init+0x64>)
 8004076:	f7fe f901 	bl	800227c <HAL_TIMEx_MasterConfigSynchronization>
 800407a:	b940      	cbnz	r0, 800408e <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800407c:	b007      	add	sp, #28
 800407e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004082:	f7ff fc1b 	bl	80038bc <Error_Handler>
 8004086:	e7e9      	b.n	800405c <MX_TIM3_Init+0x2c>
    Error_Handler();
 8004088:	f7ff fc18 	bl	80038bc <Error_Handler>
 800408c:	e7ee      	b.n	800406c <MX_TIM3_Init+0x3c>
    Error_Handler();
 800408e:	f7ff fc15 	bl	80038bc <Error_Handler>
}
 8004092:	e7f3      	b.n	800407c <MX_TIM3_Init+0x4c>
 8004094:	20000f2c 	.word	0x20000f2c
 8004098:	40000400 	.word	0x40000400

0800409c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800409c:	6802      	ldr	r2, [r0, #0]
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_TIM_Base_MspInit+0x28>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d000      	beq.n	80040a6 <HAL_TIM_Base_MspInit+0xa>
 80040a4:	4770      	bx	lr
{
 80040a6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040a8:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	f042 0202 	orr.w	r2, r2, #2
 80040b2:	61da      	str	r2, [r3, #28]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80040be:	b002      	add	sp, #8
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40000400 	.word	0x40000400

080040c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80040c8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040ca:	480a      	ldr	r0, [pc, #40]	; (80040f4 <MX_USART2_UART_Init+0x2c>)
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <MX_USART2_UART_Init+0x30>)
 80040ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80040d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80040d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040d6:	2300      	movs	r3, #0
 80040d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040de:	220c      	movs	r2, #12
 80040e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040e6:	f7fe f9d1 	bl	800248c <HAL_UART_Init>
 80040ea:	b900      	cbnz	r0, 80040ee <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80040ee:	f7ff fbe5 	bl	80038bc <Error_Handler>
}
 80040f2:	e7fb      	b.n	80040ec <MX_USART2_UART_Init+0x24>
 80040f4:	20000f74 	.word	0x20000f74
 80040f8:	40004400 	.word	0x40004400

080040fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040fc:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040fe:	480b      	ldr	r0, [pc, #44]	; (800412c <MX_USART3_UART_Init+0x30>)
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <MX_USART3_UART_Init+0x34>)
 8004102:	6443      	str	r3, [r0, #68]	; 0x44
  huart3.Init.BaudRate = 115200;
 8004104:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004108:	6483      	str	r3, [r0, #72]	; 0x48
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	2300      	movs	r3, #0
 800410c:	64c3      	str	r3, [r0, #76]	; 0x4c
  huart3.Init.StopBits = UART_STOPBITS_1;
 800410e:	6503      	str	r3, [r0, #80]	; 0x50
  huart3.Init.Parity = UART_PARITY_NONE;
 8004110:	6543      	str	r3, [r0, #84]	; 0x54
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004112:	220c      	movs	r2, #12
 8004114:	6582      	str	r2, [r0, #88]	; 0x58
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	65c3      	str	r3, [r0, #92]	; 0x5c
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004118:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800411a:	3044      	adds	r0, #68	; 0x44
 800411c:	f7fe f9b6 	bl	800248c <HAL_UART_Init>
 8004120:	b900      	cbnz	r0, 8004124 <MX_USART3_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004122:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004124:	f7ff fbca 	bl	80038bc <Error_Handler>
}
 8004128:	e7fb      	b.n	8004122 <MX_USART3_UART_Init+0x26>
 800412a:	bf00      	nop
 800412c:	20000f74 	.word	0x20000f74
 8004130:	40004800 	.word	0x40004800

08004134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413a:	2300      	movs	r3, #0
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	9306      	str	r3, [sp, #24]
 8004142:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8004144:	6803      	ldr	r3, [r0, #0]
 8004146:	4a67      	ldr	r2, [pc, #412]	; (80042e4 <HAL_UART_MspInit+0x1b0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800414c:	4a66      	ldr	r2, [pc, #408]	; (80042e8 <HAL_UART_MspInit+0x1b4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d051      	beq.n	80041f6 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004152:	b008      	add	sp, #32
 8004154:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_UART_MspInit+0x1b8>)
 8004158:	69da      	ldr	r2, [r3, #28]
 800415a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800415e:	61da      	str	r2, [r3, #28]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004166:	9200      	str	r2, [sp, #0]
 8004168:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	f042 0204 	orr.w	r2, r2, #4
 8004170:	619a      	str	r2, [r3, #24]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_XBee_Pin;
 800417c:	2304      	movs	r3, #4
 800417e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004184:	2303      	movs	r3, #3
 8004186:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART2_TX_XBee_GPIO_Port, &GPIO_InitStruct);
 8004188:	4e59      	ldr	r6, [pc, #356]	; (80042f0 <HAL_UART_MspInit+0x1bc>)
 800418a:	a904      	add	r1, sp, #16
 800418c:	4630      	mov	r0, r6
 800418e:	f7fd fa81 	bl	8001694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RX_XBee_Pin;
 8004192:	2308      	movs	r3, #8
 8004194:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004196:	2500      	movs	r5, #0
 8004198:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART2_RX_XBee_GPIO_Port, &GPIO_InitStruct);
 800419c:	a904      	add	r1, sp, #16
 800419e:	4630      	mov	r0, r6
 80041a0:	f7fd fa78 	bl	8001694 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80041a4:	4853      	ldr	r0, [pc, #332]	; (80042f4 <HAL_UART_MspInit+0x1c0>)
 80041a6:	4b54      	ldr	r3, [pc, #336]	; (80042f8 <HAL_UART_MspInit+0x1c4>)
 80041a8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ac:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b0:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ba:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041be:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80041c2:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041c6:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041ca:	3088      	adds	r0, #136	; 0x88
 80041cc:	f7fd f8e2 	bl	8001394 <HAL_DMA_Init>
 80041d0:	b970      	cbnz	r0, 80041f0 <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80041d2:	4b48      	ldr	r3, [pc, #288]	; (80042f4 <HAL_UART_MspInit+0x1c0>)
 80041d4:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80041d8:	63a2      	str	r2, [r4, #56]	; 0x38
 80041da:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	4611      	mov	r1, r2
 80041e2:	2026      	movs	r0, #38	; 0x26
 80041e4:	f7fd f866 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041e8:	2026      	movs	r0, #38	; 0x26
 80041ea:	f7fd f89b 	bl	8001324 <HAL_NVIC_EnableIRQ>
 80041ee:	e7b0      	b.n	8004152 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80041f0:	f7ff fb64 	bl	80038bc <Error_Handler>
 80041f4:	e7ed      	b.n	80041d2 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <HAL_UART_MspInit+0x1b8>)
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041fe:	61da      	str	r2, [r3, #28]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004206:	9202      	str	r2, [sp, #8]
 8004208:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	f042 0208 	orr.w	r2, r2, #8
 8004210:	619a      	str	r2, [r3, #24]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_LCD_Pin;
 800421c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004220:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004222:	2302      	movs	r3, #2
 8004224:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004226:	2303      	movs	r3, #3
 8004228:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART3_TX_LCD_GPIO_Port, &GPIO_InitStruct);
 800422a:	4e34      	ldr	r6, [pc, #208]	; (80042fc <HAL_UART_MspInit+0x1c8>)
 800422c:	a904      	add	r1, sp, #16
 800422e:	4630      	mov	r0, r6
 8004230:	f7fd fa30 	bl	8001694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_LCD_Pin;
 8004234:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004238:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800423a:	2500      	movs	r5, #0
 800423c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART3_RX_LCD_GPIO_Port, &GPIO_InitStruct);
 8004240:	a904      	add	r1, sp, #16
 8004242:	4630      	mov	r0, r6
 8004244:	f7fd fa26 	bl	8001694 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004248:	482a      	ldr	r0, [pc, #168]	; (80042f4 <HAL_UART_MspInit+0x1c0>)
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_UART_MspInit+0x1cc>)
 800424c:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004250:	f8c0 50d0 	str.w	r5, [r0, #208]	; 0xd0
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004254:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800425e:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004262:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004266:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800426a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426e:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004272:	30cc      	adds	r0, #204	; 0xcc
 8004274:	f7fd f88e 	bl	8001394 <HAL_DMA_Init>
 8004278:	bb68      	cbnz	r0, 80042d6 <HAL_UART_MspInit+0x1a2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800427a:	481e      	ldr	r0, [pc, #120]	; (80042f4 <HAL_UART_MspInit+0x1c0>)
 800427c:	f100 03cc 	add.w	r3, r0, #204	; 0xcc
 8004280:	63a3      	str	r3, [r4, #56]	; 0x38
 8004282:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004286:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <HAL_UART_MspInit+0x1d0>)
 8004288:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800428c:	2310      	movs	r3, #16
 800428e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004292:	2300      	movs	r3, #0
 8004294:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800429e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a2:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80042a6:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042aa:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80042ae:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80042b2:	f7fd f86f 	bl	8001394 <HAL_DMA_Init>
 80042b6:	b988      	cbnz	r0, 80042dc <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_UART_MspInit+0x1c0>)
 80042ba:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80042be:	6362      	str	r2, [r4, #52]	; 0x34
 80042c0:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80042c4:	2200      	movs	r2, #0
 80042c6:	4611      	mov	r1, r2
 80042c8:	2027      	movs	r0, #39	; 0x27
 80042ca:	f7fc fff3 	bl	80012b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042ce:	2027      	movs	r0, #39	; 0x27
 80042d0:	f7fd f828 	bl	8001324 <HAL_NVIC_EnableIRQ>
}
 80042d4:	e73d      	b.n	8004152 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80042d6:	f7ff faf1 	bl	80038bc <Error_Handler>
 80042da:	e7ce      	b.n	800427a <HAL_UART_MspInit+0x146>
      Error_Handler();
 80042dc:	f7ff faee 	bl	80038bc <Error_Handler>
 80042e0:	e7ea      	b.n	80042b8 <HAL_UART_MspInit+0x184>
 80042e2:	bf00      	nop
 80042e4:	40004400 	.word	0x40004400
 80042e8:	40004800 	.word	0x40004800
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010800 	.word	0x40010800
 80042f4:	20000f74 	.word	0x20000f74
 80042f8:	4002006c 	.word	0x4002006c
 80042fc:	40010c00 	.word	0x40010c00
 8004300:	40020030 	.word	0x40020030
 8004304:	4002001c 	.word	0x4002001c

08004308 <xbeeApiModeSend>:
#include "xbee.h"

SendMode_e mode = BYTES_API;
uint32_t timer_actual_uart = 0;

uint8_t xbeeApiModeSend(char *xbeeBuffer, int buff_size) {
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	4605      	mov	r5, r0
 800430e:	460c      	mov	r4, r1
	/*Send chars through UART (Max 255 chars)*/
	/*Frame with specified address*/
	unsigned  char api_start = '\x7E';
 8004310:	237e      	movs	r3, #126	; 0x7e
 8004312:	f88d 301f 	strb.w	r3, [sp, #31]
	unsigned char api_frame_type = '\x10';
 8004316:	2310      	movs	r3, #16
 8004318:	f88d 301e 	strb.w	r3, [sp, #30]
	unsigned char api_frame_id = '\x00'; /* No response is requested */
 800431c:	2700      	movs	r7, #0
 800431e:	f88d 701d 	strb.w	r7, [sp, #29]
	unsigned char api_dest_address_64b[9] = "\x00\x00\x00\x00\x00\x00\xFF\xFF";
 8004322:	4e53      	ldr	r6, [pc, #332]	; (8004470 <xbeeApiModeSend+0x168>)
 8004324:	ab05      	add	r3, sp, #20
 8004326:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800432a:	c303      	stmia	r3!, {r0, r1}
 800432c:	701a      	strb	r2, [r3, #0]
	unsigned char api_dest_address_16b[3] = "\x00\x00";
 800432e:	68f3      	ldr	r3, [r6, #12]
 8004330:	f8ad 3010 	strh.w	r3, [sp, #16]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f88d 3012 	strb.w	r3, [sp, #18]
	unsigned char api_broad_radius = '\x00';
 800433a:	f88d 700f 	strb.w	r7, [sp, #15]
	unsigned char api_options = '\x40';
 800433e:	2340      	movs	r3, #64	; 0x40
 8004340:	f88d 300e 	strb.w	r3, [sp, #14]

	/*Aux variables*/
	int i, length_0;

	/*If the buff size is larger than 255, return 'fail'*/
	if (buff_size > 255)
 8004344:	2cff      	cmp	r4, #255	; 0xff
 8004346:	f300 8091 	bgt.w	800446c <xbeeApiModeSend+0x164>
		return 0;
	length = buff_size + 14; /*The frame length is 14 bytes + msg size*/
 800434a:	f104 060e 	add.w	r6, r4, #14

	/*Checksum calc step by step*/
	checksum = api_frame_type + api_frame_id; /*Sum 'type' and 'ID'*/
 800434e:	2310      	movs	r3, #16
 8004350:	9302      	str	r3, [sp, #8]
	for (i = 0; i < 8; i++)
 8004352:	463b      	mov	r3, r7
 8004354:	e008      	b.n	8004368 <xbeeApiModeSend+0x60>
		checksum += api_dest_address_64b[i]; /*Sum the 64b address*/
 8004356:	f103 0220 	add.w	r2, r3, #32
 800435a:	446a      	add	r2, sp
 800435c:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8004360:	9a02      	ldr	r2, [sp, #8]
 8004362:	440a      	add	r2, r1
 8004364:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 8; i++)
 8004366:	3301      	adds	r3, #1
 8004368:	2b07      	cmp	r3, #7
 800436a:	ddf4      	ble.n	8004356 <xbeeApiModeSend+0x4e>
	for (i = 0; i < 2; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	e008      	b.n	8004382 <xbeeApiModeSend+0x7a>
		checksum += api_dest_address_16b[i]; /*Sum the 16b address*/
 8004370:	f103 0220 	add.w	r2, r3, #32
 8004374:	446a      	add	r2, sp
 8004376:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800437a:	9a02      	ldr	r2, [sp, #8]
 800437c:	440a      	add	r2, r1
 800437e:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 2; i++)
 8004380:	3301      	adds	r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	ddf4      	ble.n	8004370 <xbeeApiModeSend+0x68>
	checksum += api_broad_radius + api_options; /*Sum 'BroadcastRadius' and 'options'*/
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	3340      	adds	r3, #64	; 0x40
 800438a:	9302      	str	r3, [sp, #8]
	for (i = 0; i < buff_size; i++)
 800438c:	2300      	movs	r3, #0
 800438e:	e004      	b.n	800439a <xbeeApiModeSend+0x92>
		checksum += (int) xbeeBuffer[i]; /*Sum the message*/
 8004390:	5ce9      	ldrb	r1, [r5, r3]
 8004392:	9a02      	ldr	r2, [sp, #8]
 8004394:	440a      	add	r2, r1
 8004396:	9202      	str	r2, [sp, #8]
	for (i = 0; i < buff_size; i++)
 8004398:	3301      	adds	r3, #1
 800439a:	42a3      	cmp	r3, r4
 800439c:	dbf8      	blt.n	8004390 <xbeeApiModeSend+0x88>
	checksum = checksum & 0xFF; /*keep only the lowest 8 bits*/
 800439e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80043a2:	9302      	str	r3, [sp, #8]
	checksum = 255 - checksum; /*Negate it and get checksum*/
 80043a4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80043a8:	9302      	str	r3, [sp, #8]


	/*Send message to ALL ID's*/

	HAL_UART_Transmit(&huart2, &api_start, 1, 100); /*Send 'start*/
 80043aa:	4f32      	ldr	r7, [pc, #200]	; (8004474 <xbeeApiModeSend+0x16c>)
 80043ac:	2364      	movs	r3, #100	; 0x64
 80043ae:	2201      	movs	r2, #1
 80043b0:	f10d 011f 	add.w	r1, sp, #31
 80043b4:	4638      	mov	r0, r7
 80043b6:	f7fe f898 	bl	80024ea <HAL_UART_Transmit>
	length_0 = 0xFF00 & length;
 80043ba:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 80043be:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart2, &length_0, 1, 100); /*Send 'length' first byte*/
 80043c0:	2364      	movs	r3, #100	; 0x64
 80043c2:	2201      	movs	r2, #1
 80043c4:	a901      	add	r1, sp, #4
 80043c6:	4638      	mov	r0, r7
 80043c8:	f7fe f88f 	bl	80024ea <HAL_UART_Transmit>
	length_0 = 0xFF & length;
 80043cc:	b2f6      	uxtb	r6, r6
 80043ce:	9601      	str	r6, [sp, #4]
	HAL_UART_Transmit(&huart2, &length_0, 1, 100); /*Send 'length' second byte*/
 80043d0:	2364      	movs	r3, #100	; 0x64
 80043d2:	2201      	movs	r2, #1
 80043d4:	a901      	add	r1, sp, #4
 80043d6:	4638      	mov	r0, r7
 80043d8:	f7fe f887 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_type, 1, 100); /*Send 'freme type'*/
 80043dc:	2364      	movs	r3, #100	; 0x64
 80043de:	2201      	movs	r2, #1
 80043e0:	f10d 011e 	add.w	r1, sp, #30
 80043e4:	4638      	mov	r0, r7
 80043e6:	f7fe f880 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_id, 1, 100); /*Send 'freme id'*/
 80043ea:	2364      	movs	r3, #100	; 0x64
 80043ec:	2201      	movs	r2, #1
 80043ee:	f10d 011d 	add.w	r1, sp, #29
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7fe f879 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_64b, 8, 100); /*Send '64b address'*/
 80043f8:	2364      	movs	r3, #100	; 0x64
 80043fa:	2208      	movs	r2, #8
 80043fc:	a905      	add	r1, sp, #20
 80043fe:	4638      	mov	r0, r7
 8004400:	f7fe f873 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_16b, 2, 100); /*Send '16b address'*/
 8004404:	2364      	movs	r3, #100	; 0x64
 8004406:	2202      	movs	r2, #2
 8004408:	a904      	add	r1, sp, #16
 800440a:	4638      	mov	r0, r7
 800440c:	f7fe f86d 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_broad_radius, 1, 100); /*Send 'freme type'*/
 8004410:	2364      	movs	r3, #100	; 0x64
 8004412:	2201      	movs	r2, #1
 8004414:	f10d 010f 	add.w	r1, sp, #15
 8004418:	4638      	mov	r0, r7
 800441a:	f7fe f866 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_options, 1, 100); /*Send 'options'*/
 800441e:	2364      	movs	r3, #100	; 0x64
 8004420:	2201      	movs	r2, #1
 8004422:	f10d 010e 	add.w	r1, sp, #14
 8004426:	4638      	mov	r0, r7
 8004428:	f7fe f85f 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, xbeeBuffer, buff_size, 100); /*Send the message*/
 800442c:	2364      	movs	r3, #100	; 0x64
 800442e:	b2a2      	uxth	r2, r4
 8004430:	4629      	mov	r1, r5
 8004432:	4638      	mov	r0, r7
 8004434:	f7fe f859 	bl	80024ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &checksum, 1, 100); /*Send 'checksum'*/
 8004438:	2364      	movs	r3, #100	; 0x64
 800443a:	2201      	movs	r2, #1
 800443c:	a902      	add	r1, sp, #8
 800443e:	4638      	mov	r0, r7
 8004440:	f7fe f853 	bl	80024ea <HAL_UART_Transmit>

	/*Reflesh the whatchDog*/

	if (HAL_GetTick() - timer_actual_uart > 60) {
 8004444:	f7fc fbc0 	bl	8000bc8 <HAL_GetTick>
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <xbeeApiModeSend+0x170>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1ac0      	subs	r0, r0, r3
 800444e:	283c      	cmp	r0, #60	; 0x3c
 8004450:	d802      	bhi.n	8004458 <xbeeApiModeSend+0x150>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
		timer_actual_uart = HAL_GetTick();
	}
	return 1; /*Return 'success'*/
 8004452:	2001      	movs	r0, #1
}
 8004454:	b009      	add	sp, #36	; 0x24
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8004458:	2102      	movs	r1, #2
 800445a:	4808      	ldr	r0, [pc, #32]	; (800447c <xbeeApiModeSend+0x174>)
 800445c:	f7fd fa39 	bl	80018d2 <HAL_GPIO_TogglePin>
		timer_actual_uart = HAL_GetTick();
 8004460:	f7fc fbb2 	bl	8000bc8 <HAL_GetTick>
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <xbeeApiModeSend+0x170>)
 8004466:	6018      	str	r0, [r3, #0]
	return 1; /*Return 'success'*/
 8004468:	2001      	movs	r0, #1
 800446a:	e7f3      	b.n	8004454 <xbeeApiModeSend+0x14c>
		return 0;
 800446c:	2000      	movs	r0, #0
 800446e:	e7f1      	b.n	8004454 <xbeeApiModeSend+0x14c>
 8004470:	08004f54 	.word	0x08004f54
 8004474:	20000f74 	.word	0x20000f74
 8004478:	200010c8 	.word	0x200010c8
 800447c:	40010800 	.word	0x40010800

08004480 <xbeeSend>:

void xbeeSend(int id, ...) {
 8004480:	b40f      	push	{r0, r1, r2, r3}
 8004482:	b500      	push	{lr}
 8004484:	b0a9      	sub	sp, #164	; 0xa4
 8004486:	ab2a      	add	r3, sp, #168	; 0xa8
 8004488:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	va_start(args, id);
 800448c:	9327      	str	r3, [sp, #156]	; 0x9c

	uint16_t data_word[4];

	for (int i = 0; i < 4; i++) {
 800448e:	2300      	movs	r3, #0
 8004490:	e009      	b.n	80044a6 <xbeeSend+0x26>
		data_word[i] = (uint16_t) va_arg(args, int);
 8004492:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004494:	1d08      	adds	r0, r1, #4
 8004496:	9027      	str	r0, [sp, #156]	; 0x9c
 8004498:	8808      	ldrh	r0, [r1, #0]
 800449a:	a928      	add	r1, sp, #160	; 0xa0
 800449c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80044a0:	f821 0c0c 	strh.w	r0, [r1, #-12]
	for (int i = 0; i < 4; i++) {
 80044a4:	3301      	adds	r3, #1
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	ddf3      	ble.n	8004492 <xbeeSend+0x12>
	}
	va_end(args);

	uint8_t xbeeBuffer[128];
	int len;
	switch (mode) {
 80044aa:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <xbeeSend+0xe0>)
 80044ac:	791b      	ldrb	r3, [r3, #4]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d812      	bhi.n	80044d8 <xbeeSend+0x58>
 80044b2:	e8df f003 	tbb	[pc, r3]
 80044b6:	1602      	.short	0x1602
 80044b8:	402a      	.short	0x402a
	case BYTES_API:
		xbeeBuffer[0] = (id);
 80044ba:	f88d 2014 	strb.w	r2, [sp, #20]
		xbeeBuffer[1] = (id >> 8);
 80044be:	1212      	asrs	r2, r2, #8
 80044c0:	f88d 2015 	strb.w	r2, [sp, #21]
		memcpy(xbeeBuffer + 2, data_word, 8);
 80044c4:	ab25      	add	r3, sp, #148	; 0x94
 80044c6:	cb03      	ldmia	r3!, {r0, r1}
 80044c8:	f8cd 0016 	str.w	r0, [sp, #22]
 80044cc:	f8cd 101a 	str.w	r1, [sp, #26]
		len = 10;
		xbeeApiModeSend(xbeeBuffer, len);
 80044d0:	210a      	movs	r1, #10
 80044d2:	a805      	add	r0, sp, #20
 80044d4:	f7ff ff18 	bl	8004308 <xbeeApiModeSend>
		memcpy(xbeeBuffer + 10, '\n', 1);
		HAL_UART_Transmit(&huart2, xbeeBuffer, 11, 100);
	}

//	HAL_Delay(DELAY_XBEE);
}
 80044d8:	b029      	add	sp, #164	; 0xa4
 80044da:	f85d eb04 	ldr.w	lr, [sp], #4
 80044de:	b004      	add	sp, #16
 80044e0:	4770      	bx	lr
				data_word[1], data_word[2], data_word[3]);
 80044e2:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 80044e6:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 80044ea:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u", id, data_word[0],
 80044ee:	9002      	str	r0, [sp, #8]
 80044f0:	9101      	str	r1, [sp, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80044f8:	491a      	ldr	r1, [pc, #104]	; (8004564 <xbeeSend+0xe4>)
 80044fa:	a805      	add	r0, sp, #20
 80044fc:	f000 f88a 	bl	8004614 <siprintf>
 8004500:	4601      	mov	r1, r0
		xbeeApiModeSend(xbeeBuffer, len);
 8004502:	a805      	add	r0, sp, #20
 8004504:	f7ff ff00 	bl	8004308 <xbeeApiModeSend>
		break;
 8004508:	e7e6      	b.n	80044d8 <xbeeSend+0x58>
				data_word[1], data_word[2], data_word[3]);
 800450a:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 800450e:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8004512:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u\n", id, data_word[0],
 8004516:	9002      	str	r0, [sp, #8]
 8004518:	9101      	str	r1, [sp, #4]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8004520:	4911      	ldr	r1, [pc, #68]	; (8004568 <xbeeSend+0xe8>)
 8004522:	a805      	add	r0, sp, #20
 8004524:	f000 f876 	bl	8004614 <siprintf>
		HAL_UART_Transmit(&huart2, xbeeBuffer, len, 100);
 8004528:	2364      	movs	r3, #100	; 0x64
 800452a:	b282      	uxth	r2, r0
 800452c:	a905      	add	r1, sp, #20
 800452e:	480f      	ldr	r0, [pc, #60]	; (800456c <xbeeSend+0xec>)
 8004530:	f7fd ffdb 	bl	80024ea <HAL_UART_Transmit>
		break;
 8004534:	e7d0      	b.n	80044d8 <xbeeSend+0x58>
		memcpy(xbeeBuffer, id, sizeof(uint16_t));
 8004536:	8813      	ldrh	r3, [r2, #0]
 8004538:	f8ad 3014 	strh.w	r3, [sp, #20]
		memcpy(xbeeBuffer + 2, data_word, sizeof(uint16_t) * 4);
 800453c:	ab25      	add	r3, sp, #148	; 0x94
 800453e:	cb03      	ldmia	r3!, {r0, r1}
 8004540:	f8cd 0016 	str.w	r0, [sp, #22]
 8004544:	f8cd 101a 	str.w	r1, [sp, #26]
		memcpy(xbeeBuffer + 10, '\n', 1);
 8004548:	2300      	movs	r3, #0
 800454a:	7a9b      	ldrb	r3, [r3, #10]
 800454c:	f88d 301e 	strb.w	r3, [sp, #30]
		HAL_UART_Transmit(&huart2, xbeeBuffer, 11, 100);
 8004550:	2364      	movs	r3, #100	; 0x64
 8004552:	220b      	movs	r2, #11
 8004554:	a905      	add	r1, sp, #20
 8004556:	4805      	ldr	r0, [pc, #20]	; (800456c <xbeeSend+0xec>)
 8004558:	f7fd ffc7 	bl	80024ea <HAL_UART_Transmit>
}
 800455c:	e7bc      	b.n	80044d8 <xbeeSend+0x58>
 800455e:	bf00      	nop
 8004560:	200010c8 	.word	0x200010c8
 8004564:	0800512c 	.word	0x0800512c
 8004568:	0800513c 	.word	0x0800513c
 800456c:	20000f74 	.word	0x20000f74

08004570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004570:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004572:	e003      	b.n	800457c <LoopCopyDataInit>

08004574 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004576:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004578:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800457a:	3104      	adds	r1, #4

0800457c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800457c:	480a      	ldr	r0, [pc, #40]	; (80045a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004580:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004582:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004584:	d3f6      	bcc.n	8004574 <CopyDataInit>
  ldr r2, =_sbss
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004588:	e002      	b.n	8004590 <LoopFillZerobss>

0800458a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800458a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800458c:	f842 3b04 	str.w	r3, [r2], #4

08004590 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004592:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004594:	d3f9      	bcc.n	800458a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004596:	f7ff fb75 	bl	8003c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800459a:	f000 f80f 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800459e:	f7ff f96f 	bl	8003880 <main>
  bx lr
 80045a2:	4770      	bx	lr
  ldr r3, =_sidata
 80045a4:	08005188 	.word	0x08005188
  ldr r0, =_sdata
 80045a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80045ac:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 80045b0:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80045b4:	200010e4 	.word	0x200010e4

080045b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045b8:	e7fe      	b.n	80045b8 <ADC1_2_IRQHandler>
	...

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	2600      	movs	r6, #0
 80045c0:	4d0c      	ldr	r5, [pc, #48]	; (80045f4 <__libc_init_array+0x38>)
 80045c2:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	f000 fcaa 	bl	8004f24 <_init>
 80045d0:	2600      	movs	r6, #0
 80045d2:	4d0a      	ldr	r5, [pc, #40]	; (80045fc <__libc_init_array+0x40>)
 80045d4:	4c0a      	ldr	r4, [pc, #40]	; (8004600 <__libc_init_array+0x44>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08005180 	.word	0x08005180
 80045f8:	08005180 	.word	0x08005180
 80045fc:	08005180 	.word	0x08005180
 8004600:	08005184 	.word	0x08005184

08004604 <memset>:
 8004604:	4603      	mov	r3, r0
 8004606:	4402      	add	r2, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <siprintf>:
 8004614:	b40e      	push	{r1, r2, r3}
 8004616:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800461a:	b500      	push	{lr}
 800461c:	b09c      	sub	sp, #112	; 0x70
 800461e:	ab1d      	add	r3, sp, #116	; 0x74
 8004620:	9002      	str	r0, [sp, #8]
 8004622:	9006      	str	r0, [sp, #24]
 8004624:	9107      	str	r1, [sp, #28]
 8004626:	9104      	str	r1, [sp, #16]
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <siprintf+0x38>)
 800462a:	4909      	ldr	r1, [pc, #36]	; (8004650 <siprintf+0x3c>)
 800462c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004630:	9105      	str	r1, [sp, #20]
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	a902      	add	r1, sp, #8
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	f000 f868 	bl	800470c <_svfiprintf_r>
 800463c:	2200      	movs	r2, #0
 800463e:	9b02      	ldr	r3, [sp, #8]
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	b01c      	add	sp, #112	; 0x70
 8004644:	f85d eb04 	ldr.w	lr, [sp], #4
 8004648:	b003      	add	sp, #12
 800464a:	4770      	bx	lr
 800464c:	2000001c 	.word	0x2000001c
 8004650:	ffff0208 	.word	0xffff0208

08004654 <__ssputs_r>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	688e      	ldr	r6, [r1, #8]
 800465a:	4682      	mov	sl, r0
 800465c:	429e      	cmp	r6, r3
 800465e:	460c      	mov	r4, r1
 8004660:	4690      	mov	r8, r2
 8004662:	461f      	mov	r7, r3
 8004664:	d838      	bhi.n	80046d8 <__ssputs_r+0x84>
 8004666:	898a      	ldrh	r2, [r1, #12]
 8004668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800466c:	d032      	beq.n	80046d4 <__ssputs_r+0x80>
 800466e:	6825      	ldr	r5, [r4, #0]
 8004670:	6909      	ldr	r1, [r1, #16]
 8004672:	3301      	adds	r3, #1
 8004674:	eba5 0901 	sub.w	r9, r5, r1
 8004678:	6965      	ldr	r5, [r4, #20]
 800467a:	444b      	add	r3, r9
 800467c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004680:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004684:	106d      	asrs	r5, r5, #1
 8004686:	429d      	cmp	r5, r3
 8004688:	bf38      	it	cc
 800468a:	461d      	movcc	r5, r3
 800468c:	0553      	lsls	r3, r2, #21
 800468e:	d531      	bpl.n	80046f4 <__ssputs_r+0xa0>
 8004690:	4629      	mov	r1, r5
 8004692:	f000 fb6f 	bl	8004d74 <_malloc_r>
 8004696:	4606      	mov	r6, r0
 8004698:	b950      	cbnz	r0, 80046b0 <__ssputs_r+0x5c>
 800469a:	230c      	movs	r3, #12
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f8ca 3000 	str.w	r3, [sl]
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	464a      	mov	r2, r9
 80046b2:	6921      	ldr	r1, [r4, #16]
 80046b4:	f000 face 	bl	8004c54 <memcpy>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	6126      	str	r6, [r4, #16]
 80046c6:	444e      	add	r6, r9
 80046c8:	6026      	str	r6, [r4, #0]
 80046ca:	463e      	mov	r6, r7
 80046cc:	6165      	str	r5, [r4, #20]
 80046ce:	eba5 0509 	sub.w	r5, r5, r9
 80046d2:	60a5      	str	r5, [r4, #8]
 80046d4:	42be      	cmp	r6, r7
 80046d6:	d900      	bls.n	80046da <__ssputs_r+0x86>
 80046d8:	463e      	mov	r6, r7
 80046da:	4632      	mov	r2, r6
 80046dc:	4641      	mov	r1, r8
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	f000 fac6 	bl	8004c70 <memmove>
 80046e4:	68a3      	ldr	r3, [r4, #8]
 80046e6:	2000      	movs	r0, #0
 80046e8:	1b9b      	subs	r3, r3, r6
 80046ea:	60a3      	str	r3, [r4, #8]
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	4433      	add	r3, r6
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	e7db      	b.n	80046ac <__ssputs_r+0x58>
 80046f4:	462a      	mov	r2, r5
 80046f6:	f000 fbb1 	bl	8004e5c <_realloc_r>
 80046fa:	4606      	mov	r6, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1e1      	bne.n	80046c4 <__ssputs_r+0x70>
 8004700:	4650      	mov	r0, sl
 8004702:	6921      	ldr	r1, [r4, #16]
 8004704:	f000 face 	bl	8004ca4 <_free_r>
 8004708:	e7c7      	b.n	800469a <__ssputs_r+0x46>
	...

0800470c <_svfiprintf_r>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	4698      	mov	r8, r3
 8004712:	898b      	ldrh	r3, [r1, #12]
 8004714:	4607      	mov	r7, r0
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	460d      	mov	r5, r1
 800471a:	4614      	mov	r4, r2
 800471c:	b09d      	sub	sp, #116	; 0x74
 800471e:	d50e      	bpl.n	800473e <_svfiprintf_r+0x32>
 8004720:	690b      	ldr	r3, [r1, #16]
 8004722:	b963      	cbnz	r3, 800473e <_svfiprintf_r+0x32>
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	f000 fb25 	bl	8004d74 <_malloc_r>
 800472a:	6028      	str	r0, [r5, #0]
 800472c:	6128      	str	r0, [r5, #16]
 800472e:	b920      	cbnz	r0, 800473a <_svfiprintf_r+0x2e>
 8004730:	230c      	movs	r3, #12
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e0d1      	b.n	80048de <_svfiprintf_r+0x1d2>
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	616b      	str	r3, [r5, #20]
 800473e:	2300      	movs	r3, #0
 8004740:	9309      	str	r3, [sp, #36]	; 0x24
 8004742:	2320      	movs	r3, #32
 8004744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004748:	2330      	movs	r3, #48	; 0x30
 800474a:	f04f 0901 	mov.w	r9, #1
 800474e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048f8 <_svfiprintf_r+0x1ec>
 8004756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800475a:	4623      	mov	r3, r4
 800475c:	469a      	mov	sl, r3
 800475e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004762:	b10a      	cbz	r2, 8004768 <_svfiprintf_r+0x5c>
 8004764:	2a25      	cmp	r2, #37	; 0x25
 8004766:	d1f9      	bne.n	800475c <_svfiprintf_r+0x50>
 8004768:	ebba 0b04 	subs.w	fp, sl, r4
 800476c:	d00b      	beq.n	8004786 <_svfiprintf_r+0x7a>
 800476e:	465b      	mov	r3, fp
 8004770:	4622      	mov	r2, r4
 8004772:	4629      	mov	r1, r5
 8004774:	4638      	mov	r0, r7
 8004776:	f7ff ff6d 	bl	8004654 <__ssputs_r>
 800477a:	3001      	adds	r0, #1
 800477c:	f000 80aa 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004782:	445a      	add	r2, fp
 8004784:	9209      	str	r2, [sp, #36]	; 0x24
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80a2 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004790:	2300      	movs	r3, #0
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479a:	f10a 0a01 	add.w	sl, sl, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	9307      	str	r3, [sp, #28]
 80047a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047a6:	931a      	str	r3, [sp, #104]	; 0x68
 80047a8:	4654      	mov	r4, sl
 80047aa:	2205      	movs	r2, #5
 80047ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b0:	4851      	ldr	r0, [pc, #324]	; (80048f8 <_svfiprintf_r+0x1ec>)
 80047b2:	f000 fa41 	bl	8004c38 <memchr>
 80047b6:	9a04      	ldr	r2, [sp, #16]
 80047b8:	b9d8      	cbnz	r0, 80047f2 <_svfiprintf_r+0xe6>
 80047ba:	06d0      	lsls	r0, r2, #27
 80047bc:	bf44      	itt	mi
 80047be:	2320      	movmi	r3, #32
 80047c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c4:	0711      	lsls	r1, r2, #28
 80047c6:	bf44      	itt	mi
 80047c8:	232b      	movmi	r3, #43	; 0x2b
 80047ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ce:	f89a 3000 	ldrb.w	r3, [sl]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d015      	beq.n	8004802 <_svfiprintf_r+0xf6>
 80047d6:	4654      	mov	r4, sl
 80047d8:	2000      	movs	r0, #0
 80047da:	f04f 0c0a 	mov.w	ip, #10
 80047de:	9a07      	ldr	r2, [sp, #28]
 80047e0:	4621      	mov	r1, r4
 80047e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e6:	3b30      	subs	r3, #48	; 0x30
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d94e      	bls.n	800488a <_svfiprintf_r+0x17e>
 80047ec:	b1b0      	cbz	r0, 800481c <_svfiprintf_r+0x110>
 80047ee:	9207      	str	r2, [sp, #28]
 80047f0:	e014      	b.n	800481c <_svfiprintf_r+0x110>
 80047f2:	eba0 0308 	sub.w	r3, r0, r8
 80047f6:	fa09 f303 	lsl.w	r3, r9, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	46a2      	mov	sl, r4
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	e7d2      	b.n	80047a8 <_svfiprintf_r+0x9c>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9103      	str	r1, [sp, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfbb      	ittet	lt
 800480e:	425b      	neglt	r3, r3
 8004810:	f042 0202 	orrlt.w	r2, r2, #2
 8004814:	9307      	strge	r3, [sp, #28]
 8004816:	9307      	strlt	r3, [sp, #28]
 8004818:	bfb8      	it	lt
 800481a:	9204      	strlt	r2, [sp, #16]
 800481c:	7823      	ldrb	r3, [r4, #0]
 800481e:	2b2e      	cmp	r3, #46	; 0x2e
 8004820:	d10c      	bne.n	800483c <_svfiprintf_r+0x130>
 8004822:	7863      	ldrb	r3, [r4, #1]
 8004824:	2b2a      	cmp	r3, #42	; 0x2a
 8004826:	d135      	bne.n	8004894 <_svfiprintf_r+0x188>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	3402      	adds	r4, #2
 800482c:	1d1a      	adds	r2, r3, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	9203      	str	r2, [sp, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfb8      	it	lt
 8004836:	f04f 33ff 	movlt.w	r3, #4294967295
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80048fc <_svfiprintf_r+0x1f0>
 8004840:	2203      	movs	r2, #3
 8004842:	4650      	mov	r0, sl
 8004844:	7821      	ldrb	r1, [r4, #0]
 8004846:	f000 f9f7 	bl	8004c38 <memchr>
 800484a:	b140      	cbz	r0, 800485e <_svfiprintf_r+0x152>
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	eba0 000a 	sub.w	r0, r0, sl
 8004852:	fa03 f000 	lsl.w	r0, r3, r0
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	3401      	adds	r4, #1
 800485a:	4303      	orrs	r3, r0
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004862:	2206      	movs	r2, #6
 8004864:	4826      	ldr	r0, [pc, #152]	; (8004900 <_svfiprintf_r+0x1f4>)
 8004866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800486a:	f000 f9e5 	bl	8004c38 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d038      	beq.n	80048e4 <_svfiprintf_r+0x1d8>
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <_svfiprintf_r+0x1f8>)
 8004874:	bb1b      	cbnz	r3, 80048be <_svfiprintf_r+0x1b2>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	3307      	adds	r3, #7
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	3308      	adds	r3, #8
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004884:	4433      	add	r3, r6
 8004886:	9309      	str	r3, [sp, #36]	; 0x24
 8004888:	e767      	b.n	800475a <_svfiprintf_r+0x4e>
 800488a:	460c      	mov	r4, r1
 800488c:	2001      	movs	r0, #1
 800488e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004892:	e7a5      	b.n	80047e0 <_svfiprintf_r+0xd4>
 8004894:	2300      	movs	r3, #0
 8004896:	f04f 0c0a 	mov.w	ip, #10
 800489a:	4619      	mov	r1, r3
 800489c:	3401      	adds	r4, #1
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	4620      	mov	r0, r4
 80048a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a6:	3a30      	subs	r2, #48	; 0x30
 80048a8:	2a09      	cmp	r2, #9
 80048aa:	d903      	bls.n	80048b4 <_svfiprintf_r+0x1a8>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0c5      	beq.n	800483c <_svfiprintf_r+0x130>
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	e7c3      	b.n	800483c <_svfiprintf_r+0x130>
 80048b4:	4604      	mov	r4, r0
 80048b6:	2301      	movs	r3, #1
 80048b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80048bc:	e7f0      	b.n	80048a0 <_svfiprintf_r+0x194>
 80048be:	ab03      	add	r3, sp, #12
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4638      	mov	r0, r7
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <_svfiprintf_r+0x1fc>)
 80048c8:	a904      	add	r1, sp, #16
 80048ca:	f3af 8000 	nop.w
 80048ce:	1c42      	adds	r2, r0, #1
 80048d0:	4606      	mov	r6, r0
 80048d2:	d1d6      	bne.n	8004882 <_svfiprintf_r+0x176>
 80048d4:	89ab      	ldrh	r3, [r5, #12]
 80048d6:	065b      	lsls	r3, r3, #25
 80048d8:	f53f af2c 	bmi.w	8004734 <_svfiprintf_r+0x28>
 80048dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048de:	b01d      	add	sp, #116	; 0x74
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4638      	mov	r0, r7
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_svfiprintf_r+0x1fc>)
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	f000 f87c 	bl	80049ec <_printf_i>
 80048f4:	e7eb      	b.n	80048ce <_svfiprintf_r+0x1c2>
 80048f6:	bf00      	nop
 80048f8:	0800514c 	.word	0x0800514c
 80048fc:	08005152 	.word	0x08005152
 8004900:	08005156 	.word	0x08005156
 8004904:	00000000 	.word	0x00000000
 8004908:	08004655 	.word	0x08004655

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	4607      	mov	r7, r0
 800491a:	4293      	cmp	r3, r2
 800491c:	bfb8      	it	lt
 800491e:	4613      	movlt	r3, r2
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004926:	460c      	mov	r4, r1
 8004928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc28      	bgt.n	80049a6 <_printf_common+0x9a>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d42d      	bmi.n	80049c0 <_printf_common+0xb4>
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d020      	beq.n	80049b4 <_printf_common+0xa8>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	68e5      	ldr	r5, [r4, #12]
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf18      	it	ne
 800497e:	2500      	movne	r5, #0
 8004980:	6832      	ldr	r2, [r6, #0]
 8004982:	f04f 0600 	mov.w	r6, #0
 8004986:	68a3      	ldr	r3, [r4, #8]
 8004988:	bf08      	it	eq
 800498a:	1aad      	subeq	r5, r5, r2
 800498c:	6922      	ldr	r2, [r4, #16]
 800498e:	bf08      	it	eq
 8004990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004994:	4293      	cmp	r3, r2
 8004996:	bfc4      	itt	gt
 8004998:	1a9b      	subgt	r3, r3, r2
 800499a:	18ed      	addgt	r5, r5, r3
 800499c:	341a      	adds	r4, #26
 800499e:	42b5      	cmp	r5, r6
 80049a0:	d11a      	bne.n	80049d8 <_printf_common+0xcc>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e008      	b.n	80049b8 <_printf_common+0xac>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4652      	mov	r2, sl
 80049aa:	4649      	mov	r1, r9
 80049ac:	4638      	mov	r0, r7
 80049ae:	47c0      	blx	r8
 80049b0:	3001      	adds	r0, #1
 80049b2:	d103      	bne.n	80049bc <_printf_common+0xb0>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049bc:	3501      	adds	r5, #1
 80049be:	e7c4      	b.n	800494a <_printf_common+0x3e>
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	18e1      	adds	r1, r4, r3
 80049c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ce:	4422      	add	r2, r4
 80049d0:	3302      	adds	r3, #2
 80049d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d6:	e7c5      	b.n	8004964 <_printf_common+0x58>
 80049d8:	2301      	movs	r3, #1
 80049da:	4622      	mov	r2, r4
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d0e6      	beq.n	80049b4 <_printf_common+0xa8>
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7d9      	b.n	800499e <_printf_common+0x92>
	...

080049ec <_printf_i>:
 80049ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	7e0f      	ldrb	r7, [r1, #24]
 80049f2:	4691      	mov	r9, r2
 80049f4:	2f78      	cmp	r7, #120	; 0x78
 80049f6:	4680      	mov	r8, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	469a      	mov	sl, r3
 80049fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a02:	d807      	bhi.n	8004a14 <_printf_i+0x28>
 8004a04:	2f62      	cmp	r7, #98	; 0x62
 8004a06:	d80a      	bhi.n	8004a1e <_printf_i+0x32>
 8004a08:	2f00      	cmp	r7, #0
 8004a0a:	f000 80d9 	beq.w	8004bc0 <_printf_i+0x1d4>
 8004a0e:	2f58      	cmp	r7, #88	; 0x58
 8004a10:	f000 80a4 	beq.w	8004b5c <_printf_i+0x170>
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a1c:	e03a      	b.n	8004a94 <_printf_i+0xa8>
 8004a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a22:	2b15      	cmp	r3, #21
 8004a24:	d8f6      	bhi.n	8004a14 <_printf_i+0x28>
 8004a26:	a101      	add	r1, pc, #4	; (adr r1, 8004a2c <_printf_i+0x40>)
 8004a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a15 	.word	0x08004a15
 8004a38:	08004a15 	.word	0x08004a15
 8004a3c:	08004a15 	.word	0x08004a15
 8004a40:	08004a15 	.word	0x08004a15
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a15 	.word	0x08004a15
 8004a4c:	08004a15 	.word	0x08004a15
 8004a50:	08004a15 	.word	0x08004a15
 8004a54:	08004a15 	.word	0x08004a15
 8004a58:	08004ba7 	.word	0x08004ba7
 8004a5c:	08004ac9 	.word	0x08004ac9
 8004a60:	08004b89 	.word	0x08004b89
 8004a64:	08004a15 	.word	0x08004a15
 8004a68:	08004a15 	.word	0x08004a15
 8004a6c:	08004bc9 	.word	0x08004bc9
 8004a70:	08004a15 	.word	0x08004a15
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004a15 	.word	0x08004a15
 8004a7c:	08004a15 	.word	0x08004a15
 8004a80:	08004b91 	.word	0x08004b91
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0a4      	b.n	8004be2 <_printf_i+0x1f6>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	6829      	ldr	r1, [r5, #0]
 8004a9c:	0606      	lsls	r6, r0, #24
 8004a9e:	f101 0304 	add.w	r3, r1, #4
 8004aa2:	d50a      	bpl.n	8004aba <_printf_i+0xce>
 8004aa4:	680e      	ldr	r6, [r1, #0]
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	2e00      	cmp	r6, #0
 8004aaa:	da03      	bge.n	8004ab4 <_printf_i+0xc8>
 8004aac:	232d      	movs	r3, #45	; 0x2d
 8004aae:	4276      	negs	r6, r6
 8004ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab4:	230a      	movs	r3, #10
 8004ab6:	485e      	ldr	r0, [pc, #376]	; (8004c30 <_printf_i+0x244>)
 8004ab8:	e019      	b.n	8004aee <_printf_i+0x102>
 8004aba:	680e      	ldr	r6, [r1, #0]
 8004abc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	bf18      	it	ne
 8004ac4:	b236      	sxthne	r6, r6
 8004ac6:	e7ef      	b.n	8004aa8 <_printf_i+0xbc>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	1d19      	adds	r1, r3, #4
 8004ace:	6029      	str	r1, [r5, #0]
 8004ad0:	0601      	lsls	r1, r0, #24
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_i+0xec>
 8004ad4:	681e      	ldr	r6, [r3, #0]
 8004ad6:	e002      	b.n	8004ade <_printf_i+0xf2>
 8004ad8:	0646      	lsls	r6, r0, #25
 8004ada:	d5fb      	bpl.n	8004ad4 <_printf_i+0xe8>
 8004adc:	881e      	ldrh	r6, [r3, #0]
 8004ade:	2f6f      	cmp	r7, #111	; 0x6f
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2308      	moveq	r3, #8
 8004ae4:	230a      	movne	r3, #10
 8004ae6:	4852      	ldr	r0, [pc, #328]	; (8004c30 <_printf_i+0x244>)
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aee:	6865      	ldr	r5, [r4, #4]
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	bfa8      	it	ge
 8004af4:	6821      	ldrge	r1, [r4, #0]
 8004af6:	60a5      	str	r5, [r4, #8]
 8004af8:	bfa4      	itt	ge
 8004afa:	f021 0104 	bicge.w	r1, r1, #4
 8004afe:	6021      	strge	r1, [r4, #0]
 8004b00:	b90e      	cbnz	r6, 8004b06 <_printf_i+0x11a>
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	d04d      	beq.n	8004ba2 <_printf_i+0x1b6>
 8004b06:	4615      	mov	r5, r2
 8004b08:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b0c:	fb03 6711 	mls	r7, r3, r1, r6
 8004b10:	5dc7      	ldrb	r7, [r0, r7]
 8004b12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b16:	4637      	mov	r7, r6
 8004b18:	42bb      	cmp	r3, r7
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	d9f4      	bls.n	8004b08 <_printf_i+0x11c>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d10b      	bne.n	8004b3a <_printf_i+0x14e>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07de      	lsls	r6, r3, #31
 8004b26:	d508      	bpl.n	8004b3a <_printf_i+0x14e>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	6861      	ldr	r1, [r4, #4]
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	bfde      	ittt	le
 8004b30:	2330      	movle	r3, #48	; 0x30
 8004b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b3a:	1b52      	subs	r2, r2, r5
 8004b3c:	6122      	str	r2, [r4, #16]
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f8cd a000 	str.w	sl, [sp]
 8004b48:	aa03      	add	r2, sp, #12
 8004b4a:	f7ff fedf 	bl	800490c <_printf_common>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d14c      	bne.n	8004bec <_printf_i+0x200>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	b004      	add	sp, #16
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	4834      	ldr	r0, [pc, #208]	; (8004c30 <_printf_i+0x244>)
 8004b5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b6a:	6029      	str	r1, [r5, #0]
 8004b6c:	061d      	lsls	r5, r3, #24
 8004b6e:	d514      	bpl.n	8004b9a <_printf_i+0x1ae>
 8004b70:	07df      	lsls	r7, r3, #31
 8004b72:	bf44      	itt	mi
 8004b74:	f043 0320 	orrmi.w	r3, r3, #32
 8004b78:	6023      	strmi	r3, [r4, #0]
 8004b7a:	b91e      	cbnz	r6, 8004b84 <_printf_i+0x198>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	f023 0320 	bic.w	r3, r3, #32
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	2310      	movs	r3, #16
 8004b86:	e7af      	b.n	8004ae8 <_printf_i+0xfc>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f043 0320 	orr.w	r3, r3, #32
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	2378      	movs	r3, #120	; 0x78
 8004b92:	4828      	ldr	r0, [pc, #160]	; (8004c34 <_printf_i+0x248>)
 8004b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b98:	e7e3      	b.n	8004b62 <_printf_i+0x176>
 8004b9a:	0659      	lsls	r1, r3, #25
 8004b9c:	bf48      	it	mi
 8004b9e:	b2b6      	uxthmi	r6, r6
 8004ba0:	e7e6      	b.n	8004b70 <_printf_i+0x184>
 8004ba2:	4615      	mov	r5, r2
 8004ba4:	e7bb      	b.n	8004b1e <_printf_i+0x132>
 8004ba6:	682b      	ldr	r3, [r5, #0]
 8004ba8:	6826      	ldr	r6, [r4, #0]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6961      	ldr	r1, [r4, #20]
 8004bae:	6028      	str	r0, [r5, #0]
 8004bb0:	0635      	lsls	r5, r6, #24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	d501      	bpl.n	8004bba <_printf_i+0x1ce>
 8004bb6:	6019      	str	r1, [r3, #0]
 8004bb8:	e002      	b.n	8004bc0 <_printf_i+0x1d4>
 8004bba:	0670      	lsls	r0, r6, #25
 8004bbc:	d5fb      	bpl.n	8004bb6 <_printf_i+0x1ca>
 8004bbe:	8019      	strh	r1, [r3, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4615      	mov	r5, r2
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	e7ba      	b.n	8004b3e <_printf_i+0x152>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	1d1a      	adds	r2, r3, #4
 8004bce:	602a      	str	r2, [r5, #0]
 8004bd0:	681d      	ldr	r5, [r3, #0]
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 f82f 	bl	8004c38 <memchr>
 8004bda:	b108      	cbz	r0, 8004be0 <_printf_i+0x1f4>
 8004bdc:	1b40      	subs	r0, r0, r5
 8004bde:	6060      	str	r0, [r4, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	2300      	movs	r3, #0
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bea:	e7a8      	b.n	8004b3e <_printf_i+0x152>
 8004bec:	462a      	mov	r2, r5
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	47d0      	blx	sl
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0ab      	beq.n	8004b52 <_printf_i+0x166>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d413      	bmi.n	8004c28 <_printf_i+0x23c>
 8004c00:	68e0      	ldr	r0, [r4, #12]
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	4298      	cmp	r0, r3
 8004c06:	bfb8      	it	lt
 8004c08:	4618      	movlt	r0, r3
 8004c0a:	e7a4      	b.n	8004b56 <_printf_i+0x16a>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4649      	mov	r1, r9
 8004c12:	4640      	mov	r0, r8
 8004c14:	47d0      	blx	sl
 8004c16:	3001      	adds	r0, #1
 8004c18:	d09b      	beq.n	8004b52 <_printf_i+0x166>
 8004c1a:	3501      	adds	r5, #1
 8004c1c:	68e3      	ldr	r3, [r4, #12]
 8004c1e:	9903      	ldr	r1, [sp, #12]
 8004c20:	1a5b      	subs	r3, r3, r1
 8004c22:	42ab      	cmp	r3, r5
 8004c24:	dcf2      	bgt.n	8004c0c <_printf_i+0x220>
 8004c26:	e7eb      	b.n	8004c00 <_printf_i+0x214>
 8004c28:	2500      	movs	r5, #0
 8004c2a:	f104 0619 	add.w	r6, r4, #25
 8004c2e:	e7f5      	b.n	8004c1c <_printf_i+0x230>
 8004c30:	0800515d 	.word	0x0800515d
 8004c34:	0800516e 	.word	0x0800516e

08004c38 <memchr>:
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	b2c9      	uxtb	r1, r1
 8004c3e:	4402      	add	r2, r0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	d101      	bne.n	8004c4a <memchr+0x12>
 8004c46:	2000      	movs	r0, #0
 8004c48:	e003      	b.n	8004c52 <memchr+0x1a>
 8004c4a:	7804      	ldrb	r4, [r0, #0]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	428c      	cmp	r4, r1
 8004c50:	d1f6      	bne.n	8004c40 <memchr+0x8>
 8004c52:	bd10      	pop	{r4, pc}

08004c54 <memcpy>:
 8004c54:	440a      	add	r2, r1
 8004c56:	4291      	cmp	r1, r2
 8004c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c5c:	d100      	bne.n	8004c60 <memcpy+0xc>
 8004c5e:	4770      	bx	lr
 8004c60:	b510      	push	{r4, lr}
 8004c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c66:	4291      	cmp	r1, r2
 8004c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6c:	d1f9      	bne.n	8004c62 <memcpy+0xe>
 8004c6e:	bd10      	pop	{r4, pc}

08004c70 <memmove>:
 8004c70:	4288      	cmp	r0, r1
 8004c72:	b510      	push	{r4, lr}
 8004c74:	eb01 0402 	add.w	r4, r1, r2
 8004c78:	d902      	bls.n	8004c80 <memmove+0x10>
 8004c7a:	4284      	cmp	r4, r0
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	d807      	bhi.n	8004c90 <memmove+0x20>
 8004c80:	1e43      	subs	r3, r0, #1
 8004c82:	42a1      	cmp	r1, r4
 8004c84:	d008      	beq.n	8004c98 <memmove+0x28>
 8004c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8e:	e7f8      	b.n	8004c82 <memmove+0x12>
 8004c90:	4601      	mov	r1, r0
 8004c92:	4402      	add	r2, r0
 8004c94:	428a      	cmp	r2, r1
 8004c96:	d100      	bne.n	8004c9a <memmove+0x2a>
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca2:	e7f7      	b.n	8004c94 <memmove+0x24>

08004ca4 <_free_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d040      	beq.n	8004d2e <_free_r+0x8a>
 8004cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb0:	1f0c      	subs	r4, r1, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	18e4      	addlt	r4, r4, r3
 8004cb8:	f000 f910 	bl	8004edc <__malloc_lock>
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <_free_r+0x8c>)
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	b933      	cbnz	r3, 8004cd0 <_free_r+0x2c>
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	6014      	str	r4, [r2, #0]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ccc:	f000 b90c 	b.w	8004ee8 <__malloc_unlock>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d908      	bls.n	8004ce6 <_free_r+0x42>
 8004cd4:	6820      	ldr	r0, [r4, #0]
 8004cd6:	1821      	adds	r1, r4, r0
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf01      	itttt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	1809      	addeq	r1, r1, r0
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	e7ed      	b.n	8004cc2 <_free_r+0x1e>
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b10b      	cbz	r3, 8004cf0 <_free_r+0x4c>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x42>
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	1850      	adds	r0, r2, r1
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x6c>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	1850      	adds	r0, r2, r1
 8004cfe:	4283      	cmp	r3, r0
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	d1e0      	bne.n	8004cc6 <_free_r+0x22>
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4401      	add	r1, r0
 8004d0a:	6011      	str	r1, [r2, #0]
 8004d0c:	6053      	str	r3, [r2, #4]
 8004d0e:	e7da      	b.n	8004cc6 <_free_r+0x22>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x74>
 8004d12:	230c      	movs	r3, #12
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	e7d6      	b.n	8004cc6 <_free_r+0x22>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1809      	addeq	r1, r1, r0
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	6063      	str	r3, [r4, #4]
 8004d2a:	6054      	str	r4, [r2, #4]
 8004d2c:	e7cb      	b.n	8004cc6 <_free_r+0x22>
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	200010d0 	.word	0x200010d0

08004d34 <sbrk_aligned>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4e0e      	ldr	r6, [pc, #56]	; (8004d70 <sbrk_aligned+0x3c>)
 8004d38:	460c      	mov	r4, r1
 8004d3a:	6831      	ldr	r1, [r6, #0]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	b911      	cbnz	r1, 8004d46 <sbrk_aligned+0x12>
 8004d40:	f000 f8bc 	bl	8004ebc <_sbrk_r>
 8004d44:	6030      	str	r0, [r6, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 f8b7 	bl	8004ebc <_sbrk_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d00a      	beq.n	8004d68 <sbrk_aligned+0x34>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d007      	beq.n	8004d6c <sbrk_aligned+0x38>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 f8ac 	bl	8004ebc <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d101      	bne.n	8004d6c <sbrk_aligned+0x38>
 8004d68:	f04f 34ff 	mov.w	r4, #4294967295
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	200010d4 	.word	0x200010d4

08004d74 <_malloc_r>:
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	1ccd      	adds	r5, r1, #3
 8004d7a:	f025 0503 	bic.w	r5, r5, #3
 8004d7e:	3508      	adds	r5, #8
 8004d80:	2d0c      	cmp	r5, #12
 8004d82:	bf38      	it	cc
 8004d84:	250c      	movcc	r5, #12
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	4607      	mov	r7, r0
 8004d8a:	db01      	blt.n	8004d90 <_malloc_r+0x1c>
 8004d8c:	42a9      	cmp	r1, r5
 8004d8e:	d905      	bls.n	8004d9c <_malloc_r+0x28>
 8004d90:	230c      	movs	r3, #12
 8004d92:	2600      	movs	r6, #0
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4630      	mov	r0, r6
 8004d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d9c:	4e2e      	ldr	r6, [pc, #184]	; (8004e58 <_malloc_r+0xe4>)
 8004d9e:	f000 f89d 	bl	8004edc <__malloc_lock>
 8004da2:	6833      	ldr	r3, [r6, #0]
 8004da4:	461c      	mov	r4, r3
 8004da6:	bb34      	cbnz	r4, 8004df6 <_malloc_r+0x82>
 8004da8:	4629      	mov	r1, r5
 8004daa:	4638      	mov	r0, r7
 8004dac:	f7ff ffc2 	bl	8004d34 <sbrk_aligned>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	4604      	mov	r4, r0
 8004db4:	d14d      	bne.n	8004e52 <_malloc_r+0xde>
 8004db6:	6834      	ldr	r4, [r6, #0]
 8004db8:	4626      	mov	r6, r4
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	d140      	bne.n	8004e40 <_malloc_r+0xcc>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	eb04 0803 	add.w	r8, r4, r3
 8004dc8:	f000 f878 	bl	8004ebc <_sbrk_r>
 8004dcc:	4580      	cmp	r8, r0
 8004dce:	d13a      	bne.n	8004e46 <_malloc_r+0xd2>
 8004dd0:	6821      	ldr	r1, [r4, #0]
 8004dd2:	3503      	adds	r5, #3
 8004dd4:	1a6d      	subs	r5, r5, r1
 8004dd6:	f025 0503 	bic.w	r5, r5, #3
 8004dda:	3508      	adds	r5, #8
 8004ddc:	2d0c      	cmp	r5, #12
 8004dde:	bf38      	it	cc
 8004de0:	250c      	movcc	r5, #12
 8004de2:	4638      	mov	r0, r7
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7ff ffa5 	bl	8004d34 <sbrk_aligned>
 8004dea:	3001      	adds	r0, #1
 8004dec:	d02b      	beq.n	8004e46 <_malloc_r+0xd2>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	442b      	add	r3, r5
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	e00e      	b.n	8004e14 <_malloc_r+0xa0>
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	1b52      	subs	r2, r2, r5
 8004dfa:	d41e      	bmi.n	8004e3a <_malloc_r+0xc6>
 8004dfc:	2a0b      	cmp	r2, #11
 8004dfe:	d916      	bls.n	8004e2e <_malloc_r+0xba>
 8004e00:	1961      	adds	r1, r4, r5
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	6025      	str	r5, [r4, #0]
 8004e06:	bf18      	it	ne
 8004e08:	6059      	strne	r1, [r3, #4]
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	bf08      	it	eq
 8004e0e:	6031      	streq	r1, [r6, #0]
 8004e10:	5162      	str	r2, [r4, r5]
 8004e12:	604b      	str	r3, [r1, #4]
 8004e14:	4638      	mov	r0, r7
 8004e16:	f104 060b 	add.w	r6, r4, #11
 8004e1a:	f000 f865 	bl	8004ee8 <__malloc_unlock>
 8004e1e:	f026 0607 	bic.w	r6, r6, #7
 8004e22:	1d23      	adds	r3, r4, #4
 8004e24:	1af2      	subs	r2, r6, r3
 8004e26:	d0b6      	beq.n	8004d96 <_malloc_r+0x22>
 8004e28:	1b9b      	subs	r3, r3, r6
 8004e2a:	50a3      	str	r3, [r4, r2]
 8004e2c:	e7b3      	b.n	8004d96 <_malloc_r+0x22>
 8004e2e:	6862      	ldr	r2, [r4, #4]
 8004e30:	42a3      	cmp	r3, r4
 8004e32:	bf0c      	ite	eq
 8004e34:	6032      	streq	r2, [r6, #0]
 8004e36:	605a      	strne	r2, [r3, #4]
 8004e38:	e7ec      	b.n	8004e14 <_malloc_r+0xa0>
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	6864      	ldr	r4, [r4, #4]
 8004e3e:	e7b2      	b.n	8004da6 <_malloc_r+0x32>
 8004e40:	4634      	mov	r4, r6
 8004e42:	6876      	ldr	r6, [r6, #4]
 8004e44:	e7b9      	b.n	8004dba <_malloc_r+0x46>
 8004e46:	230c      	movs	r3, #12
 8004e48:	4638      	mov	r0, r7
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	f000 f84c 	bl	8004ee8 <__malloc_unlock>
 8004e50:	e7a1      	b.n	8004d96 <_malloc_r+0x22>
 8004e52:	6025      	str	r5, [r4, #0]
 8004e54:	e7de      	b.n	8004e14 <_malloc_r+0xa0>
 8004e56:	bf00      	nop
 8004e58:	200010d0 	.word	0x200010d0

08004e5c <_realloc_r>:
 8004e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e60:	4680      	mov	r8, r0
 8004e62:	4614      	mov	r4, r2
 8004e64:	460e      	mov	r6, r1
 8004e66:	b921      	cbnz	r1, 8004e72 <_realloc_r+0x16>
 8004e68:	4611      	mov	r1, r2
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	f7ff bf81 	b.w	8004d74 <_malloc_r>
 8004e72:	b92a      	cbnz	r2, 8004e80 <_realloc_r+0x24>
 8004e74:	f7ff ff16 	bl	8004ca4 <_free_r>
 8004e78:	4625      	mov	r5, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	f000 f838 	bl	8004ef4 <_malloc_usable_size_r>
 8004e84:	4284      	cmp	r4, r0
 8004e86:	4607      	mov	r7, r0
 8004e88:	d802      	bhi.n	8004e90 <_realloc_r+0x34>
 8004e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e8e:	d812      	bhi.n	8004eb6 <_realloc_r+0x5a>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f7ff ff6e 	bl	8004d74 <_malloc_r>
 8004e98:	4605      	mov	r5, r0
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0ed      	beq.n	8004e7a <_realloc_r+0x1e>
 8004e9e:	42bc      	cmp	r4, r7
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	bf28      	it	cs
 8004ea6:	463a      	movcs	r2, r7
 8004ea8:	f7ff fed4 	bl	8004c54 <memcpy>
 8004eac:	4631      	mov	r1, r6
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f7ff fef8 	bl	8004ca4 <_free_r>
 8004eb4:	e7e1      	b.n	8004e7a <_realloc_r+0x1e>
 8004eb6:	4635      	mov	r5, r6
 8004eb8:	e7df      	b.n	8004e7a <_realloc_r+0x1e>
	...

08004ebc <_sbrk_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4d05      	ldr	r5, [pc, #20]	; (8004ed8 <_sbrk_r+0x1c>)
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f000 f81e 	bl	8004f08 <_sbrk>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_sbrk_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_sbrk_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	200010d8 	.word	0x200010d8

08004edc <__malloc_lock>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__malloc_lock+0x8>)
 8004ede:	f000 b811 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	200010dc 	.word	0x200010dc

08004ee8 <__malloc_unlock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_unlock+0x8>)
 8004eea:	f000 b80c 	b.w	8004f06 <__retarget_lock_release_recursive>
 8004eee:	bf00      	nop
 8004ef0:	200010dc 	.word	0x200010dc

08004ef4 <_malloc_usable_size_r>:
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f18      	subs	r0, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfbc      	itt	lt
 8004efe:	580b      	ldrlt	r3, [r1, r0]
 8004f00:	18c0      	addlt	r0, r0, r3
 8004f02:	4770      	bx	lr

08004f04 <__retarget_lock_acquire_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_release_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <_sbrk>:
 8004f08:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <_sbrk+0x14>)
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	b909      	cbnz	r1, 8004f14 <_sbrk+0xc>
 8004f10:	4903      	ldr	r1, [pc, #12]	; (8004f20 <_sbrk+0x18>)
 8004f12:	6011      	str	r1, [r2, #0]
 8004f14:	6810      	ldr	r0, [r2, #0]
 8004f16:	4403      	add	r3, r0
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4770      	bx	lr
 8004f1c:	200010e0 	.word	0x200010e0
 8004f20:	200010e8 	.word	0x200010e8

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
